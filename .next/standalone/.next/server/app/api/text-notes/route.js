"use strict";(()=>{var e={};e.id=6830,e.ids=[6830],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},92048:e=>{e.exports=require("fs")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},98216:e=>{e.exports=require("net")},55315:e=>{e.exports=require("path")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},82452:e=>{e.exports=require("tls")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},6162:e=>{e.exports=require("worker_threads")},71568:e=>{e.exports=require("zlib")},87561:e=>{e.exports=require("node:fs")},84492:e=>{e.exports=require("node:stream")},72477:e=>{e.exports=require("node:stream/web")},68892:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>y,patchFetch:()=>q,requestAsyncStorage:()=>N,routeModule:()=>A,serverHooks:()=>T,staticGenerationAsyncStorage:()=>P});var r={};s.r(r),s.d(r,{DELETE:()=>I,GET:()=>p,POST:()=>m,dynamic:()=>f});var o=s(49303),a=s(88716),n=s(60670),i=s(87070),c=s(23517),u=s(51215),l=s(58026),d=s(82227);let g="https://xhljckmlzdshxibnqsbj.supabase.co",h="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function x(e){try{let t=(0,c.eI)(g,h),{data:s}=await t.from("user_subscriptions").select("plan_id").eq("user_id",e).eq("status","active").single(),r=s?.plan_id;if("student"===r||"pro"===r)return{planId:r};return{planId:"free"}}catch(e){return console.warn("[Text Notes API] Could not fetch subscription:",e),{planId:"free"}}}async function m(e){console.log("[Text Notes API] Request received: POST");try{console.log("[Text Notes API] Authenticating request");let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Text Notes API] Authentication missing"),i.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let s=t.replace("Bearer ",""),r=(0,c.eI)(g,h,{global:{headers:{Authorization:`Bearer ${s}`}}}),{data:{user:o},error:a}=await r.auth.getUser(s);if(a||!o)return console.error("[Text Notes API] Authentication failed:",a?.message),i.NextResponse.json({success:!1,error:"Authentication failed",message:a?.message||"Invalid authentication token"},{status:401});console.log(`[Text Notes API] User authenticated: ${o.id}`),console.log("[Text Notes API] Checking usage limits");let n=await (0,l.PH)(o.id,s,"text");if(!n.canGenerate)return console.log(`[Text Notes API] Generation limit reached: ${n.reason}`),i.NextResponse.json({success:!1,error:"Generation limit reached",message:n.reason||"You have reached your monthly note generation limit",usage:n.usage,limits:n.limits},{status:429});if(!n.canSave)return console.log(`[Text Notes API] Storage limit reached: ${n.reason}`),i.NextResponse.json({success:!1,error:"Storage limit reached",message:n.reason||"You have reached your saved notes limit",usage:n.usage,limits:n.limits},{status:429});console.log(`[Text Notes API] Usage check passed - can generate: ${n.canGenerate}, can save: ${n.canSave}`);let m=await x(o.id),p=await (0,d.GV)(o.id,m.planId,"text",async()=>{let t;let a=await e.json();console.log("[Text Notes API] Request body received");let{text:n}=a;if(!n)return console.error("[Text Notes API] Missing text parameter"),{success:!1,error:"Missing text",message:"Please provide text content to generate notes from"};if("string"!=typeof n)return console.error("[Text Notes API] Text is not a string:",typeof n),{success:!1,error:"Invalid text format",message:`Text must be a string, received ${typeof n}`};if(0===n.trim().length)return console.error("[Text Notes API] Empty text provided"),{success:!1,error:"Empty text",message:"Please provide non-empty text content"};if(n.length>5e4)return console.error(`[Text Notes API] Text too long: ${n.length} chars`),{success:!1,error:"Text too long",message:"Text exceeds maximum length of 50000 characters"};console.log(`[Text Notes API] Text validated: ${n.length} characters`),console.log("[Text Notes API] Generating notes from text");try{if(!(t=await (0,u.L)({transcript:n,videoTitle:"Text Notes"})).content)return console.error("[Text Notes API] AI note generation failed:",t.error),{success:!1,error:"Note generation failed",message:t.error||"Failed to generate notes from the text"};console.log(`[Text Notes API] Successfully generated notes (${t.content.length} chars)`)}catch(e){return console.error("[Text Notes API] Error during AI note generation:",e),{success:!1,error:"AI processing failed",message:e.message||"An error occurred while generating notes with AI"}}let i=`text_${Date.now()}`,c={id:i,user_id:o.id,title:`Text Notes - ${new Date().toLocaleDateString()}`,raw_text:n,content:t.content,summary:t.summary,quiz:t.quiz,created_at:new Date().toISOString()};console.log(`[Text Notes API] Created note with ID: ${i}`),console.log("[Text Notes API] Note data structure:",Object.keys(c).join(", ")),console.log("[Text Notes API] Storing note in Supabase text_notes table");try{try{let{error:e}=await r.from("text_notes").select("count").limit(1);if(e)return console.error("[Text Notes API] Database connection check failed:",e),{success:!1,error:"Database connection error",message:"Could not connect to the database. Please try again later.",details:{code:e.code,message:e.message}}}catch(e){console.error("[Text Notes API] Database ping exception:",e)}let{data:e,error:t}=await r.from("text_notes").insert(c).select().single();if(t){if(console.error("[Text Notes API] Database storage error:",t),console.error("[Text Notes API] Database error details:",{code:t.code,message:t.message,details:t.details,hint:t.hint}),"23505"===t.code)return{success:!1,error:"Duplicate record",message:"These notes already exist in the database",details:{code:t.code,message:t.message}};if(t.code?.startsWith("22")||t.code?.startsWith("23"))return{success:!1,error:"Invalid data format",message:"The note data could not be stored due to validation errors",details:{code:t.code,message:t.message}};if("42P01"===t.code)return{success:!1,error:"Schema error",message:"The text_notes table does not exist. Please run the database initialization.",details:{code:t.code,message:t.message}};return{success:!1,error:"Database error",message:"Failed to store the notes in the database",details:{code:t.code,message:t.message}}}console.log(`[Text Notes API] Successfully stored note in database with ID: ${e?.id||i}`),console.log("[Text Notes API] Incrementing usage counters");try{await (0,l.iS)(o.id,s,"text"),console.log("[Text Notes API] Usage tracking completed")}catch(e){console.error("[Text Notes API] Usage tracking failed (note still created):",e)}console.log("[Text Notes API] Refreshing saved notes count");try{await (0,l.u6)(o.id,s),console.log("[Text Notes API] Saved notes count refreshed")}catch(e){console.error("[Text Notes API] Saved notes count refresh failed (note still created):",e)}return{success:!0,data:e}}catch(e){return console.error("[Text Notes API] Unexpected database error:",e),{success:!1,error:"Database exception",message:e?.message||"An unexpected error occurred while storing notes",details:e}}});return i.NextResponse.json(p)}catch(e){return console.error("[Text Notes API] Critical error:",e),i.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred on the server",details:e.message},{status:500})}}async function p(e){console.log("[Text Notes API] Request received: GET");try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Text Notes API] Authentication missing"),i.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let s=t.replace("Bearer ",""),r=(0,c.eI)(g,h,{global:{headers:{Authorization:`Bearer ${s}`}}}),{data:{user:o},error:a}=await r.auth.getUser(s);if(a||!o)return console.error("[Text Notes API] Authentication failed:",a?.message),i.NextResponse.json({success:!1,error:"Authentication failed",message:a?.message||"Invalid authentication token"},{status:401});console.log(`[Text Notes API] User authenticated: ${o.id}`);let{data:n,error:u}=await r.from("text_notes").select("*").eq("user_id",o.id).order("created_at",{ascending:!1});if(u)return console.error("[Text Notes API] Database fetch error:",u),i.NextResponse.json({success:!1,error:"Database error",message:"Failed to fetch text notes from the database",details:{code:u.code,message:u.message}},{status:500});return console.log(`[Text Notes API] Successfully fetched ${n.length} text notes`),i.NextResponse.json({success:!0,data:n})}catch(e){return console.error("[Text Notes API] Error fetching text notes:",e),i.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while fetching text notes",details:e.message},{status:500})}}async function I(e){console.log("[Text Notes API] Request received: DELETE");try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Text Notes API] Authentication missing"),i.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let s=t.replace("Bearer ",""),r=(0,c.eI)(g,h,{global:{headers:{Authorization:`Bearer ${s}`}}}),{data:{user:o},error:a}=await r.auth.getUser(s);if(a||!o)return console.error("[Text Notes API] Authentication failed:",a?.message),i.NextResponse.json({success:!1,error:"Authentication failed",message:a?.message||"Invalid authentication token"},{status:401});console.log(`[Text Notes API] User authenticated: ${o.id}`);let n=e.nextUrl.searchParams.get("id");if(!n)return console.error("[Text Notes API] Note ID missing"),i.NextResponse.json({success:!1,error:"Missing note ID",message:"Note ID is required for deletion"},{status:400});console.log(`[Text Notes API] Deleting note with ID: ${n}`);let{data:u,error:d}=await r.from("text_notes").delete().eq("id",n).eq("user_id",o.id).select();if(d)return console.error("[Text Notes API] Database delete error:",d),i.NextResponse.json({success:!1,error:"Database error",message:"Failed to delete the note from the database",details:{code:d.code,message:d.message}},{status:500});if(!u||0===u.length)return console.error(`[Text Notes API] Note not found or access denied: ${n}`),i.NextResponse.json({success:!1,error:"Note not found",message:"The note was not found or you do not have permission to delete it"},{status:404});console.log(`[Text Notes API] Successfully deleted note: ${n}`);try{await (0,l.u6)(o.id,s),console.log("[Text Notes API] Saved notes count refreshed after deletion")}catch(e){console.error("[Text Notes API] Saved notes count refresh failed after deletion:",e)}return i.NextResponse.json({success:!0,message:"Note deleted successfully",data:u[0]})}catch(e){return console.error("[Text Notes API] Error deleting text note:",e),i.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while deleting the note",details:e.message},{status:500})}}let f="force-dynamic",A=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/text-notes/route",pathname:"/api/text-notes",filename:"route",bundlePath:"app/api/text-notes/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/text-notes/route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:N,staticGenerationAsyncStorage:P,serverHooks:T}=A,y="/api/text-notes/route";function q(){return(0,n.patchFetch)({serverHooks:T,staticGenerationAsyncStorage:P})}},82227:(e,t,s)=>{s.d(t,{DK:()=>n,GV:()=>a});class r{async addToQueue(e,t,s,r,o){let a=this.getPriorityFromPlan(s),n=`${e}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return new Promise((s,i)=>{let c={id:n,userId:e,priority:a,requestType:t,payload:r,resolve:async e=>{try{let e=await o();s(e)}catch(e){i(e)}finally{this.processing.delete(n),this.processNext()}},reject:e=>{this.processing.delete(n),i(e),this.processNext()},timestamp:new Date};this.insertByPriority(c),console.log(`[Queue] Added ${t} request for user ${e} with priority ${a}`),this.processNext()})}getQueueStats(e){let t=e?this.getUserPosition(e):null,s=this.queue.reduce((e,t)=>(1===t.priority?e.high++:2===t.priority?e.medium++:e.low++,e),{high:0,medium:0,low:0}),r=t?t*this.averageProcessingTime:this.queue.length*this.averageProcessingTime;return{totalItems:this.queue.length,priorityBreakdown:s,estimatedWaitTime:r}}getUserPosition(e){let t=this.queue.findIndex(t=>t.userId===e);return -1===t?null:t+1}processNext(){if(this.processing.size>=this.maxConcurrent||0===this.queue.length)return;let e=this.queue.shift();e&&(this.processing.set(e.id,!0),console.log(`[Queue] Processing ${e.requestType} for user ${e.userId} (priority ${e.priority})`),setTimeout(()=>{e.resolve(null)},100))}insertByPriority(e){let t=0;for(let s=0;s<this.queue.length;s++){let r=this.queue[s];if(e.priority<r.priority)break;e.priority===r.priority&&e.timestamp>=r.timestamp?t=s+1:e.priority>r.priority&&(t=s+1)}this.queue.splice(t,0,e)}getPriorityFromPlan(e){switch(e){case"pro":return 1;case"student":return 2;default:return 3}}removeFromQueue(e){let t=this.queue.length;return this.queue=this.queue.filter(t=>t.userId!==e),this.queue.length<t}updateAverageProcessingTime(e){this.averageProcessingTime=.8*this.averageProcessingTime+.2*e}getSystemLoad(){let e=this.processing.size,t=this.maxConcurrent;return{queueLength:this.queue.length,processing:e,capacity:t,loadPercentage:e/t*100}}constructor(){this.queue=[],this.processing=new Map,this.maxConcurrent=3,this.averageProcessingTime=90}}let o=new r;async function a(e,t,s,r){return o.addToQueue(e,s,t,{},r)}function n(e){return{stats:o.getQueueStats(e),position:e?o.getUserPosition(e):null,systemLoad:o.getSystemLoad()}}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[9276,5972,3517,4769,5605,8285,1215],()=>s(68892));module.exports=r})();