(()=>{var e={};e.id=4860,e.ids=[4860],e.modules={20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{"use strict";e.exports=require("buffer")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},68621:e=>{"use strict";e.exports=require("punycode")},76162:e=>{"use strict";e.exports=require("stream")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},71568:e=>{"use strict";e.exports=require("zlib")},58359:()=>{},93739:()=>{},37192:(e,t,s)=>{"use strict";s.r(t),s.d(t,{originalPathname:()=>I,patchFetch:()=>q,requestAsyncStorage:()=>g,routeModule:()=>A,serverHooks:()=>z,staticGenerationAsyncStorage:()=>h});var r={};s.r(r),s.d(r,{GET:()=>d,POST:()=>l,dynamic:()=>m});var o=s(49303),i=s(88716),a=s(60670),n=s(87070),u=s(23517);let c="https://xhljckmlzdshxibnqsbj.supabase.co",p="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function l(e){console.log("[Quiz Attempts API] Request received: POST");try{console.log("[Quiz Attempts API] Authenticating request");let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Quiz Attempts API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let s=t.replace("Bearer ",""),r=(0,u.eI)(c,p,{global:{headers:{Authorization:`Bearer ${s}`}}}),{data:{user:o},error:i}=await r.auth.getUser(s);if(i||!o)return console.error("[Quiz Attempts API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Quiz Attempts API] User authenticated: ${o.id}`);let a=await e.json();console.log("[Quiz Attempts API] Request body received");let{noteId:l,noteType:d,answers:m}=a;if(!l||!d||!m)return console.error("[Quiz Attempts API] Missing required fields"),n.NextResponse.json({success:!1,error:"Missing required fields",message:"noteId, noteType, and answers are required"},{status:400});if(!["text","video","file"].includes(d))return console.error("[Quiz Attempts API] Invalid note type:",d),n.NextResponse.json({success:!1,error:"Invalid note type",message:"noteType must be one of: text, video, file"},{status:400});if(!Array.isArray(m))return console.error("[Quiz Attempts API] Answers must be an array"),n.NextResponse.json({success:!1,error:"Invalid answers format",message:"answers must be an array"},{status:400});console.log(`[Quiz Attempts API] Processing quiz attempt for ${d} note: ${l}`);let A=`${d}_notes`,{data:g,error:h}=await r.from(A).select("quiz").eq("id",l).eq("user_id",o.id).single();if(h||!g)return console.error("[Quiz Attempts API] Note not found:",h?.message),n.NextResponse.json({success:!1,error:"Note not found",message:"The specified note was not found or you do not have access to it"},{status:404});let z=g.quiz;if(!z||!Array.isArray(z))return console.error("[Quiz Attempts API] No quiz found for note"),n.NextResponse.json({success:!1,error:"No quiz available",message:"This note does not have an associated quiz"},{status:404});let I=0,q=z.length;for(let e=0;e<Math.min(m.length,z.length);e++){let t=m[e],s=z[e].correctAnswer;t===s&&I++}let f=Math.round(I/q*100);console.log(`[Quiz Attempts API] Quiz scored: ${I}/${q} (${f}%)`);let x=`attempt_${Date.now()}`,P={id:x,user_id:o.id,note_id:l,note_type:d,answers:m,score:f,total_questions:q,completed_at:new Date().toISOString(),created_at:new Date().toISOString()},{data:Q,error:j}=await r.from("quiz_attempts").insert(P).select().single();if(j)return console.error("[Quiz Attempts API] Error storing attempt:",j),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to store quiz attempt",details:{code:j.code,message:j.message}},{status:500});return console.log(`[Quiz Attempts API] Quiz attempt stored successfully: ${x}`),n.NextResponse.json({success:!0,data:{attemptId:x,score:f,correctAnswers:I,totalQuestions:q,percentage:f,answers:m,completedAt:P.completed_at}})}catch(e){return console.error("[Quiz Attempts API] Critical error:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred on the server",details:e.message},{status:500})}}async function d(e){console.log("[Quiz Attempts API] Request received: GET");try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Quiz Attempts API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let s=t.replace("Bearer ",""),r=(0,u.eI)(c,p,{global:{headers:{Authorization:`Bearer ${s}`}}}),{data:{user:o},error:i}=await r.auth.getUser(s);if(i||!o)return console.error("[Quiz Attempts API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Quiz Attempts API] User authenticated: ${o.id}`);let a=e.nextUrl.searchParams.get("noteId"),l=r.from("quiz_attempts").select("*").eq("user_id",o.id).order("completed_at",{ascending:!1});a&&(l=l.eq("note_id",a));let{data:d,error:m}=await l;if(m)return console.error("[Quiz Attempts API] Database fetch error:",m),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to fetch quiz attempts from the database",details:{code:m.code,message:m.message}},{status:500});return console.log(`[Quiz Attempts API] Successfully fetched ${d.length} quiz attempts`),n.NextResponse.json({success:!0,data:d})}catch(e){return console.error("[Quiz Attempts API] Error fetching quiz attempts:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while fetching quiz attempts",details:e.message},{status:500})}}let m="force-dynamic",A=new o.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/quiz-attempts/route",pathname:"/api/quiz-attempts",filename:"route",bundlePath:"app/api/quiz-attempts/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/quiz-attempts/route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:g,staticGenerationAsyncStorage:h,serverHooks:z}=A,I="/api/quiz-attempts/route";function q(){return(0,a.patchFetch)({serverHooks:z,staticGenerationAsyncStorage:h})}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[9276,5972,3517],()=>s(37192));module.exports=r})();