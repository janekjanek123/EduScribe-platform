"use strict";(()=>{var e={};e.id=3735,e.ids=[3735],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{e.exports=require("buffer")},61282:e=>{e.exports=require("child_process")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},92048:e=>{e.exports=require("fs")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},55315:e=>{e.exports=require("path")},86624:e=>{e.exports=require("querystring")},76162:e=>{e.exports=require("stream")},74026:e=>{e.exports=require("string_decoder")},95346:e=>{e.exports=require("timers")},21764:e=>{e.exports=require("util")},41520:e=>{e.exports=require("vm")},72254:e=>{e.exports=require("node:buffer")},17718:e=>{e.exports=require("node:child_process")},15673:e=>{e.exports=require("node:events")},87561:e=>{e.exports=require("node:fs")},70612:e=>{e.exports=require("node:os")},49411:e=>{e.exports=require("node:path")},97742:e=>{e.exports=require("node:process")},84492:e=>{e.exports=require("node:stream")},76402:e=>{e.exports=require("node:stream/promises")},76915:e=>{e.exports=require("node:string_decoder")},99397:e=>{e.exports=require("node:timers/promises")},25997:e=>{e.exports=require("node:tty")},41041:e=>{e.exports=require("node:url")},47261:e=>{e.exports=require("node:util")},83858:e=>{e.exports=require("node:v8")},62019:(e,r,s)=>{s.r(r),s.d(r,{originalPathname:()=>x,patchFetch:()=>g,requestAsyncStorage:()=>d,routeModule:()=>c,serverHooks:()=>m,staticGenerationAsyncStorage:()=>l});var t={};s.r(t),s.d(t,{POST:()=>p});var o=s(49303),i=s(88716),n=s(60670),a=s(87070),u=s(73185);async function p(e){try{let r;try{r=await e.json()}catch(e){return console.error("[Transcript API] JSON parse error:",e),a.NextResponse.json({success:!1,error:"Invalid request format",message:"Request body must be valid JSON"},{status:400})}let{videoId:t,language:o="pl"}=r;if(!t)return console.warn("[Transcript API] Missing videoId in request"),a.NextResponse.json({success:!1,error:"Missing parameter",message:"Video ID is required"},{status:400});if("string"!=typeof t)return console.warn("[Transcript API] Invalid videoId type:",typeof t),a.NextResponse.json({success:!1,error:"Invalid parameter type",message:"Video ID must be a string"},{status:400});if(!(0,u.cc)(t))return console.warn("[Transcript API] Invalid YouTube ID format:",t),a.NextResponse.json({success:!1,error:"Invalid YouTube ID",message:"The provided ID is not a valid YouTube video ID"},{status:400});console.log(`[Transcript API] Fetching transcript for video ${t} in language ${o}`);try{let{getVideoSubtitles:e}=await Promise.resolve().then(s.bind(s,48299)),r=await e(t,[o]);if(!r)return console.warn(`[Transcript API] No transcript found for video ${t}`),a.NextResponse.json({success:!1,error:"No transcript available",message:"This YouTube video does not have an available transcript or captions."},{status:404});return console.log(`[Transcript API] Successfully retrieved transcript (${r.length} characters) in ${o} language`),a.NextResponse.json({success:!0,transcript:r,language:o,itemCount:r.length})}catch(e){if(console.error(`[Transcript API] Error fetching transcript for ${t}:`,e),e.message?.includes("ERR_INVALID_URL")||e.message?.includes("Invalid video id"))return a.NextResponse.json({success:!1,error:"Invalid video ID",message:"The provided YouTube video ID is invalid or malformed.",details:e.message},{status:400});if(e.message?.includes("No transcript available")||e.message?.includes("Could not find any captions"))return a.NextResponse.json({success:!1,error:"No transcript available",message:"This YouTube video does not have an available transcript or captions.",details:e.message},{status:404});if(e.message?.includes("Status code: 403"))return a.NextResponse.json({success:!1,error:"Access forbidden",message:"Access to this video or its captions is restricted.",details:e.message},{status:403});if(e.message?.includes("yt-dlp is required"))return a.NextResponse.json({success:!1,error:"yt-dlp_required",message:"This system requires yt-dlp to extract YouTube subtitles. Please install yt-dlp:\n• macOS: brew install yt-dlp\n• Linux/macOS: pip install yt-dlp\n• Windows: pip install yt-dlp or choco install yt-dlp"},{status:422});return a.NextResponse.json({success:!1,error:"Transcript retrieval failed",message:"Failed to fetch transcript from YouTube.",details:e.message},{status:500})}}catch(e){return console.error("[Transcript API] Unexpected error:",e),a.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while processing the transcript request.",details:e.message},{status:500})}}let c=new o.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/transcript/route",pathname:"/api/transcript",filename:"route",bundlePath:"app/api/transcript/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/transcript/route.ts",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:d,staticGenerationAsyncStorage:l,serverHooks:m}=c,x="/api/transcript/route";function g(){return(0,n.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:l})}}};var r=require("../../../webpack-runtime.js");r.C(e);var s=e=>r(r.s=e),t=r.X(0,[9276,5972,4769,5074,5288,2086],()=>s(62019));module.exports=t})();