/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/upload-video/route";
exports.ids = ["app/api/upload-video/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options sync recursive":
/*!******************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/ sync ***!
  \******************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/fluent-ffmpeg/lib/options sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload-video%2Froute&page=%2Fapi%2Fupload-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload-video%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload-video%2Froute&page=%2Fapi%2Fupload-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload-video%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_janjedrach_Cursor_eduscribe_src_app_api_upload_video_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/upload-video/route.ts */ \"(rsc)/./src/app/api/upload-video/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/upload-video/route\",\n        pathname: \"/api/upload-video\",\n        filename: \"route\",\n        bundlePath: \"app/api/upload-video/route\"\n    },\n    resolvedPagePath: \"/Users/janjedrach/Cursor/eduscribe/src/app/api/upload-video/route.ts\",\n    nextConfigOutput,\n    userland: _Users_janjedrach_Cursor_eduscribe_src_app_api_upload_video_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/upload-video/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ1cGxvYWQtdmlkZW8lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnVwbG9hZC12aWRlbyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnVwbG9hZC12aWRlbyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmphbmplZHJhY2glMkZDdXJzb3IlMkZlZHVzY3JpYmUlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9anMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz1tZHgmcm9vdERpcj0lMkZVc2VycyUyRmphbmplZHJhY2glMkZDdXJzb3IlMkZlZHVzY3JpYmUmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2VkdXNjcmliZS8/OTA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvamFuamVkcmFjaC9DdXJzb3IvZWR1c2NyaWJlL3NyYy9hcHAvYXBpL3VwbG9hZC12aWRlby9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3VwbG9hZC12aWRlby9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VwbG9hZC12aWRlb1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdXBsb2FkLXZpZGVvL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2phbmplZHJhY2gvQ3Vyc29yL2VkdXNjcmliZS9zcmMvYXBwL2FwaS91cGxvYWQtdmlkZW8vcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZC12aWRlby9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload-video%2Froute&page=%2Fapi%2Fupload-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload-video%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/upload-video/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/upload-video/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _services_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/ai */ \"(rsc)/./src/services/ai.ts\");\n/* harmony import */ var _services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/videoTranscription */ \"(rsc)/./src/services/videoTranscription.ts\");\n/* harmony import */ var _services_subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/subscription */ \"(rsc)/./src/services/subscription.ts\");\n/* harmony import */ var _services_queue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/queue */ \"(rsc)/./src/services/queue.ts\");\n/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fs-extra */ \"(rsc)/./node_modules/fs-extra/lib/index.js\");\n/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(fs_extra__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n// Initialize Supabase client\nconst supabaseUrl = \"https://xhljckmlzdshxibnqsbj.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA\";\n/**\n * Get user's subscription plan for queue priority\n */ async function getSubscriptionPlan(userId) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_6__.createClient)(supabaseUrl, supabaseAnonKey);\n        const { data } = await supabase.from(\"user_subscriptions\").select(\"plan_id\").eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        const planId = data?.plan_id;\n        // Ensure we return a valid plan type\n        if (planId === \"student\" || planId === \"pro\") {\n            return {\n                planId\n            };\n        }\n        return {\n            planId: \"free\"\n        };\n    } catch (error) {\n        console.warn(\"[Upload Video API] Could not fetch subscription:\", error);\n        return {\n            planId: \"free\"\n        };\n    }\n}\n/**\n * Video Upload API Endpoint - Independent System\n * \n * Processes uploaded video files to:\n * 1. Validate and store the video file\n * 2. Extract audio and transcribe using Whisper\n * 3. Generate AI notes from transcript\n * 4. Store in isolated video_upload_notes table\n */ async function POST(request) {\n    console.log(\"[Upload Video API] Request received: POST\");\n    let tempDir = null;\n    let videoFilePath = null;\n    try {\n        // STEP 1: Authenticate the request\n        console.log(\"[Upload Video API] Authenticating request\");\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            console.error(\"[Upload Video API] Authentication missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\",\n                message: \"Valid Bearer token is required\"\n            }, {\n                status: 401\n            });\n        }\n        // Initialize Supabase client with the token\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_6__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        // Verify the user's token and set the session\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            console.error(\"[Upload Video API] Authentication failed:\", authError?.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\",\n                message: authError?.message || \"Invalid authentication token\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(`[Upload Video API] User authenticated: ${user.id}`);\n        // STEP 1.5: Check usage limits BEFORE processing\n        console.log(\"[Upload Video API] Checking usage limits\");\n        const usageCheck = await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.checkUsageLimits)(user.id, token, \"video\");\n        if (!usageCheck.canGenerate) {\n            console.log(`[Upload Video API] Generation limit reached: ${usageCheck.reason}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Generation limit reached\",\n                message: usageCheck.reason || \"You have reached your monthly note generation limit\",\n                usage: usageCheck.usage,\n                limits: usageCheck.limits\n            }, {\n                status: 429\n            }); // 429 = Too Many Requests\n        }\n        if (!usageCheck.canSave) {\n            console.log(`[Upload Video API] Storage limit reached: ${usageCheck.reason}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Storage limit reached\",\n                message: usageCheck.reason || \"You have reached your saved notes limit\",\n                usage: usageCheck.usage,\n                limits: usageCheck.limits\n            }, {\n                status: 429\n            });\n        }\n        console.log(`[Upload Video API] Usage check passed - can generate: ${usageCheck.canGenerate}, can save: ${usageCheck.canSave}`);\n        // Get user's subscription for priority\n        const subscription = await getSubscriptionPlan(user.id);\n        // Wrap the processing in queue\n        const result = await (0,_services_queue__WEBPACK_IMPORTED_MODULE_4__.queueRequest)(user.id, subscription.planId, \"video-upload\", async ()=>{\n            // STEP 2: Parse the multipart form data\n            const formData = await request.formData();\n            const file = formData.get(\"file\");\n            const customTitle = formData.get(\"title\");\n            if (!file) {\n                console.error(\"[Upload Video API] No file provided\");\n                return {\n                    success: false,\n                    error: \"Missing file\",\n                    message: \"Please provide a video file to upload\"\n                };\n            }\n            console.log(`[Upload Video API] File received: ${file.name} (${file.size} bytes, ${file.type})`);\n            // STEP 3: Validate file type and size\n            const allowedTypes = [\n                \"video/mp4\",\n                \"video/mov\",\n                \"video/quicktime\",\n                \"video/webm\",\n                \"video/avi\",\n                \"video/mkv\"\n            ];\n            if (!allowedTypes.includes(file.type)) {\n                console.error(`[Upload Video API] Unsupported file type: ${file.type}`);\n                return {\n                    success: false,\n                    error: \"Unsupported file type\",\n                    message: \"Please upload a video file (.mp4, .mov, .webm, .avi, .mkv)\"\n                };\n            }\n            // Check file size (limit to 200MB)\n            const MAX_FILE_SIZE = 200 * 1024 * 1024; // 200MB\n            if (file.size > MAX_FILE_SIZE) {\n                console.error(`[Upload Video API] File too large: ${file.size} bytes`);\n                return {\n                    success: false,\n                    error: \"File too large\",\n                    message: \"Video file must be smaller than 200MB\"\n                };\n            }\n            console.log(`[Upload Video API] File validated successfully`);\n            // STEP 4: Create temporary directory and save file\n            tempDir = await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.createTempDirectory)();\n            const fileName = `video_${Date.now()}_${file.name}`;\n            videoFilePath = path__WEBPACK_IMPORTED_MODULE_5___default().join(tempDir, fileName);\n            console.log(`[Upload Video API] Saving file to: ${videoFilePath}`);\n            // Convert File to Buffer and save\n            const fileBuffer = Buffer.from(await file.arrayBuffer());\n            await fs_extra__WEBPACK_IMPORTED_MODULE_7___default().writeFile(videoFilePath, fileBuffer);\n            console.log(`[Upload Video API] File saved successfully`);\n            // STEP 5: Validate video file format using FFmpeg\n            console.log(\"[Upload Video API] Validating video format...\");\n            console.log(`[Upload Video API] File details: name=${file.name}, size=${file.size}, type=${file.type}`);\n            console.log(`[Upload Video API] Temp file path: ${videoFilePath}`);\n            try {\n                const isValidVideo = await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.validateVideoFile)(videoFilePath, file.name);\n                console.log(`[Upload Video API] Video validation result: ${isValidVideo}`);\n                if (!isValidVideo) {\n                    console.error(\"[Upload Video API] Video validation failed\");\n                    console.error(`[Upload Video API] File: ${file.name} (${file.type}) - ${file.size} bytes`);\n                    // Try to get more information about why validation failed\n                    try {\n                        const fileExists = await fs_extra__WEBPACK_IMPORTED_MODULE_7___default().pathExists(videoFilePath);\n                        console.log(`[Upload Video API] File exists at temp path: ${fileExists}`);\n                        if (fileExists) {\n                            const stats = await fs_extra__WEBPACK_IMPORTED_MODULE_7___default().stat(videoFilePath);\n                            console.log(`[Upload Video API] Temp file size: ${stats.size} bytes`);\n                        }\n                    } catch (debugError) {\n                        console.error(\"[Upload Video API] Debug error:\", debugError);\n                    }\n                    return {\n                        success: false,\n                        error: \"Invalid video\",\n                        message: \"The uploaded file is not a valid video or does not contain audio. Please ensure you upload a valid video file with audio content.\"\n                    };\n                }\n            } catch (validationError) {\n                console.error(\"[Upload Video API] Video validation threw error:\", validationError);\n                return {\n                    success: false,\n                    error: \"Validation failed\",\n                    message: \"Failed to validate video file. Please try uploading again.\"\n                };\n            }\n            // STEP 6: Get video information\n            console.log(\"[Upload Video API] Analyzing video...\");\n            let videoInfo;\n            try {\n                videoInfo = await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.getVideoInfo)(videoFilePath);\n                console.log(`[Upload Video API] Video info: ${JSON.stringify(videoInfo)}`);\n            } catch (error) {\n                console.error(\"[Upload Video API] Failed to analyze video:\", error);\n                videoInfo = {\n                    duration: 0,\n                    format: \"unknown\",\n                    size: file.size\n                };\n            }\n            // STEP 7: Transcribe video using Whisper\n            console.log(\"[Upload Video API] Starting video transcription...\");\n            const transcriptionResult = await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.transcribeVideoFile)(videoFilePath, tempDir, (progress)=>{\n                console.log(`[Upload Video API] Transcription progress: ${progress.step} - ${progress.progress}% - ${progress.message}`);\n            // In a real application, you might want to emit this progress via WebSocket or Server-Sent Events\n            });\n            if (transcriptionResult.error || !transcriptionResult.transcript) {\n                console.error(\"[Upload Video API] Transcription failed:\", transcriptionResult.error);\n                return {\n                    success: false,\n                    error: \"Transcription failed\",\n                    message: transcriptionResult.error || \"Failed to transcribe video audio\"\n                };\n            }\n            console.log(`[Upload Video API] Transcription completed: ${transcriptionResult.transcript.length} characters`);\n            // STEP 8: Generate notes using AI\n            console.log(\"[Upload Video API] Generating notes from transcript\");\n            let notesResult;\n            try {\n                notesResult = await (0,_services_ai__WEBPACK_IMPORTED_MODULE_1__.generateNotes)({\n                    transcript: transcriptionResult.transcript,\n                    videoTitle: customTitle || file.name\n                });\n                if (!notesResult.content) {\n                    console.error(\"[Upload Video API] AI note generation failed:\", notesResult.error);\n                    return {\n                        success: false,\n                        error: \"Note generation failed\",\n                        message: notesResult.error || \"Failed to generate notes from the transcript\"\n                    };\n                }\n                console.log(`[Upload Video API] Successfully generated notes (${notesResult.content.length} chars)`);\n            } catch (aiError) {\n                console.error(\"[Upload Video API] Error during AI note generation:\", aiError);\n                return {\n                    success: false,\n                    error: \"AI processing failed\",\n                    message: aiError.message || \"An error occurred while generating notes with AI\"\n                };\n            }\n            // STEP 9: Create the note record for video_upload_notes table\n            const noteId = `video_upload_${Date.now()}`;\n            const noteData = {\n                id: noteId,\n                user_id: user.id,\n                title: customTitle || `Video Notes - ${file.name}`,\n                file_name: file.name,\n                file_size: file.size,\n                duration: videoInfo.duration || 0,\n                transcript: transcriptionResult.transcript,\n                content: notesResult.content,\n                summary: notesResult.summary,\n                quiz: notesResult.quiz,\n                language: transcriptionResult.language || \"auto-detected\"\n            };\n            console.log(`[Upload Video API] Created note with ID: ${noteId}`);\n            console.log(\"[Upload Video API] Note data structure:\", Object.keys(noteData).join(\", \"));\n            // STEP 10: Store the note in Supabase video_upload_notes table\n            console.log(\"[Upload Video API] Storing note in Supabase\");\n            try {\n                // First attempt to insert the data\n                let { data, error } = await supabase.from(\"video_upload_notes\").insert(noteData).select().single();\n                if (error) {\n                    console.error(\"[Upload Video API] Database storage error:\", JSON.stringify(error, null, 2));\n                    // Handle specific database errors\n                    if (error.code === \"42P01\" || error.message?.includes(\"relation\") || error.message?.includes(\"does not exist\")) {\n                        // Table doesn't exist - we can't create it with RPC, so let's just return a more helpful error\n                        console.error(\"[Upload Video API] Table video_upload_notes does not exist\");\n                        return {\n                            success: false,\n                            error: \"Database setup required\",\n                            message: \"The video notes database table needs to be set up. Please contact support.\",\n                            details: {\n                                code: error.code,\n                                message: error.message,\n                                hint: \"Table video_upload_notes does not exist\"\n                            }\n                        };\n                    }\n                    // Handle other database errors\n                    if (error.code === \"23505\") {\n                        // Duplicate key - try with a new ID\n                        const newNoteId = `video_upload_${Date.now()}_retry`;\n                        const retryNoteData = {\n                            ...noteData,\n                            id: newNoteId\n                        };\n                        console.log(\"[Upload Video API] Duplicate ID detected, retrying with new ID:\", newNoteId);\n                        const { data: retryData, error: retryError } = await supabase.from(\"video_upload_notes\").insert(retryNoteData).select().single();\n                        if (retryError) {\n                            console.error(\"[Upload Video API] Retry insert failed:\", JSON.stringify(retryError, null, 2));\n                            return {\n                                success: false,\n                                error: \"Database error\",\n                                message: \"Failed to store the notes in the database after retry\",\n                                details: {\n                                    code: retryError.code,\n                                    message: retryError.message\n                                }\n                            };\n                        }\n                        data = retryData;\n                    } else {\n                        // Other errors\n                        console.error(\"[Upload Video API] Unhandled database error:\", JSON.stringify(error, null, 2));\n                        return {\n                            success: false,\n                            error: \"Database error\",\n                            message: \"Failed to store the notes in the database\",\n                            details: {\n                                code: error.code,\n                                message: error.message,\n                                hint: error.hint\n                            }\n                        };\n                    }\n                }\n                if (!data) {\n                    console.error(\"[Upload Video API] No data returned from insert operation\");\n                    return {\n                        success: false,\n                        error: \"Database error\",\n                        message: \"No data returned from database insert operation\"\n                    };\n                }\n                console.log(`[Upload Video API] Successfully stored note: ${data.id}`);\n                // STEP 11: Increment usage counters\n                try {\n                    await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.incrementUsage)(user.id, token, \"video\");\n                    console.log(\"[Upload Video API] Usage incremented successfully\");\n                } catch (usageError) {\n                    console.warn(\"[Upload Video API] Failed to increment usage:\", usageError);\n                // Don't fail the request for usage tracking errors\n                }\n                // STEP 11.5: Refresh saved notes count\n                console.log(\"[Upload Video API] Refreshing saved notes count\");\n                try {\n                    await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.refreshSavedNotesCount)(user.id, token);\n                    console.log(\"[Upload Video API] Saved notes count refreshed\");\n                } catch (countError) {\n                    console.error(\"[Upload Video API] Saved notes count refresh failed (note still created):\", countError);\n                // Don't fail the request if count refresh fails\n                }\n                // STEP 12: Cleanup temporary files\n                if (tempDir) {\n                    await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.cleanupTempDirectory)(tempDir);\n                }\n                console.log(\"[Upload Video API] Video processing completed successfully\");\n                return {\n                    success: true,\n                    message: \"Video processed and notes generated successfully\",\n                    data: {\n                        id: data.id,\n                        title: data.title,\n                        content: data.content,\n                        summary: data.summary,\n                        quiz: data.quiz,\n                        transcript: data.transcript,\n                        duration: data.duration,\n                        language: data.language,\n                        created_at: data.created_at\n                    }\n                };\n            } catch (dbError) {\n                console.error(\"[Upload Video API] Database operation failed:\", JSON.stringify(dbError, null, 2));\n                return {\n                    success: false,\n                    error: \"Database error\",\n                    message: \"Failed to store the notes in the database\",\n                    details: {\n                        message: dbError.message,\n                        code: dbError.code,\n                        name: dbError.name\n                    }\n                };\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"[Upload Video API] Unexpected error:\", error);\n        // Cleanup on error\n        if (tempDir) {\n            await (0,_services_videoTranscription__WEBPACK_IMPORTED_MODULE_2__.cleanupTempDirectory)(tempDir);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: error.message || \"An unexpected error occurred while processing the video\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * GET endpoint to retrieve user's uploaded video notes\n */ async function GET(request) {\n    console.log(\"[Upload Video API] Request received: GET\");\n    try {\n        // Authenticate the request\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_6__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\"\n            }, {\n                status: 401\n            });\n        }\n        // Fetch user's video upload notes\n        const { data: notes, error } = await supabase.from(\"video_upload_notes\").select(\"id, title, file_name, duration, content, summary, quiz, language, created_at\").eq(\"user_id\", user.id).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"[Upload Video API] Error fetching notes:\", error);\n            if (error.code === \"42P01\") {\n                // Table doesn't exist yet\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    data: [],\n                    message: \"No video upload notes found\"\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Database error\",\n                message: \"Failed to fetch video upload notes\"\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: notes || [],\n            count: notes?.length || 0\n        });\n    } catch (error) {\n        console.error(\"[Upload Video API] GET error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: error.message || \"Failed to fetch video upload notes\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * DELETE endpoint to delete a specific video upload note\n */ async function DELETE(request) {\n    console.log(\"[Upload Video API] Request received: DELETE\");\n    try {\n        // Authenticate the request\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_6__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\"\n            }, {\n                status: 401\n            });\n        }\n        // Get the note ID from query parameters\n        const noteId = request.nextUrl.searchParams.get(\"id\");\n        if (!noteId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Missing note ID\",\n                message: \"Note ID is required for deletion\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`[Upload Video API] Deleting note with ID: ${noteId}`);\n        // Delete the note (with user ownership check)\n        const { data, error } = await supabase.from(\"video_upload_notes\").delete().eq(\"id\", noteId).eq(\"user_id\", user.id) // Ensure user can only delete their own notes\n        .select();\n        if (error) {\n            console.error(\"[Upload Video API] Database delete error:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Database error\",\n                message: \"Failed to delete the note from the database\",\n                details: {\n                    code: error.code,\n                    message: error.message\n                }\n            }, {\n                status: 500\n            });\n        }\n        // Check if any rows were affected\n        if (!data || data.length === 0) {\n            console.error(`[Upload Video API] Note not found or access denied: ${noteId}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Note not found\",\n                message: \"The note was not found or you do not have permission to delete it\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(`[Upload Video API] Successfully deleted note: ${noteId}`);\n        // Refresh saved notes count after deletion\n        try {\n            await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.refreshSavedNotesCount)(user.id, token);\n            console.log(\"[Upload Video API] Saved notes count refreshed after deletion\");\n        } catch (countError) {\n            console.error(\"[Upload Video API] Saved notes count refresh failed after deletion:\", countError);\n        // Don't fail the request if count refresh fails\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Note deleted successfully\",\n            data: data[0]\n        });\n    } catch (error) {\n        console.error(\"[Upload Video API] DELETE error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: error.message || \"Failed to delete video upload note\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/upload-video/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai.ts":
/*!****************************!*\
  !*** ./src/services/ai.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateNotes: () => (/* binding */ generateNotes)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/splitTranscript */ \"(rsc)/./src/utils/splitTranscript.ts\");\n\n\n// Validate API key presence\nconst openaiApiKey = process.env.OPENAI_API_KEY;\nif (!openaiApiKey) {\n    console.error(\"[OpenAI] API key is missing from environment variables!\");\n}\n// Initialize OpenAI client with error handling\nlet openai = null;\ntry {\n    openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        apiKey: openaiApiKey\n    });\n} catch (error) {\n    console.error(\"[OpenAI] Failed to initialize client:\", error);\n}\nconst MAX_RETRIES = 2;\nconst RETRY_DELAY = 1000; // 1 second\n/**\n * Delays execution for specified milliseconds\n */ const delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n/**\n * Processes a single chunk of transcript using OpenAI with retries\n */ async function processChunkWithRetry(chunk, retryCount = 0) {\n    try {\n        // Validate OpenAI client initialization\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        // Validate chunk size\n        if (!(0,_utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__.isChunkWithinTokenLimit)(chunk)) {\n            throw new Error(\"Chunk exceeds token limit\");\n        }\n        console.log(`[OpenAI] Processing chunk ${chunk.index} (${chunk.content.length} chars)`);\n        const startTime = Date.now();\n        // Add timeout to prevent long-running requests\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Request timeout\")), 60000); // 60 second timeout\n        });\n        // Enhanced educational prompt for structured notes with deep semantic content\n        const completionPromise = openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational content creator, researcher, and teacher with deep knowledge across multiple domains. Create comprehensive, high-quality study notes with exceptional educational value and semantic depth.\n\nCRITICAL REQUIREMENTS:\n- Write in Polish\n- DO NOT include the original source text or transcript\n- Create ONLY summarized, structured educational notes with deep explanations\n- Use clear markdown formatting with proper headings\n- Structure like professional university-level study materials\n- Focus on DEEP SEMANTIC UNDERSTANDING and practical applications\n- ABSOLUTELY NO TABLES OF ANY KIND - NEVER USE | symbols or table syntax\n- AVOID REPETITIVE CONTENT - each concept should be explained once thoroughly\n- Provide CONCRETE TECHNIQUES, METHODS, and DETAILED EXPLANATIONS instead of generic statements\n\n❌ FORBIDDEN CONTENT PATTERNS:\n- Vague statements like \"istnieją metody\" without listing them\n- Repetitive explanations of the same concept across sections\n- Superficial overviews without depth\n- Generic advice without specific techniques\n- Any table format (| symbols, markdown tables, HTML tables)\n- \"Notatki:\" prefixes in titles\n\n✅ REQUIRED DEPTH AND QUALITY:\n- When mentioning techniques, LIST AND EXPLAIN them in detail\n- Provide step-by-step processes where applicable\n- Include specific examples, formulas, or procedures\n- Explain WHY concepts work, not just WHAT they are\n- Connect concepts to real-world applications\n- Give concrete, actionable information\n\nFORMATTING GUIDELINES - PROFESSIONAL & READABLE:\n- Start with a clear title using ## WITHOUT \"Notatki:\" prefix (e.g., ## 🧠 Techniki Efektywnego Uczenia)\n- Add one-sentence topic description right after title\n- Include \"📚 Przegląd Materiału\" section at top (5-6 bullet points max covering main concepts)\n- Use #### for main sections with emojis and numbering (e.g., #### 1. 🎯 Technika Pomodoro)\n- Use ##### for subsections when needed\n- Use moderate spacing between sections\n\nCONTENT STRUCTURE REQUIREMENTS:\n- REPLACE ALL TABLES with detailed bullet lists using \"Feature: Explanation\" format\n- Use **bold** sparingly for only the most important terms\n- Highlight key definitions with 🔑 icon: \"🔑 **Definicja:** *Term* - comprehensive explanation with context...\"\n- Highlight important concepts with 🎯 icon: \"🎯 **Kluczowy mechanizm:** detailed explanation of how it works...\"\n- For techniques, use step-by-step format:\n  **Implementacja techniki:**\n  1. **Krok 1**: szczegółowy opis działania\n  2. **Krok 2**: konkretne instrukcje\n  3. **Krok 3**: praktyczne wskazówki\n- Add section numbering (1., 2., 3.) for main topics\n- NEVER repeat the same definitions or explanations across sections\n\nEDUCATIONAL DEPTH REQUIREMENTS:\nWhen discussing any topic, you MUST:\n1. **Define precisely** - not just \"what is X\" but \"what is X, how does it work, and why is it important\"\n2. **List specific methods** - if mentioning \"techniques\" or \"methods\", always provide concrete examples:\n   - Instead of: \"istnieją techniki zapamiętywania\"\n   - Write: \"techniki zapamiętywania obejmują: Metodę Pałacu Pamięci (wizualizacja przestrzenna), System Powtórek Rozłożonych w Czasie (algorytm SM-2), Aktywne Przypominanie (retrieval practice), oraz Technikę Feynmana (wyjaśnianie prostymi słowami)\"\n3. **Explain mechanisms** - describe HOW and WHY things work\n4. **Provide procedures** - give step-by-step instructions for practical applications\n5. **Include real examples** - concrete scenarios, calculations, or implementations\n\nALTERNATIVE COMPARISON FORMATS (instead of tables):\n1. **Detailed Comparison Lists**:\n   **Różnice między metodą A i B:**\n   - **Efektywność**: Metoda A osiąga 85% skuteczność w badaniach kontrolowanych, podczas gdy metoda B pokazuje 72% skuteczność\n   - **Implementacja**: A wymaga 15-20 minut przygotowania, B można zastosować natychmiast\n   - **Zastosowanie**: A działa najlepiej przy materiale faktograficznym, B przy koncepcjach abstrakcyjnych\n   \n2. **Sequential Detailed Descriptions**:\n   **Metoda A - Szczegółowy Opis:**\n   - **Procedura**: Dokładne kroki 1-5 z czasem wykonania\n   - **Mechanizm działania**: Neurologiczne podstawy skuteczności\n   - **Optymalizacja**: Konkretne wskazówki dostosowania do różnych typów treści\n\nREQUIRED SECTIONS:\n1. **Title with emoji but NO \"Notatki:\" prefix** (just the topic name)\n2. **📚 Przegląd Materiału** (5-6 comprehensive overview points)\n3. **Numbered main sections** with deep content (aim for 3-4 major sections)\n4. **Detailed subsections** with specific techniques, methods, formulas\n5. **Section summaries after each major section** (paragraph style recap)\n6. **🎯 Szybkie Streszczenie** (3-6 lines max at very end) - NOT \"TL;DR\"\n\nSECTION SUMMARIES (ESSENTIAL):\nAfter each major section (####), add a substantive summary:\n> **Podsumowanie sekcji:** [4-6 sentence detailed explanation connecting all concepts from the section, explaining practical implications and how the techniques integrate with broader understanding]\n\nSEMANTIC DEPTH EXAMPLES:\n❌ AVOID: \"Technika Pomodoro jest metodą zarządzania czasem\"\n✅ PROVIDE: \"Technika Pomodoro jest metodą zarządzania czasem opartą na badaniach neuronaukowych dotyczących cykli uwagi. Polega na podziale pracy na 25-minutowe bloki (pomodoros) z 5-minutowymi przerwami, wykorzystując naturalny rytm uwagi mózgu i zapobiegając zmęczeniu poznawczemu poprzez aktywną regenerację prefrontalnej kory mózgowej.\"\n\n❌ AVOID: \"Istnieją różne metody uczenia\"\n✅ PROVIDE: \"Główne metody uczenia oparte na dowodach naukowych to: 1) Aktywne Przypominanie (retrieval practice) - aktywne odtwarzanie informacji z pamięci, co wzmacnia ścieżki neuronalne; 2) Powtórki Rozłożone (spaced repetition) - algorytmiczne planowanie powtórek w optymalnych odstępach czasu; 3) Naprzemienne Uczenie (interleaving) - mieszanie różnych typów zadań dla lepszej dyskryminacji pojęć; 4) Elaborative Interrogation - zadawanie pytań 'dlaczego' i 'jak' dla głębszego zrozumienia mechanizmów.\"\n\nVISUAL ENHANCEMENTS - BALANCED APPROACH:\n- Use emojis strategically for sections and key concepts\n- Format definitions as: \"🔑 **Definicja:** *Term* - comprehensive explanation with scientific background\"\n- Format key mechanisms as: \"🎯 **Kluczowy mechanizm:** detailed explanation of how and why it works\"\n- Use \"📋 *Procedura:*\" for step-by-step instructions\n- Use \"🧪 *Przykład:*\" for concrete examples with specific details\n- Use \"⚡ *Optymalizacja:*\" for advanced tips and customization\n- NEVER use any table format\n- Use moderate spacing and balanced formatting\n\nEXAMPLE STRUCTURE:\n## 🧠 Techniki Efektywnego Uczenia\nZaawansowane metody optymalizacji procesów poznawczych oparte na najnowszych badaniach neuronaukowych i psychologii kognitywnej.\n\n### 📚 Przegląd Materiału\n- Aktywne Przypominanie jako najskuteczniejsza metoda wzmacniania pamięci długotrwałej\n- System Powtórek Rozłożonych w Czasie z algorytmem SM-2 dla optymalnego planowania\n- Technika Pomodoro wykorzystująca naturalne cykle uwagi i regeneracji neuronowej\n- Metoda Feynmana dla głębokiego zrozumienia przez aktywne wyjaśnianie\n- Interleaving jako strategia poprawy dyskryminacji pojęciowej\n- Neuroplastyczność i jej praktyczne zastosowania w procesie uczenia\n\n#### 1. 🎯 Aktywne Przypominanie (Retrieval Practice)\n\n🔑 **Definicja:** *Aktywne Przypominanie* - metoda uczenia polegająca na aktywnym odtwarzaniu informacji z pamięci bez pomocy materiałów źródłowych, która według badań Hermann Ebbinghausa i współczesnych neuronaukowców zwiększa siłę połączeń synaptycznych o 300-400% w porównaniu do biernego powtarzania.\n\n**Mechanizm neurologiczny:**\n- **Wzmocnienie ścieżek neuronowych**: Każde aktywne przypomnienie aktywuje te same ścieżki neuronowe co pierwotne uczenie\n- **Konsolidacja pamięci**: Proces ten przenosi informacje z hipokampa do kory mózgowej dla długotrwałego przechowywania\n- **Efekt testowania**: Próba przypomnienia, nawet nieudana, wzmacnia pamięć lepiej niż wielokrotne czytanie\n\n📋 *Procedura implementacji:*\n1. **Przygotowanie materiału** (5 min): Podziel treść na logiczne sekcje po 200-300 słów\n2. **Pierwsza lektura** (15-20 min): Przeczytaj uważnie z pełnym skupieniem\n3. **Zamknięcie materiału** (0 min): Całkowicie usuń dostęp do notatek\n4. **Aktywne odtworzenie** (10-15 min): Napisz lub wypowiedz wszystko co pamiętasz\n5. **Weryfikacja i uzupełnienie** (5-10 min): Porównaj z oryginałem i uzupełnij luki\n6. **Powtórka po 24h**: Wykonaj ponownie kroki 3-5 bez ponownej lektury\n\n🧪 *Przykład praktyczny:*\nPrzy nauce biochemii: zamiast wielokrotnego czytania o cyklu Krebsa, narysuj pełny schemat z pamięci z nazwami wszystkich 8 etapów, enzymów i produktów. Sprawdź dokładność i uzupełnij błędy. Powtórz za tydzień.\n\n> **Podsumowanie sekcji:** Aktywne Przypominanie wykorzystuje fundamentalne właściwości neuroplastyczności mózgu, gdzie każda próba odtworzenia z pamięci wzmacnia połączenia synaptyczne. Technika ta jest szczególnie skuteczna przy materiałach faktograficznych i procedurach, gdzie kluczowe jest precyzyjne zapamiętanie sekwencji lub definicji. Regularne stosowanie tej metody prowadzi do trwałej reorganizacji sieci neuronowych, co przekłada się na znacznie lepsze wyniki w testach długoterminowych niż tradycyjne metody powtarzania.\n\n#### 2. ⏰ System Powtórek Rozłożonych (Spaced Repetition)\n\n🔑 **Definicja:** *System Powtórek Rozłożonych* - algorytmiczny system planowania powtórek oparty na krzywej zapominania Ebbinghausa, który optymalizuje interwały między powtórkami tak, aby maksymalizować retencję przy minimalnym nakładzie czasowym.\n\n**Algorytm SM-2 (SuperMemo):**\n- **Interwał 1**: 1 dzień\n- **Interwał 2**: 6 dni  \n- **Interwał n+1**: Interwał n × Współczynnik Łatwości (EF)\n- **Współczynnik Łatwości**: 1.3-2.5 w zależności od trudności (automatycznie dostosowywany)\n\n📋 *Procedura implementacji cyfrowej:*\n1. **Wybór narzędzia**: Anki, SuperMemo, lub Quizlet z funkcją SR\n2. **Tworzenie kart**: Jedna informacja na kartę (atomic principle)\n3. **Format pytanie-odpowiedź**: Konkretne, jednoznaczne sformułowania\n4. **Codzienna sesja**: 15-30 minut o stałej porze\n5. **Ocena trudności**: Szczerze oceń łatwość przypomnienia (1-5)\n6. **Konsystencja**: Minimum 80% dni w miesiącu dla efektywności\n\n⚡ *Optymalizacja zaawansowana:*\n- **Cloze deletion**: Uzupełnianie luk w kontekście (lepsze niż proste Q&A)\n- **Image occlusion**: Zakrywanie części diagramów/map\n- **Reverse cards**: Dwukierunkowe karty dla związków przyczynowo-skutkowych\n\n> **Podsumowanie sekcji:** System Powtórek Rozłożonych wykorzystuje matematyczną precyzję algorytmu SM-2 do optymalizacji naturalnego procesu zapominania. Kluczem sukcesu jest konsystentność i właściwe dostosowanie współczynników trudności do indywidualnych możliwości kognitywnych. System ten jest szczególnie skuteczny przy nauce języków obcych, terminologii medycznej i innych materiałach wymagających długotrwałej retencji faktów.\n\n### 🎯 Szybkie Streszczenie\n- **Aktywne Przypominanie**: Odtwarzanie z pamięci wzmacnia ścieżki neuronowe 3-4x skuteczniej niż czytanie\n- **Powtórki Rozłożone**: Algorytm SM-2 optymalizuje interwały dla maksymalnej retencji przy minimalnym czasie\n- **Implementacja**: Codzienne 15-30 min sesji z konsekwentną oceną trudności materiału\n- **Efektywność**: Kombinacja obu metod może zwiększyć długoterminową retencję o 200-400%\n\nREMEMBER: \n- NO \"Notatki:\" prefixes in titles\n- NO \"TL;DR\" - use \"Szybkie Streszczenie\" instead\n- Absolutely no tables whatsoever \n- DEEP SEMANTIC CONTENT with specific techniques and detailed explanations\n- AVOID REPETITIVE CONTENT across sections\n- Always provide concrete methods, procedures, and examples\n- Focus on educational value and practical applications\n\n${chunk.content}`\n                },\n                {\n                    role: \"user\",\n                    content: `Na podstawie poniższej treści utwórz profesjonalne notatki edukacyjne z głęboką analizą semantyczną. Skoncentruj się na konkretnych technikach, szczegółowych wyjaśnieniach i praktycznych zastosowaniach. Unikaj powierzchownych opisów - zamiast tego podawaj konkretne metody, procedury i mechanizmy działania. NIE używaj tabel, NIE powtarzaj treści, użyj \"Szybkie Streszczenie\" zamiast \"TL;DR\":\n\n${chunk.content}`\n                }\n            ],\n            temperature: 0.7\n        });\n        const completion = await Promise.race([\n            completionPromise,\n            timeoutPromise\n        ]);\n        const duration = Date.now() - startTime;\n        // Log API response details for token usage monitoring\n        console.log(`[OpenAI] Chunk ${chunk.index} processed in ${duration}ms:`, {\n            promptTokens: completion.usage?.prompt_tokens,\n            completionTokens: completion.usage?.completion_tokens,\n            totalTokens: completion.usage?.total_tokens,\n            model: completion.model,\n            responseLength: completion.choices[0].message.content?.length || 0\n        });\n        const content = completion.choices[0].message.content || \"\";\n        return {\n            content,\n            chunkIndex: chunk.index\n        };\n    } catch (error) {\n        console.error(`[OpenAI] Error processing chunk ${chunk.index} (attempt ${retryCount + 1}):`, error);\n        // More detailed error logging for API issues\n        if (error instanceof Error) {\n            const errorDetails = error.toString();\n            // Network errors\n            if (errorDetails.includes(\"ECONNREFUSED\") || errorDetails.includes(\"ETIMEDOUT\") || errorDetails.includes(\"network\") || errorDetails.includes(\"connection\") || errorDetails.includes(\"socket\")) {\n                console.error(\"[OpenAI] Network error detected - check internet connection\");\n            } else if (errorDetails.includes(\"status code 401\") || errorDetails.includes(\"authentication\") || errorDetails.includes(\"api key\")) {\n                console.error(\"[OpenAI] Authentication error - check API key validity\");\n            } else if (errorDetails.includes(\"status code 429\")) {\n                console.error(\"[OpenAI] Rate limit exceeded - consider reducing request frequency\");\n            } else if (errorDetails.includes(\"status code 400\")) {\n                console.error(\"[OpenAI] Bad request error - check input format\");\n            } else if (errorDetails.includes(\"timeout\")) {\n                console.error(\"[OpenAI] Request timeout - API call took too long\");\n            }\n        }\n        // If we haven't exceeded max retries, try again after delay\n        if (retryCount < MAX_RETRIES) {\n            console.log(`[OpenAI] Retrying chunk ${chunk.index} after ${RETRY_DELAY * (retryCount + 1)}ms delay...`);\n            await delay(RETRY_DELAY * (retryCount + 1));\n            return processChunkWithRetry(chunk, retryCount + 1);\n        }\n        // If all retries failed, return error result\n        return {\n            content: \"\",\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            chunkIndex: chunk.index\n        };\n    }\n}\n/**\n * Generates a quiz based on the content with appropriate number of questions\n */ async function generateQuiz(content, retryCount = 0) {\n    try {\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        console.log(`[OpenAI] Generating quiz for content (${content.length} chars)`);\n        // Determine number of questions based on content length\n        const contentLength = content.length;\n        let numQuestions;\n        if (contentLength <= 2000) {\n            numQuestions = 10;\n        } else if (contentLength <= 3000) {\n            numQuestions = 15;\n        } else {\n            numQuestions = 20;\n        }\n        const startTime = Date.now();\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Quiz generation timeout\")), 60000);\n        });\n        const completionPromise = openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational quiz creator and teacher. Create high-quality multiple-choice questions that test understanding of key concepts and help students learn effectively.\n\nQUIZ REQUIREMENTS:\n- Create exactly ${numQuestions} questions\n- Each question must have exactly 3 options (A, B, C)\n- Only ONE correct answer per question\n- Questions should test comprehension and understanding, not just memorization\n- Write in Polish\n- Include detailed, educational explanations for correct answers\n- Base ALL questions directly on the provided note content\n- Cover different sections and topics from the notes comprehensively\n\nQUESTION QUALITY STANDARDS:\n- Focus on key concepts, main ideas, and important definitions from the notes\n- Test different levels of understanding (knowledge, comprehension, application)\n- Avoid trick questions or overly specific details not covered in notes\n- Make incorrect options plausible but clearly distinguishable from correct answer\n- Ensure questions are clear, unambiguous, and educational\n- Connect to real-world applications when mentioned in the notes\n- Cover material from all major sections of the notes\n- Include questions about definitions, comparisons, and key features\n\nCONTENT COVERAGE:\n- Distribute questions across all major sections of the notes\n- Include questions about definitions and key terms\n- Test understanding of comparisons and differences\n- Ask about examples and applications mentioned in notes\n- Cover both factual knowledge and conceptual understanding\n- Ensure comprehensive coverage of the educational material\n\nEXPLANATION QUALITY:\n- Provide comprehensive explanations that teach the concept\n- Explain WHY the answer is correct based on the notes\n- Include additional context or related information from the notes\n- Help students understand the underlying principles\n- Use educational language that reinforces learning\n- Reference specific information from the notes when explaining\n\nRESPONSE FORMAT:\nReturn ONLY a valid JSON array with this exact structure:\n[\n  {\n    \"id\": \"q1\",\n    \"question\": \"Clear, educational question that tests understanding of content from the notes?\",\n    \"options\": {\n      \"A\": \"Plausible but incorrect option based on note content\",\n      \"B\": \"Correct answer with proper terminology from notes\", \n      \"C\": \"Another plausible but incorrect option from note content\"\n    },\n    \"correctAnswer\": \"B\",\n    \"explanation\": \"Detailed explanation of why this answer is correct based on the information provided in the notes. This should reference specific concepts, definitions, or facts from the educational material and help the student understand the topic better.\"\n  }\n]\n\nEnsure the JSON is perfectly formatted and valid. Focus on creating questions that genuinely help students learn and understand the material covered in the notes.`\n                },\n                {\n                    role: \"user\",\n                    content: `Na podstawie poniższych notatek edukacyjnych utwórz ${numQuestions} przemyślanych pytań wielokrotnego wyboru. Każde pytanie MUSI być oparte bezpośrednio na treści notatek. Sprawdzaj zrozumienie kluczowych pojęć, definicji, porównań i ważnych koncepcji z notatek. Pokryj wszystkie główne sekcje materiału. Dodaj szczegółowe wyjaśnienia odwołujące się do treści notatek:\n\n${content}`\n                }\n            ],\n            temperature: 0.3\n        });\n        const completion = await Promise.race([\n            completionPromise,\n            timeoutPromise\n        ]);\n        const duration = Date.now() - startTime;\n        console.log(`[OpenAI] Quiz generated in ${duration}ms`);\n        const quizContent = completion.choices[0].message.content || \"\";\n        try {\n            // Parse the JSON response\n            const quiz = JSON.parse(quizContent);\n            // Validate the quiz structure\n            if (!Array.isArray(quiz)) {\n                throw new Error(\"Quiz response is not an array\");\n            }\n            // Validate each question\n            for (const question of quiz){\n                if (!question.id || !question.question || !question.options || !question.correctAnswer) {\n                    throw new Error(\"Invalid question structure\");\n                }\n                if (!question.options.A || !question.options.B || !question.options.C) {\n                    throw new Error(\"Missing question options\");\n                }\n                if (![\n                    \"A\",\n                    \"B\",\n                    \"C\"\n                ].includes(question.correctAnswer)) {\n                    throw new Error(\"Invalid correct answer\");\n                }\n            }\n            console.log(`[OpenAI] Successfully generated ${quiz.length} quiz questions`);\n            return {\n                quiz\n            };\n        } catch (parseError) {\n            console.error(\"[OpenAI] Failed to parse quiz JSON:\", parseError);\n            console.error(\"[OpenAI] Raw quiz content:\", quizContent);\n            throw new Error(\"Failed to parse quiz response as valid JSON\");\n        }\n    } catch (error) {\n        console.error(`[OpenAI] Error generating quiz (attempt ${retryCount + 1}):`, error);\n        // Retry logic for quiz generation\n        if (retryCount < MAX_RETRIES) {\n            console.log(`[OpenAI] Retrying quiz generation after ${RETRY_DELAY * (retryCount + 1)}ms delay...`);\n            await delay(RETRY_DELAY * (retryCount + 1));\n            return generateQuiz(content, retryCount + 1);\n        }\n        // If all retries failed, return empty quiz with error\n        return {\n            quiz: [],\n            error: error instanceof Error ? error.message : \"Unknown error generating quiz\"\n        };\n    }\n}\n/**\n * Generates notes from a transcript using AI by processing it in chunks\n */ async function generateNotes(request) {\n    console.log(`[OpenAI] Starting notes generation for text (${request.transcript.length} chars)`);\n    const startTime = Date.now();\n    try {\n        // Validate OpenAI client initialization\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized due to configuration issues\");\n        }\n        // Validate transcript input\n        if (!request.transcript || typeof request.transcript !== \"string\" || request.transcript.trim().length === 0) {\n            throw new Error(\"Empty or invalid transcript provided\");\n        }\n        // Split transcript into chunks\n        const chunks = (0,_utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__.splitTranscriptIntoChunks)(request.transcript);\n        console.log(`[OpenAI] Split text into ${chunks.length} chunks`);\n        if (chunks.length === 0) {\n            throw new Error(\"No valid text chunks could be created from the transcript\");\n        }\n        // Process all chunks with retries\n        const chunkPromises = chunks.map((chunk)=>processChunkWithRetry(chunk));\n        const results = await Promise.all(chunkPromises);\n        // Sort results by chunk index to maintain order\n        results.sort((a, b)=>a.chunkIndex - b.chunkIndex);\n        // Track failed chunks\n        const failedChunks = results.filter((result)=>result.error).map((result)=>({\n                index: result.chunkIndex,\n                reason: result.error || \"Unknown error\",\n                attempts: MAX_RETRIES + 1,\n                startWord: chunks[result.chunkIndex]?.startWord || 0,\n                endWord: chunks[result.chunkIndex]?.endWord || 0\n            }));\n        // Log completion status\n        const duration = Date.now() - startTime;\n        console.log(`[OpenAI] Notes generation completed in ${duration}ms:`, {\n            totalChunks: chunks.length,\n            successfulChunks: chunks.length - failedChunks.length,\n            failedChunks: failedChunks.length\n        });\n        // If all chunks failed, throw an error\n        if (failedChunks.length === chunks.length) {\n            throw new Error(`All ${chunks.length} chunks failed to process. First error: ${failedChunks[0]?.reason}`);\n        }\n        // Combine successful chunks\n        const successfulNotes = results.filter((result)=>result.content).map((result)=>result.content).join(\"\\n\\n---\\n\\n\");\n        // If no content was generated despite some chunks \"succeeding\", that's an error\n        if (!successfulNotes || successfulNotes.trim().length === 0) {\n            throw new Error(\"No content was generated from any chunks\");\n        }\n        // Generate quiz based on the notes content\n        console.log(\"[OpenAI] Generating quiz for the notes...\");\n        const quizResult = await generateQuiz(successfulNotes);\n        if (quizResult.error) {\n            console.warn(\"[OpenAI] Quiz generation failed:\", quizResult.error);\n        } else {\n            console.log(`[OpenAI] Successfully generated ${quizResult.quiz.length} quiz questions`);\n        }\n        // Generate summary from the notes content\n        console.log(\"[OpenAI] Generating condensed summary from full notes\");\n        const summary = await generateSummary(successfulNotes);\n        // Return result with partial success information if needed\n        return {\n            content: successfulNotes,\n            summary: summary,\n            quiz: quizResult.quiz,\n            partialSuccess: failedChunks.length > 0,\n            failedChunks: failedChunks.length > 0 ? failedChunks : undefined,\n            error: failedChunks.length > 0 ? `Niektóre fragmenty nie zostały przetworzone (${failedChunks.length}/${chunks.length})` : undefined\n        };\n    } catch (error) {\n        const duration = Date.now() - startTime;\n        console.error(`[OpenAI] Error generating notes after ${duration}ms:`, error);\n        // Create user-friendly error message based on the type of error\n        let errorMessage = \"Wystąpił błąd podczas generowania notatek. Proszę spr\\xf3bować ponownie.\";\n        if (error instanceof Error) {\n            const errorDetails = error.toString();\n            if (errorDetails.includes(\"API key\")) {\n                errorMessage = \"Błąd konfiguracji API. Proszę skontaktować się z administratorem.\";\n            } else if (errorDetails.includes(\"network\") || errorDetails.includes(\"timeout\")) {\n                errorMessage = \"Problem z połączeniem sieciowym podczas komunikacji z API. Proszę spr\\xf3bować ponownie.\";\n            } else if (errorDetails.includes(\"rate limit\") || errorDetails.includes(\"429\")) {\n                errorMessage = \"Przekroczono limit zapytań do API. Proszę spr\\xf3bować ponownie za kilka minut.\";\n            } else if (errorDetails.includes(\"empty\") || errorDetails.includes(\"invalid transcript\")) {\n                errorMessage = \"Nie można wygenerować notatek z pustego lub nieprawidłowego transkryptu.\";\n            }\n        }\n        return {\n            content: \"\",\n            summary: \"\",\n            quiz: [],\n            error: errorMessage,\n            partialSuccess: false\n        };\n    }\n}\nasync function generateSummary(content, retryCount = 0) {\n    try {\n        console.log(\"[OpenAI] Generating condensed summary from full notes\");\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational summarizer specializing in creating concise, high-value summaries of academic content.\n\nCRITICAL REQUIREMENTS:\n- Write in Polish\n- Create a VERY SHORT summary (3-5 bullet points maximum)\n- Focus ONLY on the most essential, actionable insights\n- Write in simple, clear language suitable for quick review\n- Each point should be one concise sentence capturing a key concept or practical application\n- NO detailed explanations - just the core ideas that students need to remember\n- NO formatting, emojis, or markdown - just clean bullet points\n- AVOID repetitive content - each point should cover a different aspect\n\nSUMMARY QUALITY STANDARDS:\n- Each bullet point should represent a distinct, valuable insight\n- Focus on practical applications, key definitions, or important mechanisms\n- Prioritize information that would be most useful for exam review or quick reference\n- Balance theoretical concepts with practical applications\n- Use concrete, specific language rather than vague generalizations\n\nSTRUCTURE:\nCreate 3-5 bullet points that capture:\n- Most important definition or core concept (if applicable)\n- Key practical technique or method (with specific name/approach)\n- Critical mechanism or principle that explains \"how\" something works\n- Most significant application or real-world relevance\n- Essential takeaway for understanding or implementation\n\nLANGUAGE STYLE:\n- Professional but accessible\n- Specific terminology where appropriate\n- Active voice preferred\n- Concrete rather than abstract language\n\nEXAMPLE OUTPUT (for learning techniques topic):\n- Aktywne Przypominanie wzmacnia pamięć 3-4x skuteczniej niż pasywne czytanie przez aktywację tych samych ścieżek neuronowych\n- System Powtórek Rozłożonych wykorzystuje algorytm SM-2 do optymalizacji interwałów między powtórkami (1 dzień, 6 dni, następnie x2.5)\n- Technika Pomodoro dzieli pracę na 25-minutowe bloki z 5-minutowymi przerwami, wykorzystując naturalny cykl uwagi mózgu\n- Implementacja wymaga codziennej konsystencji przez minimum 80% dni w miesiącu dla osiągnięcia optymalnych rezultatów`\n                },\n                {\n                    role: \"user\",\n                    content: `Create a high-quality, condensed summary focusing on the most essential and actionable insights from these notes. Focus on key concepts, practical techniques, and important mechanisms that students should remember:\\n\\n${content}`\n                }\n            ],\n            max_tokens: 400,\n            temperature: 0.3\n        });\n        const summary = completion.choices[0]?.message?.content?.trim() || \"\";\n        if (!summary) {\n            throw new Error(\"Empty summary generated\");\n        }\n        console.log(`[OpenAI] Summary generated successfully (${summary.length} characters)`);\n        return summary;\n    } catch (error) {\n        console.error(`[OpenAI] Error generating summary (attempt ${retryCount + 1}):`, error.message);\n        if (retryCount < 2) {\n            console.log(`[OpenAI] Retrying summary generation in ${(retryCount + 1) * 1000}ms...`);\n            await delay((retryCount + 1) * 1000);\n            return generateSummary(content, retryCount + 1);\n        }\n        return \"Nie udało się wygenerować streszczenia.\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/queue.ts":
/*!*******************************!*\
  !*** ./src/services/queue.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getQueueInfo: () => (/* binding */ getQueueInfo),\n/* harmony export */   priorityQueue: () => (/* binding */ priorityQueue),\n/* harmony export */   queueRequest: () => (/* binding */ queueRequest)\n/* harmony export */ });\n/**\n * Priority Queue Service for EduScribe\n * \n * Provides priority-based request queuing for note generation\n * with subscription tier support\n */ class PriorityQueueService {\n    /**\n   * Add request to queue with priority based on subscription\n   */ async addToQueue(userId, requestType, subscriptionPlan, payload, processingFunction) {\n        const priority = this.getPriorityFromPlan(subscriptionPlan);\n        const itemId = `${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        return new Promise((resolve, reject)=>{\n            const queueItem = {\n                id: itemId,\n                userId,\n                priority,\n                requestType,\n                payload,\n                resolve: async (value)=>{\n                    try {\n                        const result = await processingFunction();\n                        resolve(result);\n                    } catch (error) {\n                        reject(error);\n                    } finally{\n                        this.processing.delete(itemId);\n                        this.processNext();\n                    }\n                },\n                reject: (error)=>{\n                    this.processing.delete(itemId);\n                    reject(error);\n                    this.processNext();\n                },\n                timestamp: new Date()\n            };\n            this.insertByPriority(queueItem);\n            console.log(`[Queue] Added ${requestType} request for user ${userId} with priority ${priority}`);\n            this.processNext();\n        });\n    }\n    /**\n   * Get current queue statistics for UI display\n   */ getQueueStats(userId) {\n        const userPosition = userId ? this.getUserPosition(userId) : null;\n        const priorityBreakdown = this.queue.reduce((acc, item)=>{\n            if (item.priority === 1) acc.high++;\n            else if (item.priority === 2) acc.medium++;\n            else acc.low++;\n            return acc;\n        }, {\n            high: 0,\n            medium: 0,\n            low: 0\n        });\n        const estimatedWaitTime = userPosition ? userPosition * this.averageProcessingTime : this.queue.length * this.averageProcessingTime;\n        return {\n            totalItems: this.queue.length,\n            priorityBreakdown,\n            estimatedWaitTime\n        };\n    }\n    /**\n   * Get user's position in queue\n   */ getUserPosition(userId) {\n        const index = this.queue.findIndex((item)=>item.userId === userId);\n        return index === -1 ? null : index + 1;\n    }\n    /**\n   * Process next items in queue\n   */ processNext() {\n        const currentlyProcessing = this.processing.size;\n        if (currentlyProcessing >= this.maxConcurrent || this.queue.length === 0) {\n            return;\n        }\n        // Take next item (already sorted by priority)\n        const nextItem = this.queue.shift();\n        if (!nextItem) return;\n        this.processing.set(nextItem.id, true);\n        console.log(`[Queue] Processing ${nextItem.requestType} for user ${nextItem.userId} (priority ${nextItem.priority})`);\n        // Start processing\n        setTimeout(()=>{\n            nextItem.resolve(null); // The actual processing happens in the resolve function\n        }, 100);\n    }\n    /**\n   * Insert item into queue maintaining priority order\n   */ insertByPriority(item) {\n        // Find insertion point (sorted by priority, then by timestamp)\n        let insertIndex = 0;\n        for(let i = 0; i < this.queue.length; i++){\n            const existingItem = this.queue[i];\n            // Higher priority (lower number) goes first\n            if (item.priority < existingItem.priority) {\n                break;\n            }\n            // Same priority, older timestamp goes first\n            if (item.priority === existingItem.priority && item.timestamp >= existingItem.timestamp) {\n                insertIndex = i + 1;\n            } else if (item.priority > existingItem.priority) {\n                insertIndex = i + 1;\n            }\n        }\n        this.queue.splice(insertIndex, 0, item);\n    }\n    /**\n   * Map subscription plan to priority level\n   */ getPriorityFromPlan(plan) {\n        switch(plan){\n            case \"pro\":\n                return 1; // Highest priority\n            case \"student\":\n                return 2; // Medium priority  \n            case \"free\":\n            default:\n                return 3; // Lowest priority\n        }\n    }\n    /**\n   * Remove user from queue (if they cancel)\n   */ removeFromQueue(userId) {\n        const initialLength = this.queue.length;\n        this.queue = this.queue.filter((item)=>item.userId !== userId);\n        return this.queue.length < initialLength;\n    }\n    /**\n   * Update processing time average for better estimates\n   */ updateAverageProcessingTime(duration) {\n        // Simple moving average\n        this.averageProcessingTime = this.averageProcessingTime * 0.8 + duration * 0.2;\n    }\n    /**\n   * Get system load information\n   */ getSystemLoad() {\n        const processing = this.processing.size;\n        const capacity = this.maxConcurrent;\n        const loadPercentage = processing / capacity * 100;\n        return {\n            queueLength: this.queue.length,\n            processing,\n            capacity,\n            loadPercentage\n        };\n    }\n    constructor(){\n        this.queue = [];\n        this.processing = new Map();\n        this.maxConcurrent = 3 // Max concurrent processing\n        ;\n        this.averageProcessingTime = 90 // seconds\n        ;\n    }\n}\n// Singleton instance\nconst priorityQueue = new PriorityQueueService();\n/**\n * Helper function to wrap existing API calls with queue\n */ async function queueRequest(userId, subscriptionPlan, requestType, processingFunction) {\n    return priorityQueue.addToQueue(userId, requestType, subscriptionPlan, {}, processingFunction);\n}\n/**\n * Get queue information for UI\n */ function getQueueInfo(userId) {\n    return {\n        stats: priorityQueue.getQueueStats(userId),\n        position: userId ? priorityQueue.getUserPosition(userId) : null,\n        systemLoad: priorityQueue.getSystemLoad()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/queue.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/subscription.ts":
/*!**************************************!*\
  !*** ./src/services/subscription.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignUserSubscription: () => (/* binding */ assignUserSubscription),\n/* harmony export */   checkUsageLimits: () => (/* binding */ checkUsageLimits),\n/* harmony export */   getPlanPricing: () => (/* binding */ getPlanPricing),\n/* harmony export */   getSubscriptionPlan: () => (/* binding */ getSubscriptionPlan),\n/* harmony export */   getSubscriptionPlans: () => (/* binding */ getSubscriptionPlans),\n/* harmony export */   getUserSubscription: () => (/* binding */ getUserSubscription),\n/* harmony export */   hasFeatureAccess: () => (/* binding */ hasFeatureAccess),\n/* harmony export */   incrementUsage: () => (/* binding */ incrementUsage),\n/* harmony export */   refreshSavedNotesCount: () => (/* binding */ refreshSavedNotesCount),\n/* harmony export */   updateSavedNotesCount: () => (/* binding */ updateSavedNotesCount)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Subscription Service\n * \n * Handles subscription plans, usage tracking, and feature access control\n */ \n// Initialize Supabase client\nconst supabaseUrl = \"https://xhljckmlzdshxibnqsbj.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA\";\n/**\n * Get all available subscription plans\n */ async function getSubscriptionPlans() {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n    const { data, error } = await supabase.from(\"subscription_plans\").select(\"*\").eq(\"is_active\", true).order(\"price_monthly\", {\n        ascending: true\n    });\n    if (error) {\n        console.error(\"[Subscription] Error fetching plans:\", error);\n        throw new Error(\"Failed to fetch subscription plans\");\n    }\n    return data || [];\n}\n/**\n * Get user's current subscription with plan details\n */ async function getUserSubscription(userId, token) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n        global: {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n    });\n    try {\n        // Use direct table query instead of RPC function\n        const { data: userSub, error } = await supabase.from(\"user_subscriptions\").select(`\n        id,\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        if (error) {\n            console.error(\"[Subscription] Error fetching user subscription:\", error);\n            return null;\n        }\n        if (!userSub || !userSub.subscription_plans) {\n            return null;\n        }\n        const planData = userSub.subscription_plans;\n        return {\n            subscription_id: userSub.id,\n            plan_id: userSub.plan_id,\n            plan_name: planData.name,\n            plan_display_name: planData.display_name,\n            billing_cycle: userSub.billing_cycle,\n            status: userSub.status,\n            current_period_end: userSub.current_period_end,\n            features: planData.features,\n            limits: planData.limits,\n            price_monthly: planData.price_monthly,\n            price_yearly: planData.price_yearly\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error in getUserSubscription:\", error);\n        return null;\n    }\n}\n/**\n * Get a specific subscription plan by ID\n */ async function getSubscriptionPlan(planId) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n    const { data, error } = await supabase.from(\"subscription_plans\").select(\"*\").eq(\"id\", planId).eq(\"is_active\", true).single();\n    if (error) {\n        console.error(\"[Subscription] Error fetching plan:\", error);\n        return null;\n    }\n    return data;\n}\n/**\n * Check if user can generate notes based on their plan and usage\n */ async function checkUsageLimits(userId, token, noteType = \"text\") {\n    try {\n        // Use direct table queries instead of RPC functions to avoid issues\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        console.log(\"[Subscription] Checking usage limits for user:\", userId);\n        // Get user's subscription directly\n        const { data: userSub, error: subError } = await supabase.from(\"user_subscriptions\").select(`\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        // Get current month usage directly\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { data: usage, error: usageError } = await supabase.from(\"user_usage\").select(\"*\").eq(\"user_id\", userId).eq(\"month_year\", currentMonth).single();\n        // Default free plan limits\n        const freePlanLimits = {\n            notes_per_month: 2,\n            max_saved_notes: 3,\n            max_text_length: 5000\n        };\n        const currentUsage = usage || {\n            notes_generated: 0,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 0,\n            month_year: currentMonth\n        };\n        // If usage record doesn't exist, create it\n        if (!usage) {\n            console.log(\"[Subscription] Creating usage record for current month:\", currentMonth);\n            const { error: createUsageError } = await supabase.from(\"user_usage\").insert({\n                user_id: userId,\n                month_year: currentMonth,\n                notes_generated: 0,\n                video_notes_count: 0,\n                file_notes_count: 0,\n                text_notes_count: 0,\n                total_saved_notes: 0,\n                updated_at: new Date().toISOString()\n            });\n            if (createUsageError) {\n                console.error(\"[Subscription] Warning: Could not create usage record:\", createUsageError);\n            }\n        }\n        // If no subscription found or error, try to create a free subscription\n        if (!userSub || subError) {\n            console.log(\"[Subscription] No active subscription found, attempting to create free subscription\");\n            if (subError) {\n                console.error(\"[Subscription] Subscription query error:\", subError);\n            }\n            // Try to create a free subscription for the user\n            const { error: createSubError } = await supabase.from(\"user_subscriptions\").insert({\n                user_id: userId,\n                plan_id: \"free\",\n                billing_cycle: \"monthly\",\n                status: \"active\",\n                current_period_start: new Date().toISOString(),\n                current_period_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                updated_at: new Date().toISOString()\n            }).select();\n            if (createSubError) {\n                console.error(\"[Subscription] Could not create free subscription:\", createSubError);\n            } else {\n                console.log(\"[Subscription] Created free subscription for user\");\n            }\n            // Return free plan limits regardless of whether we could create the subscription\n            const canGenerate = currentUsage.notes_generated < freePlanLimits.notes_per_month;\n            const canSave = currentUsage.total_saved_notes < freePlanLimits.max_saved_notes;\n            return {\n                canGenerate,\n                canSave,\n                reason: !canGenerate ? `Monthly limit reached (${freePlanLimits.notes_per_month} notes per month)` : !canSave ? `Storage limit reached (${freePlanLimits.max_saved_notes} saved notes maximum)` : undefined,\n                usage: currentUsage,\n                limits: freePlanLimits\n            };\n        }\n        const subscription = userSub;\n        const planData = subscription.subscription_plans;\n        if (!planData) {\n            console.error(\"[Subscription] Plan data not found for subscription:\", subscription);\n            // Fallback to free plan\n            const canGenerate = currentUsage.notes_generated < freePlanLimits.notes_per_month;\n            const canSave = currentUsage.total_saved_notes < freePlanLimits.max_saved_notes;\n            return {\n                canGenerate,\n                canSave,\n                reason: \"Plan data not found - using free plan limits\",\n                usage: currentUsage,\n                limits: freePlanLimits\n            };\n        }\n        console.log(\"[Subscription] Found subscription:\", {\n            planId: subscription.plan_id,\n            planLimits: planData.limits,\n            currentUsage: currentUsage\n        });\n        // Check monthly generation limit (handle unlimited case)\n        const monthlyLimit = planData.limits.notes_per_month;\n        const canGenerate = monthlyLimit === -1 || currentUsage.notes_generated < monthlyLimit;\n        // Check saved notes limit\n        const canSave = currentUsage.total_saved_notes < planData.limits.max_saved_notes;\n        let reason;\n        if (!canGenerate && monthlyLimit !== -1) {\n            reason = `Monthly limit reached (${monthlyLimit} notes per month)`;\n        } else if (!canSave) {\n            reason = `Storage limit reached (${planData.limits.max_saved_notes} saved notes maximum)`;\n        }\n        return {\n            canGenerate,\n            canSave,\n            reason,\n            usage: currentUsage,\n            limits: planData.limits\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error checking usage limits:\", error);\n        // Return restrictive fallback\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const fallbackUsage = {\n            notes_generated: 999,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 999,\n            month_year: currentMonth\n        };\n        return {\n            canGenerate: false,\n            canSave: false,\n            reason: \"Error checking subscription limits. Please try again.\",\n            usage: fallbackUsage,\n            limits: {\n                notes_per_month: 2,\n                max_saved_notes: 3,\n                max_text_length: 5000\n            }\n        };\n    }\n}\n/**\n * Increment user's usage count after successful note generation\n */ async function incrementUsage(userId, token, noteType = \"text\") {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        console.log(\"[Subscription] Incrementing usage for user:\", userId, \"type:\", noteType);\n        // Get current usage\n        const { data: currentUsage, error: fetchError } = await supabase.from(\"user_usage\").select(\"*\").eq(\"user_id\", userId).eq(\"month_year\", currentMonth).single();\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n            console.error(\"[Subscription] Error fetching current usage:\", fetchError);\n            return false;\n        }\n        // Prepare update data\n        const updateData = {\n            notes_generated: (currentUsage?.notes_generated || 0) + 1,\n            updated_at: new Date().toISOString()\n        };\n        // Increment specific note type counter\n        if (noteType === \"video\") {\n            updateData.video_notes_count = (currentUsage?.video_notes_count || 0) + 1;\n        } else if (noteType === \"file\") {\n            updateData.file_notes_count = (currentUsage?.file_notes_count || 0) + 1;\n        } else if (noteType === \"text\") {\n            updateData.text_notes_count = (currentUsage?.text_notes_count || 0) + 1;\n        }\n        // Update or insert usage record\n        if (currentUsage) {\n            const { error: updateError } = await supabase.from(\"user_usage\").update(updateData).eq(\"user_id\", userId).eq(\"month_year\", currentMonth);\n            if (updateError) {\n                console.error(\"[Subscription] Error updating usage:\", updateError);\n                return false;\n            }\n        } else {\n            // Create new usage record\n            const insertData = {\n                user_id: userId,\n                month_year: currentMonth,\n                notes_generated: 1,\n                video_notes_count: noteType === \"video\" ? 1 : 0,\n                file_notes_count: noteType === \"file\" ? 1 : 0,\n                text_notes_count: noteType === \"text\" ? 1 : 0,\n                total_saved_notes: 0,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            const { error: insertError } = await supabase.from(\"user_usage\").insert(insertData);\n            if (insertError) {\n                console.error(\"[Subscription] Error creating usage record:\", insertError);\n                return false;\n            }\n        }\n        console.log(\"[Subscription] Successfully incremented usage\");\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error incrementing usage:\", error);\n        return false;\n    }\n}\n/**\n * Update saved notes count (used when notes are saved or deleted)\n */ async function updateSavedNotesCount(userId, token, count) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        console.log(\"[Subscription] Updating saved notes count for user:\", userId, \"count:\", count);\n        // Upsert the saved notes count\n        const { error } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            total_saved_notes: Math.max(0, count),\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\"\n        });\n        if (error) {\n            console.error(\"[Subscription] Error updating saved notes count:\", error);\n            return false;\n        }\n        console.log(\"[Subscription] Successfully updated saved notes count\");\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error updating saved notes count:\", error);\n        return false;\n    }\n}\n/**\n * Refresh saved notes count by counting all notes from all tables\n */ async function refreshSavedNotesCount(userId, token) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        console.log(\"[Subscription] Refreshing saved notes count for user:\", userId);\n        // Count notes from all tables including video_upload_notes\n        const [videoResult, fileResult, textResult, uploadVideoResult] = await Promise.all([\n            supabase.from(\"video_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId),\n            supabase.from(\"file_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId),\n            supabase.from(\"text_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId),\n            // Handle video_upload_notes table that might not exist in all environments\n            supabase.from(\"video_upload_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId).then((result)=>result, (error)=>{\n                console.warn(\"[Subscription] video_upload_notes table might not exist:\", error.message);\n                return {\n                    count: 0\n                };\n            })\n        ]);\n        const videoCount = videoResult.count || 0;\n        const fileCount = fileResult.count || 0;\n        const textCount = textResult.count || 0;\n        const uploadVideoCount = uploadVideoResult.count || 0;\n        const totalCount = videoCount + fileCount + textCount + uploadVideoCount;\n        console.log(\"[Subscription] Note counts:\", {\n            video: videoCount,\n            file: fileCount,\n            text: textCount,\n            video_upload: uploadVideoCount,\n            total: totalCount\n        });\n        // Update the usage record with the actual count\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { error } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            total_saved_notes: totalCount,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\"\n        });\n        if (error) {\n            console.error(\"[Subscription] Error updating saved notes count:\", error);\n            return false;\n        }\n        console.log(\"[Subscription] Successfully refreshed saved notes count to:\", totalCount);\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error refreshing saved notes count:\", error);\n        return false;\n    }\n}\n/**\n * Get plan pricing with discount calculation\n */ function getPlanPricing(plan) {\n    const monthlyPrice = plan.price_monthly;\n    const yearlyPrice = plan.price_yearly;\n    const yearlyMonthlyEquivalent = yearlyPrice / 12;\n    const discountPercentage = monthlyPrice > 0 ? Math.round((1 - yearlyMonthlyEquivalent / monthlyPrice) * 100) : 0;\n    const yearlySavings = monthlyPrice * 12 - yearlyPrice;\n    return {\n        monthly: monthlyPrice,\n        yearly: yearlyPrice,\n        yearlyMonthlyEquivalent,\n        discountPercentage,\n        yearlySavings,\n        currency: plan.currency\n    };\n}\n/**\n * Check if user has access to a specific feature\n */ async function hasFeatureAccess(userId, token, feature) {\n    try {\n        const subscription = await getUserSubscription(userId, token);\n        if (!subscription) {\n            // Default free plan features\n            const freeFeatures = {\n                notes_generation: true,\n                quizzes: false,\n                youtube_support: true,\n                ppt_support: false,\n                export: false,\n                copy_paste: true,\n                upload_video: false,\n                priority_generation: false\n            };\n            return freeFeatures[feature] || false;\n        }\n        return subscription.features[feature] || false;\n    } catch (error) {\n        console.error(\"[Subscription] Error checking feature access:\", error);\n        return false; // Default to no access on error\n    }\n}\n/**\n * Assign subscription to user after successful payment\n */ async function assignUserSubscription(userId, token, planId, billingCycle, paymentData) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n        global: {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n    });\n    try {\n        // Calculate period dates\n        const currentPeriodStart = new Date();\n        const currentPeriodEnd = new Date();\n        if (billingCycle === \"yearly\") {\n            currentPeriodEnd.setFullYear(currentPeriodEnd.getFullYear() + 1);\n        } else {\n            currentPeriodEnd.setMonth(currentPeriodEnd.getMonth() + 1);\n        }\n        // Prepare subscription data\n        const subscriptionData = {\n            user_id: userId,\n            plan_id: planId,\n            billing_cycle: billingCycle,\n            status: \"active\",\n            current_period_start: currentPeriodStart.toISOString(),\n            current_period_end: currentPeriodEnd.toISOString(),\n            cancel_at_period_end: false,\n            stripe_subscription_id: paymentData?.stripeSubscriptionId || null,\n            stripe_customer_id: paymentData?.stripeCustomerId || null,\n            updated_at: new Date().toISOString()\n        };\n        // Upsert subscription (update if exists, insert if new)\n        const { data: subscription, error: subscriptionError } = await supabase.from(\"user_subscriptions\").upsert(subscriptionData, {\n            onConflict: \"user_id\"\n        }).select(`\n        id,\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).single();\n        if (subscriptionError) {\n            console.error(\"[Subscription] Error assigning subscription:\", subscriptionError);\n            throw new Error(\"Failed to assign subscription\");\n        }\n        if (!subscription || !subscription.subscription_plans) {\n            throw new Error(\"Failed to retrieve subscription details\");\n        }\n        // Initialize usage tracking for current month\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { error: usageError } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            notes_generated: 0,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 0,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\",\n            ignoreDuplicates: true\n        });\n        if (usageError) {\n            console.error(\"[Subscription] Warning: Failed to initialize usage tracking:\", usageError);\n        // Don't throw error here as subscription assignment was successful\n        }\n        const planData = subscription.subscription_plans;\n        return {\n            subscription_id: subscription.id,\n            plan_id: subscription.plan_id,\n            plan_name: planData.name,\n            plan_display_name: planData.display_name,\n            billing_cycle: subscription.billing_cycle,\n            status: subscription.status,\n            current_period_end: subscription.current_period_end,\n            features: planData.features,\n            limits: planData.limits,\n            price_monthly: planData.price_monthly,\n            price_yearly: planData.price_yearly\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error in assignUserSubscription:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNuQkssWUFBWSxJQUFJbkIsT0FBT0MsV0FBVztRQUNwQyxHQUFHO1lBQ0Q0QyxZQUFZO1lBQ1o2RCxrQkFBa0I7UUFDcEI7UUFFRixJQUFJdEcsWUFBWTtZQUNkckMsUUFBUU4sS0FBSyxDQUFDLGdFQUFnRTJDO1FBQzlFLG1FQUFtRTtRQUNyRTtRQUVBLE1BQU0xQixXQUFXaUQsYUFBYWxELGtCQUFrQjtRQUVoRCxPQUFPO1lBQ0xFLGlCQUFpQmdELGFBQWEvQyxFQUFFO1lBQ2hDQyxTQUFTOEMsYUFBYTlDLE9BQU87WUFDN0JDLFdBQVdKLFNBQVNLLElBQUk7WUFDeEJDLG1CQUFtQk4sU0FBU08sWUFBWTtZQUN4Q0MsZUFBZXlDLGFBQWF6QyxhQUFhO1lBQ3pDQyxRQUFRd0MsYUFBYXhDLE1BQU07WUFDM0JDLG9CQUFvQnVDLGFBQWF2QyxrQkFBa0I7WUFDbkRDLFVBQVVYLFNBQVNXLFFBQVE7WUFDM0JDLFFBQVFaLFNBQVNZLE1BQU07WUFDdkJDLGVBQWViLFNBQVNhLGFBQWE7WUFDckNDLGNBQWNkLFNBQVNjLFlBQVk7UUFDckM7SUFDRixFQUFFLE9BQU8vQixPQUFPO1FBQ2RNLFFBQVFOLEtBQUssQ0FBQyxtREFBbURBO1FBQ2pFLE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2VkdXNjcmliZS8uL3NyYy9zZXJ2aWNlcy9zdWJzY3JpcHRpb24udHM/MDRmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1YnNjcmlwdGlvbiBTZXJ2aWNlXG4gKiBcbiAqIEhhbmRsZXMgc3Vic2NyaXB0aW9uIHBsYW5zLCB1c2FnZSB0cmFja2luZywgYW5kIGZlYXR1cmUgYWNjZXNzIGNvbnRyb2xcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG4vLyBJbml0aWFsaXplIFN1cGFiYXNlIGNsaWVudFxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkhO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvblBsYW4ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRpc3BsYXlfbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwcmljZV9tb250aGx5OiBudW1iZXI7XG4gIHByaWNlX3llYXJseTogbnVtYmVyO1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICBmZWF0dXJlczoge1xuICAgIG5vdGVzX2dlbmVyYXRpb246IGJvb2xlYW47XG4gICAgcXVpenplczogYm9vbGVhbjtcbiAgICB5b3V0dWJlX3N1cHBvcnQ6IGJvb2xlYW47XG4gICAgcHB0X3N1cHBvcnQ6IGJvb2xlYW47XG4gICAgZXhwb3J0OiBib29sZWFuO1xuICAgIGNvcHlfcGFzdGU6IGJvb2xlYW47XG4gICAgdXBsb2FkX3ZpZGVvPzogYm9vbGVhbjtcbiAgICBwcmlvcml0eV9nZW5lcmF0aW9uPzogYm9vbGVhbjtcbiAgfTtcbiAgbGltaXRzOiB7XG4gICAgbm90ZXNfcGVyX21vbnRoOiBudW1iZXI7IC8vIC0xIG1lYW5zIHVubGltaXRlZFxuICAgIG1heF9zYXZlZF9ub3RlczogbnVtYmVyO1xuICAgIG1heF90ZXh0X2xlbmd0aDogbnVtYmVyO1xuICB9O1xuICBpc19hY3RpdmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclN1YnNjcmlwdGlvbiB7XG4gIHN1YnNjcmlwdGlvbl9pZDogc3RyaW5nO1xuICBwbGFuX2lkOiBzdHJpbmc7XG4gIHBsYW5fbmFtZTogc3RyaW5nO1xuICBwbGFuX2Rpc3BsYXlfbmFtZTogc3RyaW5nO1xuICBiaWxsaW5nX2N5Y2xlOiAnbW9udGhseScgfCAneWVhcmx5JztcbiAgc3RhdHVzOiAnYWN0aXZlJyB8ICdjYW5jZWxsZWQnIHwgJ2V4cGlyZWQnIHwgJ3RyaWFsJztcbiAgY3VycmVudF9wZXJpb2RfZW5kOiBzdHJpbmc7XG4gIGZlYXR1cmVzOiBTdWJzY3JpcHRpb25QbGFuWydmZWF0dXJlcyddO1xuICBsaW1pdHM6IFN1YnNjcmlwdGlvblBsYW5bJ2xpbWl0cyddO1xuICBwcmljZV9tb250aGx5OiBudW1iZXI7XG4gIHByaWNlX3llYXJseTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJVc2FnZSB7XG4gIG5vdGVzX2dlbmVyYXRlZDogbnVtYmVyO1xuICB2aWRlb19ub3Rlc19jb3VudDogbnVtYmVyO1xuICBmaWxlX25vdGVzX2NvdW50OiBudW1iZXI7XG4gIHRleHRfbm90ZXNfY291bnQ6IG51bWJlcjtcbiAgdG90YWxfc2F2ZWRfbm90ZXM6IG51bWJlcjtcbiAgbW9udGhfeWVhcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzYWdlQ2hlY2sge1xuICBjYW5HZW5lcmF0ZTogYm9vbGVhbjtcbiAgY2FuU2F2ZTogYm9vbGVhbjtcbiAgcmVhc29uPzogc3RyaW5nO1xuICB1c2FnZTogVXNlclVzYWdlO1xuICBsaW1pdHM6IFN1YnNjcmlwdGlvblBsYW5bJ2xpbWl0cyddO1xufVxuXG4vKipcbiAqIEdldCBhbGwgYXZhaWxhYmxlIHN1YnNjcmlwdGlvbiBwbGFuc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3Vic2NyaXB0aW9uUGxhbnMoKTogUHJvbWlzZTxTdWJzY3JpcHRpb25QbGFuW10+IHtcbiAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSk7XG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCdzdWJzY3JpcHRpb25fcGxhbnMnKVxuICAgIC5zZWxlY3QoJyonKVxuICAgIC5lcSgnaXNfYWN0aXZlJywgdHJ1ZSlcbiAgICAub3JkZXIoJ3ByaWNlX21vbnRobHknLCB7IGFzY2VuZGluZzogdHJ1ZSB9KTtcbiAgICBcbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgZmV0Y2hpbmcgcGxhbnM6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHN1YnNjcmlwdGlvbiBwbGFucycpO1xuICB9XG4gIFxuICByZXR1cm4gZGF0YSB8fCBbXTtcbn1cblxuLyoqXG4gKiBHZXQgdXNlcidzIGN1cnJlbnQgc3Vic2NyaXB0aW9uIHdpdGggcGxhbiBkZXRhaWxzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyU3Vic2NyaXB0aW9uKHVzZXJJZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxVc2VyU3Vic2NyaXB0aW9uIHwgbnVsbD4ge1xuICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5LCB7XG4gICAgZ2xvYmFsOiB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gVXNlIGRpcmVjdCB0YWJsZSBxdWVyeSBpbnN0ZWFkIG9mIFJQQyBmdW5jdGlvblxuICAgIGNvbnN0IHsgZGF0YTogdXNlclN1YiwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcl9zdWJzY3JpcHRpb25zJylcbiAgICAgIC5zZWxlY3QoYFxuICAgICAgICBpZCxcbiAgICAgICAgcGxhbl9pZCxcbiAgICAgICAgYmlsbGluZ19jeWNsZSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBjdXJyZW50X3BlcmlvZF9lbmQsXG4gICAgICAgIHN1YnNjcmlwdGlvbl9wbGFucyAoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBkaXNwbGF5X25hbWUsXG4gICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgbGltaXRzLFxuICAgICAgICAgIHByaWNlX21vbnRobHksXG4gICAgICAgICAgcHJpY2VfeWVhcmx5XG4gICAgICAgIClcbiAgICAgIGApXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgICAuZXEoJ3N0YXR1cycsICdhY3RpdmUnKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciBmZXRjaGluZyB1c2VyIHN1YnNjcmlwdGlvbjonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXVzZXJTdWIgfHwgIXVzZXJTdWIuc3Vic2NyaXB0aW9uX3BsYW5zKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBwbGFuRGF0YSA9IHVzZXJTdWIuc3Vic2NyaXB0aW9uX3BsYW5zIGFzIGFueTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgc3Vic2NyaXB0aW9uX2lkOiB1c2VyU3ViLmlkLFxuICAgICAgcGxhbl9pZDogdXNlclN1Yi5wbGFuX2lkLFxuICAgICAgcGxhbl9uYW1lOiBwbGFuRGF0YS5uYW1lLFxuICAgICAgcGxhbl9kaXNwbGF5X25hbWU6IHBsYW5EYXRhLmRpc3BsYXlfbmFtZSxcbiAgICAgIGJpbGxpbmdfY3ljbGU6IHVzZXJTdWIuYmlsbGluZ19jeWNsZSxcbiAgICAgIHN0YXR1czogdXNlclN1Yi5zdGF0dXMsXG4gICAgICBjdXJyZW50X3BlcmlvZF9lbmQ6IHVzZXJTdWIuY3VycmVudF9wZXJpb2RfZW5kLFxuICAgICAgZmVhdHVyZXM6IHBsYW5EYXRhLmZlYXR1cmVzLFxuICAgICAgbGltaXRzOiBwbGFuRGF0YS5saW1pdHMsXG4gICAgICBwcmljZV9tb250aGx5OiBwbGFuRGF0YS5wcmljZV9tb250aGx5LFxuICAgICAgcHJpY2VfeWVhcmx5OiBwbGFuRGF0YS5wcmljZV95ZWFybHlcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIEVycm9yIGluIGdldFVzZXJTdWJzY3JpcHRpb246JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2V0IGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uIHBsYW4gYnkgSURcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvblBsYW4ocGxhbklkOiBzdHJpbmcpOiBQcm9taXNlPFN1YnNjcmlwdGlvblBsYW4gfCBudWxsPiB7XG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpO1xuICBcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnc3Vic2NyaXB0aW9uX3BsYW5zJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZXEoJ2lkJywgcGxhbklkKVxuICAgIC5lcSgnaXNfYWN0aXZlJywgdHJ1ZSlcbiAgICAuc2luZ2xlKCk7XG4gICAgXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIEVycm9yIGZldGNoaW5nIHBsYW46JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIFxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB1c2VyIGNhbiBnZW5lcmF0ZSBub3RlcyBiYXNlZCBvbiB0aGVpciBwbGFuIGFuZCB1c2FnZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tVc2FnZUxpbWl0cyhcbiAgdXNlcklkOiBzdHJpbmcsIFxuICB0b2tlbjogc3RyaW5nLCBcbiAgbm90ZVR5cGU6ICd2aWRlbycgfCAnZmlsZScgfCAndGV4dCcgPSAndGV4dCdcbik6IFByb21pc2U8VXNhZ2VDaGVjaz4ge1xuICB0cnkge1xuICAgIC8vIFVzZSBkaXJlY3QgdGFibGUgcXVlcmllcyBpbnN0ZWFkIG9mIFJQQyBmdW5jdGlvbnMgdG8gYXZvaWQgaXNzdWVzXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSwge1xuICAgICAgZ2xvYmFsOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZygnW1N1YnNjcmlwdGlvbl0gQ2hlY2tpbmcgdXNhZ2UgbGltaXRzIGZvciB1c2VyOicsIHVzZXJJZClcblxuICAgIC8vIEdldCB1c2VyJ3Mgc3Vic2NyaXB0aW9uIGRpcmVjdGx5XG4gICAgY29uc3QgeyBkYXRhOiB1c2VyU3ViLCBlcnJvcjogc3ViRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcl9zdWJzY3JpcHRpb25zJylcbiAgICAgIC5zZWxlY3QoYFxuICAgICAgICBwbGFuX2lkLFxuICAgICAgICBiaWxsaW5nX2N5Y2xlLFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGN1cnJlbnRfcGVyaW9kX2VuZCxcbiAgICAgICAgc3Vic2NyaXB0aW9uX3BsYW5zIChcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGRpc3BsYXlfbmFtZSxcbiAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICBsaW1pdHMsXG4gICAgICAgICAgcHJpY2VfbW9udGhseSxcbiAgICAgICAgICBwcmljZV95ZWFybHlcbiAgICAgICAgKVxuICAgICAgYClcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAgIC5lcSgnc3RhdHVzJywgJ2FjdGl2ZScpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICAvLyBHZXQgY3VycmVudCBtb250aCB1c2FnZSBkaXJlY3RseVxuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCA3KTtcbiAgICBjb25zdCB7IGRhdGE6IHVzYWdlLCBlcnJvcjogdXNhZ2VFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VyX3VzYWdlJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKVxuICAgICAgLmVxKCdtb250aF95ZWFyJywgY3VycmVudE1vbnRoKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgLy8gRGVmYXVsdCBmcmVlIHBsYW4gbGltaXRzXG4gICAgY29uc3QgZnJlZVBsYW5MaW1pdHMgPSB7IFxuICAgICAgbm90ZXNfcGVyX21vbnRoOiAyLCBcbiAgICAgIG1heF9zYXZlZF9ub3RlczogMywgXG4gICAgICBtYXhfdGV4dF9sZW5ndGg6IDUwMDAgXG4gICAgfTtcblxuICAgIGNvbnN0IGN1cnJlbnRVc2FnZSA9IHVzYWdlIHx8IHtcbiAgICAgIG5vdGVzX2dlbmVyYXRlZDogMCxcbiAgICAgIHZpZGVvX25vdGVzX2NvdW50OiAwLFxuICAgICAgZmlsZV9ub3Rlc19jb3VudDogMCxcbiAgICAgIHRleHRfbm90ZXNfY291bnQ6IDAsXG4gICAgICB0b3RhbF9zYXZlZF9ub3RlczogMCxcbiAgICAgIG1vbnRoX3llYXI6IGN1cnJlbnRNb250aFxuICAgIH07XG5cbiAgICAvLyBJZiB1c2FnZSByZWNvcmQgZG9lc24ndCBleGlzdCwgY3JlYXRlIGl0XG4gICAgaWYgKCF1c2FnZSkge1xuICAgICAgY29uc29sZS5sb2coJ1tTdWJzY3JpcHRpb25dIENyZWF0aW5nIHVzYWdlIHJlY29yZCBmb3IgY3VycmVudCBtb250aDonLCBjdXJyZW50TW9udGgpXG4gICAgICBjb25zdCB7IGVycm9yOiBjcmVhdGVVc2FnZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndXNlcl91c2FnZScpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICBtb250aF95ZWFyOiBjdXJyZW50TW9udGgsXG4gICAgICAgICAgbm90ZXNfZ2VuZXJhdGVkOiAwLFxuICAgICAgICAgIHZpZGVvX25vdGVzX2NvdW50OiAwLFxuICAgICAgICAgIGZpbGVfbm90ZXNfY291bnQ6IDAsXG4gICAgICAgICAgdGV4dF9ub3Rlc19jb3VudDogMCxcbiAgICAgICAgICB0b3RhbF9zYXZlZF9ub3RlczogMCxcbiAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmIChjcmVhdGVVc2FnZUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIFdhcm5pbmc6IENvdWxkIG5vdCBjcmVhdGUgdXNhZ2UgcmVjb3JkOicsIGNyZWF0ZVVzYWdlRXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIHN1YnNjcmlwdGlvbiBmb3VuZCBvciBlcnJvciwgdHJ5IHRvIGNyZWF0ZSBhIGZyZWUgc3Vic2NyaXB0aW9uXG4gICAgaWYgKCF1c2VyU3ViIHx8IHN1YkVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1N1YnNjcmlwdGlvbl0gTm8gYWN0aXZlIHN1YnNjcmlwdGlvbiBmb3VuZCwgYXR0ZW1wdGluZyB0byBjcmVhdGUgZnJlZSBzdWJzY3JpcHRpb24nKVxuICAgICAgXG4gICAgICBpZiAoc3ViRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gU3Vic2NyaXB0aW9uIHF1ZXJ5IGVycm9yOicsIHN1YkVycm9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSBhIGZyZWUgc3Vic2NyaXB0aW9uIGZvciB0aGUgdXNlclxuICAgICAgY29uc3QgeyBlcnJvcjogY3JlYXRlU3ViRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd1c2VyX3N1YnNjcmlwdGlvbnMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgcGxhbl9pZDogJ2ZyZWUnLFxuICAgICAgICAgIGJpbGxpbmdfY3ljbGU6ICdtb250aGx5JyxcbiAgICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgICAgIGN1cnJlbnRfcGVyaW9kX3N0YXJ0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgY3VycmVudF9wZXJpb2RfZW5kOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KCk7XG5cbiAgICAgIGlmIChjcmVhdGVTdWJFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBDb3VsZCBub3QgY3JlYXRlIGZyZWUgc3Vic2NyaXB0aW9uOicsIGNyZWF0ZVN1YkVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU3Vic2NyaXB0aW9uXSBDcmVhdGVkIGZyZWUgc3Vic2NyaXB0aW9uIGZvciB1c2VyJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBmcmVlIHBsYW4gbGltaXRzIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB3ZSBjb3VsZCBjcmVhdGUgdGhlIHN1YnNjcmlwdGlvblxuICAgICAgY29uc3QgY2FuR2VuZXJhdGUgPSBjdXJyZW50VXNhZ2Uubm90ZXNfZ2VuZXJhdGVkIDwgZnJlZVBsYW5MaW1pdHMubm90ZXNfcGVyX21vbnRoO1xuICAgICAgY29uc3QgY2FuU2F2ZSA9IGN1cnJlbnRVc2FnZS50b3RhbF9zYXZlZF9ub3RlcyA8IGZyZWVQbGFuTGltaXRzLm1heF9zYXZlZF9ub3RlcztcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FuR2VuZXJhdGUsXG4gICAgICAgIGNhblNhdmUsXG4gICAgICAgIHJlYXNvbjogIWNhbkdlbmVyYXRlID8gYE1vbnRobHkgbGltaXQgcmVhY2hlZCAoJHtmcmVlUGxhbkxpbWl0cy5ub3Rlc19wZXJfbW9udGh9IG5vdGVzIHBlciBtb250aClgIDpcbiAgICAgICAgICAgICAgICAhY2FuU2F2ZSA/IGBTdG9yYWdlIGxpbWl0IHJlYWNoZWQgKCR7ZnJlZVBsYW5MaW1pdHMubWF4X3NhdmVkX25vdGVzfSBzYXZlZCBub3RlcyBtYXhpbXVtKWAgOiB1bmRlZmluZWQsXG4gICAgICAgIHVzYWdlOiBjdXJyZW50VXNhZ2UsXG4gICAgICAgIGxpbWl0czogZnJlZVBsYW5MaW1pdHNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdXNlclN1YjtcbiAgICBjb25zdCBwbGFuRGF0YSA9IHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25fcGxhbnMgYXMgYW55O1xuICAgIFxuICAgIGlmICghcGxhbkRhdGEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIFBsYW4gZGF0YSBub3QgZm91bmQgZm9yIHN1YnNjcmlwdGlvbjonLCBzdWJzY3JpcHRpb24pO1xuICAgICAgLy8gRmFsbGJhY2sgdG8gZnJlZSBwbGFuXG4gICAgICBjb25zdCBjYW5HZW5lcmF0ZSA9IGN1cnJlbnRVc2FnZS5ub3Rlc19nZW5lcmF0ZWQgPCBmcmVlUGxhbkxpbWl0cy5ub3Rlc19wZXJfbW9udGg7XG4gICAgICBjb25zdCBjYW5TYXZlID0gY3VycmVudFVzYWdlLnRvdGFsX3NhdmVkX25vdGVzIDwgZnJlZVBsYW5MaW1pdHMubWF4X3NhdmVkX25vdGVzO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYW5HZW5lcmF0ZSxcbiAgICAgICAgY2FuU2F2ZSxcbiAgICAgICAgcmVhc29uOiAnUGxhbiBkYXRhIG5vdCBmb3VuZCAtIHVzaW5nIGZyZWUgcGxhbiBsaW1pdHMnLFxuICAgICAgICB1c2FnZTogY3VycmVudFVzYWdlLFxuICAgICAgICBsaW1pdHM6IGZyZWVQbGFuTGltaXRzXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygnW1N1YnNjcmlwdGlvbl0gRm91bmQgc3Vic2NyaXB0aW9uOicsIHtcbiAgICAgIHBsYW5JZDogc3Vic2NyaXB0aW9uLnBsYW5faWQsXG4gICAgICBwbGFuTGltaXRzOiBwbGFuRGF0YS5saW1pdHMsXG4gICAgICBjdXJyZW50VXNhZ2U6IGN1cnJlbnRVc2FnZVxuICAgIH0pO1xuXG4gICAgLy8gQ2hlY2sgbW9udGhseSBnZW5lcmF0aW9uIGxpbWl0IChoYW5kbGUgdW5saW1pdGVkIGNhc2UpXG4gICAgY29uc3QgbW9udGhseUxpbWl0ID0gcGxhbkRhdGEubGltaXRzLm5vdGVzX3Blcl9tb250aDtcbiAgICBjb25zdCBjYW5HZW5lcmF0ZSA9IG1vbnRobHlMaW1pdCA9PT0gLTEgfHwgY3VycmVudFVzYWdlLm5vdGVzX2dlbmVyYXRlZCA8IG1vbnRobHlMaW1pdDtcbiAgICBcbiAgICAvLyBDaGVjayBzYXZlZCBub3RlcyBsaW1pdFxuICAgIGNvbnN0IGNhblNhdmUgPSBjdXJyZW50VXNhZ2UudG90YWxfc2F2ZWRfbm90ZXMgPCBwbGFuRGF0YS5saW1pdHMubWF4X3NhdmVkX25vdGVzO1xuICAgIFxuICAgIGxldCByZWFzb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBpZiAoIWNhbkdlbmVyYXRlICYmIG1vbnRobHlMaW1pdCAhPT0gLTEpIHtcbiAgICAgIHJlYXNvbiA9IGBNb250aGx5IGxpbWl0IHJlYWNoZWQgKCR7bW9udGhseUxpbWl0fSBub3RlcyBwZXIgbW9udGgpYDtcbiAgICB9IGVsc2UgaWYgKCFjYW5TYXZlKSB7XG4gICAgICByZWFzb24gPSBgU3RvcmFnZSBsaW1pdCByZWFjaGVkICgke3BsYW5EYXRhLmxpbWl0cy5tYXhfc2F2ZWRfbm90ZXN9IHNhdmVkIG5vdGVzIG1heGltdW0pYDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbkdlbmVyYXRlLFxuICAgICAgY2FuU2F2ZSxcbiAgICAgIHJlYXNvbixcbiAgICAgIHVzYWdlOiBjdXJyZW50VXNhZ2UsXG4gICAgICBsaW1pdHM6IHBsYW5EYXRhLmxpbWl0c1xuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgY2hlY2tpbmcgdXNhZ2UgbGltaXRzOicsIGVycm9yKTtcbiAgICBcbiAgICAvLyBSZXR1cm4gcmVzdHJpY3RpdmUgZmFsbGJhY2tcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgNyk7XG4gICAgY29uc3QgZmFsbGJhY2tVc2FnZSA9IHtcbiAgICAgIG5vdGVzX2dlbmVyYXRlZDogOTk5LFxuICAgICAgdmlkZW9fbm90ZXNfY291bnQ6IDAsXG4gICAgICBmaWxlX25vdGVzX2NvdW50OiAwLFxuICAgICAgdGV4dF9ub3Rlc19jb3VudDogMCxcbiAgICAgIHRvdGFsX3NhdmVkX25vdGVzOiA5OTksXG4gICAgICBtb250aF95ZWFyOiBjdXJyZW50TW9udGhcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBjYW5HZW5lcmF0ZTogZmFsc2UsXG4gICAgICBjYW5TYXZlOiBmYWxzZSxcbiAgICAgIHJlYXNvbjogJ0Vycm9yIGNoZWNraW5nIHN1YnNjcmlwdGlvbiBsaW1pdHMuIFBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICAgIHVzYWdlOiBmYWxsYmFja1VzYWdlLFxuICAgICAgbGltaXRzOiB7IG5vdGVzX3Blcl9tb250aDogMiwgbWF4X3NhdmVkX25vdGVzOiAzLCBtYXhfdGV4dF9sZW5ndGg6IDUwMDAgfVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBJbmNyZW1lbnQgdXNlcidzIHVzYWdlIGNvdW50IGFmdGVyIHN1Y2Nlc3NmdWwgbm90ZSBnZW5lcmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbmNyZW1lbnRVc2FnZShcbiAgdXNlcklkOiBzdHJpbmcsIFxuICB0b2tlbjogc3RyaW5nLCBcbiAgbm90ZVR5cGU6ICd2aWRlbycgfCAnZmlsZScgfCAndGV4dCcgPSAndGV4dCdcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgICAgIGdsb2JhbDoge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgY3VycmVudE1vbnRoID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDcpO1xuICAgIGNvbnNvbGUubG9nKCdbU3Vic2NyaXB0aW9uXSBJbmNyZW1lbnRpbmcgdXNhZ2UgZm9yIHVzZXI6JywgdXNlcklkLCAndHlwZTonLCBub3RlVHlwZSlcblxuICAgIC8vIEdldCBjdXJyZW50IHVzYWdlXG4gICAgY29uc3QgeyBkYXRhOiBjdXJyZW50VXNhZ2UsIGVycm9yOiBmZXRjaEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3VzZXJfdXNhZ2UnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgICAuZXEoJ21vbnRoX3llYXInLCBjdXJyZW50TW9udGgpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZmV0Y2hFcnJvciAmJiBmZXRjaEVycm9yLmNvZGUgIT09ICdQR1JTVDExNicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIEVycm9yIGZldGNoaW5nIGN1cnJlbnQgdXNhZ2U6JywgZmV0Y2hFcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gUHJlcGFyZSB1cGRhdGUgZGF0YVxuICAgIGNvbnN0IHVwZGF0ZURhdGE6IGFueSA9IHtcbiAgICAgIG5vdGVzX2dlbmVyYXRlZDogKGN1cnJlbnRVc2FnZT8ubm90ZXNfZ2VuZXJhdGVkIHx8IDApICsgMSxcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICAvLyBJbmNyZW1lbnQgc3BlY2lmaWMgbm90ZSB0eXBlIGNvdW50ZXJcbiAgICBpZiAobm90ZVR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgIHVwZGF0ZURhdGEudmlkZW9fbm90ZXNfY291bnQgPSAoY3VycmVudFVzYWdlPy52aWRlb19ub3Rlc19jb3VudCB8fCAwKSArIDE7XG4gICAgfSBlbHNlIGlmIChub3RlVHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB1cGRhdGVEYXRhLmZpbGVfbm90ZXNfY291bnQgPSAoY3VycmVudFVzYWdlPy5maWxlX25vdGVzX2NvdW50IHx8IDApICsgMTtcbiAgICB9IGVsc2UgaWYgKG5vdGVUeXBlID09PSAndGV4dCcpIHtcbiAgICAgIHVwZGF0ZURhdGEudGV4dF9ub3Rlc19jb3VudCA9IChjdXJyZW50VXNhZ2U/LnRleHRfbm90ZXNfY291bnQgfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBvciBpbnNlcnQgdXNhZ2UgcmVjb3JkXG4gICAgaWYgKGN1cnJlbnRVc2FnZSkge1xuICAgICAgY29uc3QgeyBlcnJvcjogdXBkYXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd1c2VyX3VzYWdlJylcbiAgICAgICAgLnVwZGF0ZSh1cGRhdGVEYXRhKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgICAgIC5lcSgnbW9udGhfeWVhcicsIGN1cnJlbnRNb250aCk7XG5cbiAgICAgIGlmICh1cGRhdGVFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciB1cGRhdGluZyB1c2FnZTonLCB1cGRhdGVFcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIG5ldyB1c2FnZSByZWNvcmRcbiAgICAgIGNvbnN0IGluc2VydERhdGEgPSB7XG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgbW9udGhfeWVhcjogY3VycmVudE1vbnRoLFxuICAgICAgICBub3Rlc19nZW5lcmF0ZWQ6IDEsXG4gICAgICAgIHZpZGVvX25vdGVzX2NvdW50OiBub3RlVHlwZSA9PT0gJ3ZpZGVvJyA/IDEgOiAwLFxuICAgICAgICBmaWxlX25vdGVzX2NvdW50OiBub3RlVHlwZSA9PT0gJ2ZpbGUnID8gMSA6IDAsXG4gICAgICAgIHRleHRfbm90ZXNfY291bnQ6IG5vdGVUeXBlID09PSAndGV4dCcgPyAxIDogMCxcbiAgICAgICAgdG90YWxfc2F2ZWRfbm90ZXM6IDAsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGVycm9yOiBpbnNlcnRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3VzZXJfdXNhZ2UnKVxuICAgICAgICAuaW5zZXJ0KGluc2VydERhdGEpO1xuXG4gICAgICBpZiAoaW5zZXJ0RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgY3JlYXRpbmcgdXNhZ2UgcmVjb3JkOicsIGluc2VydEVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdbU3Vic2NyaXB0aW9uXSBTdWNjZXNzZnVsbHkgaW5jcmVtZW50ZWQgdXNhZ2UnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciBpbmNyZW1lbnRpbmcgdXNhZ2U6JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFVwZGF0ZSBzYXZlZCBub3RlcyBjb3VudCAodXNlZCB3aGVuIG5vdGVzIGFyZSBzYXZlZCBvciBkZWxldGVkKVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2F2ZWROb3Rlc0NvdW50KFxuICB1c2VySWQ6IHN0cmluZywgXG4gIHRva2VuOiBzdHJpbmcsIFxuICBjb3VudDogbnVtYmVyXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5LCB7XG4gICAgICBnbG9iYWw6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCA3KTtcbiAgICBjb25zb2xlLmxvZygnW1N1YnNjcmlwdGlvbl0gVXBkYXRpbmcgc2F2ZWQgbm90ZXMgY291bnQgZm9yIHVzZXI6JywgdXNlcklkLCAnY291bnQ6JywgY291bnQpXG5cbiAgICAvLyBVcHNlcnQgdGhlIHNhdmVkIG5vdGVzIGNvdW50XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VyX3VzYWdlJylcbiAgICAgIC51cHNlcnQoe1xuICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgIG1vbnRoX3llYXI6IGN1cnJlbnRNb250aCxcbiAgICAgICAgdG90YWxfc2F2ZWRfbm90ZXM6IE1hdGgubWF4KDAsIGNvdW50KSwgLy8gRW5zdXJlIG5vbi1uZWdhdGl2ZVxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0sIHtcbiAgICAgICAgb25Db25mbGljdDogJ3VzZXJfaWQsbW9udGhfeWVhcidcbiAgICAgIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciB1cGRhdGluZyBzYXZlZCBub3RlcyBjb3VudDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1tTdWJzY3JpcHRpb25dIFN1Y2Nlc3NmdWxseSB1cGRhdGVkIHNhdmVkIG5vdGVzIGNvdW50Jyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgdXBkYXRpbmcgc2F2ZWQgbm90ZXMgY291bnQ6JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJlZnJlc2ggc2F2ZWQgbm90ZXMgY291bnQgYnkgY291bnRpbmcgYWxsIG5vdGVzIGZyb20gYWxsIHRhYmxlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVmcmVzaFNhdmVkTm90ZXNDb3VudChcbiAgdXNlcklkOiBzdHJpbmcsXG4gIHRva2VuOiBzdHJpbmdcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgICAgIGdsb2JhbDoge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ1tTdWJzY3JpcHRpb25dIFJlZnJlc2hpbmcgc2F2ZWQgbm90ZXMgY291bnQgZm9yIHVzZXI6JywgdXNlcklkKTtcblxuICAgIC8vIENvdW50IG5vdGVzIGZyb20gYWxsIHRhYmxlcyBpbmNsdWRpbmcgdmlkZW9fdXBsb2FkX25vdGVzXG4gICAgY29uc3QgW3ZpZGVvUmVzdWx0LCBmaWxlUmVzdWx0LCB0ZXh0UmVzdWx0LCB1cGxvYWRWaWRlb1Jlc3VsdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndmlkZW9fbm90ZXMnKVxuICAgICAgICAuc2VsZWN0KCdpZCcsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSlcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKSxcbiAgICAgIHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdmaWxlX25vdGVzJylcbiAgICAgICAgLnNlbGVjdCgnaWQnLCB7IGNvdW50OiAnZXhhY3QnLCBoZWFkOiB0cnVlIH0pXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCksXG4gICAgICBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndGV4dF9ub3RlcycpXG4gICAgICAgIC5zZWxlY3QoJ2lkJywgeyBjb3VudDogJ2V4YWN0JywgaGVhZDogdHJ1ZSB9KVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpLFxuICAgICAgLy8gSGFuZGxlIHZpZGVvX3VwbG9hZF9ub3RlcyB0YWJsZSB0aGF0IG1pZ2h0IG5vdCBleGlzdCBpbiBhbGwgZW52aXJvbm1lbnRzXG4gICAgICBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndmlkZW9fdXBsb2FkX25vdGVzJylcbiAgICAgICAgLnNlbGVjdCgnaWQnLCB7IGNvdW50OiAnZXhhY3QnLCBoZWFkOiB0cnVlIH0pXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgcmVzdWx0ID0+IHJlc3VsdCxcbiAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tTdWJzY3JpcHRpb25dIHZpZGVvX3VwbG9hZF9ub3RlcyB0YWJsZSBtaWdodCBub3QgZXhpc3Q6JywgZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgIHJldHVybiB7IGNvdW50OiAwIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICBdKTtcblxuICAgIGNvbnN0IHZpZGVvQ291bnQgPSB2aWRlb1Jlc3VsdC5jb3VudCB8fCAwO1xuICAgIGNvbnN0IGZpbGVDb3VudCA9IGZpbGVSZXN1bHQuY291bnQgfHwgMDtcbiAgICBjb25zdCB0ZXh0Q291bnQgPSB0ZXh0UmVzdWx0LmNvdW50IHx8IDA7XG4gICAgY29uc3QgdXBsb2FkVmlkZW9Db3VudCA9IHVwbG9hZFZpZGVvUmVzdWx0LmNvdW50IHx8IDA7XG4gICAgY29uc3QgdG90YWxDb3VudCA9IHZpZGVvQ291bnQgKyBmaWxlQ291bnQgKyB0ZXh0Q291bnQgKyB1cGxvYWRWaWRlb0NvdW50O1xuXG4gICAgY29uc29sZS5sb2coJ1tTdWJzY3JpcHRpb25dIE5vdGUgY291bnRzOicsIHtcbiAgICAgIHZpZGVvOiB2aWRlb0NvdW50LFxuICAgICAgZmlsZTogZmlsZUNvdW50LFxuICAgICAgdGV4dDogdGV4dENvdW50LFxuICAgICAgdmlkZW9fdXBsb2FkOiB1cGxvYWRWaWRlb0NvdW50LFxuICAgICAgdG90YWw6IHRvdGFsQ291bnRcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgdXNhZ2UgcmVjb3JkIHdpdGggdGhlIGFjdHVhbCBjb3VudFxuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCA3KTtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3VzZXJfdXNhZ2UnKVxuICAgICAgLnVwc2VydCh7XG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgbW9udGhfeWVhcjogY3VycmVudE1vbnRoLFxuICAgICAgICB0b3RhbF9zYXZlZF9ub3RlczogdG90YWxDb3VudCxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9LCB7XG4gICAgICAgIG9uQ29uZmxpY3Q6ICd1c2VyX2lkLG1vbnRoX3llYXInXG4gICAgICB9KTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgdXBkYXRpbmcgc2F2ZWQgbm90ZXMgY291bnQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdbU3Vic2NyaXB0aW9uXSBTdWNjZXNzZnVsbHkgcmVmcmVzaGVkIHNhdmVkIG5vdGVzIGNvdW50IHRvOicsIHRvdGFsQ291bnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIEVycm9yIHJlZnJlc2hpbmcgc2F2ZWQgbm90ZXMgY291bnQ6JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBwbGFuIHByaWNpbmcgd2l0aCBkaXNjb3VudCBjYWxjdWxhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGxhblByaWNpbmcocGxhbjogU3Vic2NyaXB0aW9uUGxhbikge1xuICBjb25zdCBtb250aGx5UHJpY2UgPSBwbGFuLnByaWNlX21vbnRobHk7XG4gIGNvbnN0IHllYXJseVByaWNlID0gcGxhbi5wcmljZV95ZWFybHk7XG4gIGNvbnN0IHllYXJseU1vbnRobHlFcXVpdmFsZW50ID0geWVhcmx5UHJpY2UgLyAxMjtcbiAgY29uc3QgZGlzY291bnRQZXJjZW50YWdlID0gbW9udGhseVByaWNlID4gMCA/IE1hdGgucm91bmQoKDEgLSB5ZWFybHlNb250aGx5RXF1aXZhbGVudCAvIG1vbnRobHlQcmljZSkgKiAxMDApIDogMDtcbiAgY29uc3QgeWVhcmx5U2F2aW5ncyA9IChtb250aGx5UHJpY2UgKiAxMikgLSB5ZWFybHlQcmljZTtcbiAgXG4gIHJldHVybiB7XG4gICAgbW9udGhseTogbW9udGhseVByaWNlLFxuICAgIHllYXJseTogeWVhcmx5UHJpY2UsXG4gICAgeWVhcmx5TW9udGhseUVxdWl2YWxlbnQsXG4gICAgZGlzY291bnRQZXJjZW50YWdlLFxuICAgIHllYXJseVNhdmluZ3MsXG4gICAgY3VycmVuY3k6IHBsYW4uY3VycmVuY3lcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB1c2VyIGhhcyBhY2Nlc3MgdG8gYSBzcGVjaWZpYyBmZWF0dXJlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYXNGZWF0dXJlQWNjZXNzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgdG9rZW46IHN0cmluZyxcbiAgZmVhdHVyZToga2V5b2YgU3Vic2NyaXB0aW9uUGxhblsnZmVhdHVyZXMnXVxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgZ2V0VXNlclN1YnNjcmlwdGlvbih1c2VySWQsIHRva2VuKTtcbiAgICBcbiAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgLy8gRGVmYXVsdCBmcmVlIHBsYW4gZmVhdHVyZXNcbiAgICAgIGNvbnN0IGZyZWVGZWF0dXJlcyA9IHtcbiAgICAgICAgbm90ZXNfZ2VuZXJhdGlvbjogdHJ1ZSxcbiAgICAgICAgcXVpenplczogZmFsc2UsXG4gICAgICAgIHlvdXR1YmVfc3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgcHB0X3N1cHBvcnQ6IGZhbHNlLFxuICAgICAgICBleHBvcnQ6IGZhbHNlLFxuICAgICAgICBjb3B5X3Bhc3RlOiB0cnVlLFxuICAgICAgICB1cGxvYWRfdmlkZW86IGZhbHNlLFxuICAgICAgICBwcmlvcml0eV9nZW5lcmF0aW9uOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGZyZWVGZWF0dXJlc1tmZWF0dXJlXSB8fCBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5mZWF0dXJlc1tmZWF0dXJlXSB8fCBmYWxzZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciBjaGVja2luZyBmZWF0dXJlIGFjY2VzczonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBEZWZhdWx0IHRvIG5vIGFjY2VzcyBvbiBlcnJvclxuICB9XG59XG5cbi8qKlxuICogQXNzaWduIHN1YnNjcmlwdGlvbiB0byB1c2VyIGFmdGVyIHN1Y2Nlc3NmdWwgcGF5bWVudFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzaWduVXNlclN1YnNjcmlwdGlvbihcbiAgdXNlcklkOiBzdHJpbmcsXG4gIHRva2VuOiBzdHJpbmcsXG4gIHBsYW5JZDogc3RyaW5nLFxuICBiaWxsaW5nQ3ljbGU6ICdtb250aGx5JyB8ICd5ZWFybHknLFxuICBwYXltZW50RGF0YT86IHtcbiAgICBzdHJpcGVTdWJzY3JpcHRpb25JZD86IHN0cmluZztcbiAgICBzdHJpcGVDdXN0b21lcklkPzogc3RyaW5nO1xuICB9XG4pOiBQcm9taXNlPFVzZXJTdWJzY3JpcHRpb24gfCBudWxsPiB7XG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgICBnbG9iYWw6IHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2FsY3VsYXRlIHBlcmlvZCBkYXRlc1xuICAgIGNvbnN0IGN1cnJlbnRQZXJpb2RTdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgY3VycmVudFBlcmlvZEVuZCA9IG5ldyBEYXRlKCk7XG4gICAgXG4gICAgaWYgKGJpbGxpbmdDeWNsZSA9PT0gJ3llYXJseScpIHtcbiAgICAgIGN1cnJlbnRQZXJpb2RFbmQuc2V0RnVsbFllYXIoY3VycmVudFBlcmlvZEVuZC5nZXRGdWxsWWVhcigpICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRQZXJpb2RFbmQuc2V0TW9udGgoY3VycmVudFBlcmlvZEVuZC5nZXRNb250aCgpICsgMSk7XG4gICAgfVxuXG4gICAgLy8gUHJlcGFyZSBzdWJzY3JpcHRpb24gZGF0YVxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbkRhdGEgPSB7XG4gICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICBwbGFuX2lkOiBwbGFuSWQsXG4gICAgICBiaWxsaW5nX2N5Y2xlOiBiaWxsaW5nQ3ljbGUsXG4gICAgICBzdGF0dXM6ICdhY3RpdmUnIGFzIGNvbnN0LFxuICAgICAgY3VycmVudF9wZXJpb2Rfc3RhcnQ6IGN1cnJlbnRQZXJpb2RTdGFydC50b0lTT1N0cmluZygpLFxuICAgICAgY3VycmVudF9wZXJpb2RfZW5kOiBjdXJyZW50UGVyaW9kRW5kLnRvSVNPU3RyaW5nKCksXG4gICAgICBjYW5jZWxfYXRfcGVyaW9kX2VuZDogZmFsc2UsXG4gICAgICBzdHJpcGVfc3Vic2NyaXB0aW9uX2lkOiBwYXltZW50RGF0YT8uc3RyaXBlU3Vic2NyaXB0aW9uSWQgfHwgbnVsbCxcbiAgICAgIHN0cmlwZV9jdXN0b21lcl9pZDogcGF5bWVudERhdGE/LnN0cmlwZUN1c3RvbWVySWQgfHwgbnVsbCxcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICAvLyBVcHNlcnQgc3Vic2NyaXB0aW9uICh1cGRhdGUgaWYgZXhpc3RzLCBpbnNlcnQgaWYgbmV3KVxuICAgIGNvbnN0IHsgZGF0YTogc3Vic2NyaXB0aW9uLCBlcnJvcjogc3Vic2NyaXB0aW9uRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcl9zdWJzY3JpcHRpb25zJylcbiAgICAgIC51cHNlcnQoc3Vic2NyaXB0aW9uRGF0YSwge1xuICAgICAgICBvbkNvbmZsaWN0OiAndXNlcl9pZCdcbiAgICAgIH0pXG4gICAgICAuc2VsZWN0KGBcbiAgICAgICAgaWQsXG4gICAgICAgIHBsYW5faWQsXG4gICAgICAgIGJpbGxpbmdfY3ljbGUsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgY3VycmVudF9wZXJpb2RfZW5kLFxuICAgICAgICBzdWJzY3JpcHRpb25fcGxhbnMgKFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgZGlzcGxheV9uYW1lLFxuICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgIGxpbWl0cyxcbiAgICAgICAgICBwcmljZV9tb250aGx5LFxuICAgICAgICAgIHByaWNlX3llYXJseVxuICAgICAgICApXG4gICAgICBgKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKHN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU3Vic2NyaXB0aW9uXSBFcnJvciBhc3NpZ25pbmcgc3Vic2NyaXB0aW9uOicsIHN1YnNjcmlwdGlvbkVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGFzc2lnbiBzdWJzY3JpcHRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoIXN1YnNjcmlwdGlvbiB8fCAhc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbl9wbGFucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgc3Vic2NyaXB0aW9uIGRldGFpbHMnKTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHVzYWdlIHRyYWNraW5nIGZvciBjdXJyZW50IG1vbnRoXG4gICAgY29uc3QgY3VycmVudE1vbnRoID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDcpO1xuICAgIGNvbnN0IHsgZXJyb3I6IHVzYWdlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcl91c2FnZScpXG4gICAgICAudXBzZXJ0KHtcbiAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICBtb250aF95ZWFyOiBjdXJyZW50TW9udGgsXG4gICAgICAgIG5vdGVzX2dlbmVyYXRlZDogMCxcbiAgICAgICAgdmlkZW9fbm90ZXNfY291bnQ6IDAsXG4gICAgICAgIGZpbGVfbm90ZXNfY291bnQ6IDAsXG4gICAgICAgIHRleHRfbm90ZXNfY291bnQ6IDAsXG4gICAgICAgIHRvdGFsX3NhdmVkX25vdGVzOiAwLFxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0sIHtcbiAgICAgICAgb25Db25mbGljdDogJ3VzZXJfaWQsbW9udGhfeWVhcicsXG4gICAgICAgIGlnbm9yZUR1cGxpY2F0ZXM6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgaWYgKHVzYWdlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIFdhcm5pbmc6IEZhaWxlZCB0byBpbml0aWFsaXplIHVzYWdlIHRyYWNraW5nOicsIHVzYWdlRXJyb3IpO1xuICAgICAgLy8gRG9uJ3QgdGhyb3cgZXJyb3IgaGVyZSBhcyBzdWJzY3JpcHRpb24gYXNzaWdubWVudCB3YXMgc3VjY2Vzc2Z1bFxuICAgIH1cblxuICAgIGNvbnN0IHBsYW5EYXRhID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbl9wbGFucyBhcyBhbnk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YnNjcmlwdGlvbl9pZDogc3Vic2NyaXB0aW9uLmlkLFxuICAgICAgcGxhbl9pZDogc3Vic2NyaXB0aW9uLnBsYW5faWQsXG4gICAgICBwbGFuX25hbWU6IHBsYW5EYXRhLm5hbWUsXG4gICAgICBwbGFuX2Rpc3BsYXlfbmFtZTogcGxhbkRhdGEuZGlzcGxheV9uYW1lLFxuICAgICAgYmlsbGluZ19jeWNsZTogc3Vic2NyaXB0aW9uLmJpbGxpbmdfY3ljbGUsXG4gICAgICBzdGF0dXM6IHN1YnNjcmlwdGlvbi5zdGF0dXMsXG4gICAgICBjdXJyZW50X3BlcmlvZF9lbmQ6IHN1YnNjcmlwdGlvbi5jdXJyZW50X3BlcmlvZF9lbmQsXG4gICAgICBmZWF0dXJlczogcGxhbkRhdGEuZmVhdHVyZXMsXG4gICAgICBsaW1pdHM6IHBsYW5EYXRhLmxpbWl0cyxcbiAgICAgIHByaWNlX21vbnRobHk6IHBsYW5EYXRhLnByaWNlX21vbnRobHksXG4gICAgICBwcmljZV95ZWFybHk6IHBsYW5EYXRhLnByaWNlX3llYXJseVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgaW4gYXNzaWduVXNlclN1YnNjcmlwdGlvbjonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0gIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiZ2V0U3Vic2NyaXB0aW9uUGxhbnMiLCJzdXBhYmFzZSIsImRhdGEiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJlcSIsIm9yZGVyIiwiYXNjZW5kaW5nIiwiY29uc29sZSIsIkVycm9yIiwiZ2V0VXNlclN1YnNjcmlwdGlvbiIsInVzZXJJZCIsInRva2VuIiwiZ2xvYmFsIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJ1c2VyU3ViIiwic2luZ2xlIiwic3Vic2NyaXB0aW9uX3BsYW5zIiwicGxhbkRhdGEiLCJzdWJzY3JpcHRpb25faWQiLCJpZCIsInBsYW5faWQiLCJwbGFuX25hbWUiLCJuYW1lIiwicGxhbl9kaXNwbGF5X25hbWUiLCJkaXNwbGF5X25hbWUiLCJiaWxsaW5nX2N5Y2xlIiwic3RhdHVzIiwiY3VycmVudF9wZXJpb2RfZW5kIiwiZmVhdHVyZXMiLCJsaW1pdHMiLCJwcmljZV9tb250aGx5IiwicHJpY2VfeWVhcmx5IiwiZ2V0U3Vic2NyaXB0aW9uUGxhbiIsInBsYW5JZCIsImNoZWNrVXNhZ2VMaW1pdHMiLCJub3RlVHlwZSIsImxvZyIsInN1YkVycm9yIiwiY3VycmVudE1vbnRoIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2xpY2UiLCJ1c2FnZSIsInVzYWdlRXJyb3IiLCJmcmVlUGxhbkxpbWl0cyIsIm5vdGVzX3Blcl9tb250aCIsIm1heF9zYXZlZF9ub3RlcyIsIm1heF90ZXh0X2xlbmd0aCIsImN1cnJlbnRVc2FnZSIsIm5vdGVzX2dlbmVyYXRlZCIsInZpZGVvX25vdGVzX2NvdW50IiwiZmlsZV9ub3Rlc19jb3VudCIsInRleHRfbm90ZXNfY291bnQiLCJ0b3RhbF9zYXZlZF9ub3RlcyIsIm1vbnRoX3llYXIiLCJjcmVhdGVVc2FnZUVycm9yIiwiaW5zZXJ0IiwidXNlcl9pZCIsInVwZGF0ZWRfYXQiLCJjcmVhdGVTdWJFcnJvciIsImN1cnJlbnRfcGVyaW9kX3N0YXJ0Iiwibm93IiwiY2FuR2VuZXJhdGUiLCJjYW5TYXZlIiwicmVhc29uIiwidW5kZWZpbmVkIiwic3Vic2NyaXB0aW9uIiwicGxhbkxpbWl0cyIsIm1vbnRobHlMaW1pdCIsImZhbGxiYWNrVXNhZ2UiLCJpbmNyZW1lbnRVc2FnZSIsImZldGNoRXJyb3IiLCJjb2RlIiwidXBkYXRlRGF0YSIsInVwZGF0ZUVycm9yIiwidXBkYXRlIiwiaW5zZXJ0RGF0YSIsImNyZWF0ZWRfYXQiLCJpbnNlcnRFcnJvciIsInVwZGF0ZVNhdmVkTm90ZXNDb3VudCIsImNvdW50IiwidXBzZXJ0IiwiTWF0aCIsIm1heCIsIm9uQ29uZmxpY3QiLCJyZWZyZXNoU2F2ZWROb3Rlc0NvdW50IiwidmlkZW9SZXN1bHQiLCJmaWxlUmVzdWx0IiwidGV4dFJlc3VsdCIsInVwbG9hZFZpZGVvUmVzdWx0IiwiUHJvbWlzZSIsImFsbCIsImhlYWQiLCJ0aGVuIiwicmVzdWx0Iiwid2FybiIsIm1lc3NhZ2UiLCJ2aWRlb0NvdW50IiwiZmlsZUNvdW50IiwidGV4dENvdW50IiwidXBsb2FkVmlkZW9Db3VudCIsInRvdGFsQ291bnQiLCJ2aWRlbyIsImZpbGUiLCJ0ZXh0IiwidmlkZW9fdXBsb2FkIiwidG90YWwiLCJnZXRQbGFuUHJpY2luZyIsInBsYW4iLCJtb250aGx5UHJpY2UiLCJ5ZWFybHlQcmljZSIsInllYXJseU1vbnRobHlFcXVpdmFsZW50IiwiZGlzY291bnRQZXJjZW50YWdlIiwicm91bmQiLCJ5ZWFybHlTYXZpbmdzIiwibW9udGhseSIsInllYXJseSIsImN1cnJlbmN5IiwiaGFzRmVhdHVyZUFjY2VzcyIsImZlYXR1cmUiLCJmcmVlRmVhdHVyZXMiLCJub3Rlc19nZW5lcmF0aW9uIiwicXVpenplcyIsInlvdXR1YmVfc3VwcG9ydCIsInBwdF9zdXBwb3J0IiwiZXhwb3J0IiwiY29weV9wYXN0ZSIsInVwbG9hZF92aWRlbyIsInByaW9yaXR5X2dlbmVyYXRpb24iLCJhc3NpZ25Vc2VyU3Vic2NyaXB0aW9uIiwiYmlsbGluZ0N5Y2xlIiwicGF5bWVudERhdGEiLCJjdXJyZW50UGVyaW9kU3RhcnQiLCJjdXJyZW50UGVyaW9kRW5kIiwic2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJzdWJzY3JpcHRpb25EYXRhIiwiY2FuY2VsX2F0X3BlcmlvZF9lbmQiLCJzdHJpcGVfc3Vic2NyaXB0aW9uX2lkIiwic3RyaXBlU3Vic2NyaXB0aW9uSWQiLCJzdHJpcGVfY3VzdG9tZXJfaWQiLCJzdHJpcGVDdXN0b21lcklkIiwic3Vic2NyaXB0aW9uRXJyb3IiLCJpZ25vcmVEdXBsaWNhdGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/services/subscription.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/videoTranscription.ts":
/*!********************************************!*\
  !*** ./src/services/videoTranscription.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupTempDirectory: () => (/* binding */ cleanupTempDirectory),\n/* harmony export */   createTempDirectory: () => (/* binding */ createTempDirectory),\n/* harmony export */   getVideoInfo: () => (/* binding */ getVideoInfo),\n/* harmony export */   transcribeVideoFile: () => (/* binding */ transcribeVideoFile),\n/* harmony export */   validateVideoFile: () => (/* binding */ validateVideoFile)\n/* harmony export */ });\n/* harmony import */ var fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fluent-ffmpeg */ \"(rsc)/./node_modules/fluent-ffmpeg/index.js\");\n/* harmony import */ var fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs-extra */ \"(rsc)/./node_modules/fs-extra/lib/index.js\");\n/* harmony import */ var fs_extra__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs_extra__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n\n\n// Configure FFmpeg to use system binaries\nconst ffmpegPath = \"/usr/bin/ffmpeg\";\nconst ffprobePath = \"/usr/bin/ffprobe\";\n// Set FFmpeg paths for Render deployment\nlet ffmpegPathSet = false;\nlet ffprobePathSet = false;\n// Set up FFmpeg path - prioritize system paths for production deployment\ntry {\n    // For production (Render), use system paths\n    if (false) {} else {\n        // For development, try to find FFmpeg in common locations\n        const commonPaths = [\n            // System paths (assuming ffmpeg and ffprobe are in the same dir)\n            {\n                ffmpeg: \"/usr/local/bin/ffmpeg\",\n                ffprobe: \"/usr/local/bin/ffprobe\"\n            },\n            {\n                ffmpeg: \"/usr/bin/ffmpeg\",\n                ffprobe: \"/usr/bin/ffprobe\"\n            },\n            {\n                ffmpeg: \"/opt/homebrew/bin/ffmpeg\",\n                ffprobe: \"/opt/homebrew/bin/ffprobe\"\n            },\n            {\n                ffmpeg: \"ffmpeg\",\n                ffprobe: \"ffprobe\"\n            } // Use PATH\n        ];\n        for (const paths of commonPaths){\n            try {\n                if (!ffmpegPathSet && (paths.ffmpeg === \"ffmpeg\" || fs_extra__WEBPACK_IMPORTED_MODULE_2___default().existsSync(paths.ffmpeg))) {\n                    fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().setFfmpegPath(paths.ffmpeg);\n                    console.log(\"[VideoTranscription] Using FFmpeg at:\", paths.ffmpeg);\n                    ffmpegPathSet = true;\n                }\n                if (!ffprobePathSet && (paths.ffprobe === \"ffprobe\" || fs_extra__WEBPACK_IMPORTED_MODULE_2___default().existsSync(paths.ffprobe))) {\n                    fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().setFfprobePath(paths.ffprobe);\n                    console.log(\"[VideoTranscription] Using FFprobe at:\", paths.ffprobe);\n                    ffprobePathSet = true;\n                }\n                if (ffmpegPathSet && ffprobePathSet) break;\n            } catch (error) {\n                console.warn(\"[VideoTranscription] Could not use FFmpeg/FFprobe at:\", paths);\n            }\n        }\n    }\n} catch (error) {\n    console.error(\"[VideoTranscription] Error setting FFmpeg paths:\", error);\n}\nif (!ffmpegPathSet) {\n    console.error(\"[VideoTranscription] ⚠️  Could not find FFmpeg! Video processing may fail for extraction.\");\n}\nif (!ffprobePathSet) {\n    console.error(\"[VideoTranscription] ⚠️  Could not find FFprobe! Video validation/info may fail.\");\n}\n/**\n * Tests if FFmpeg and FFprobe are available and working\n */ async function testFFmpegAvailability() {\n    const results = {\n        ffmpeg: false,\n        ffprobe: false\n    };\n    return new Promise((resolve)=>{\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().getAvailableFormats((err)=>{\n            if (err) {\n                console.error(\"[VideoTranscription] FFmpeg test failed:\", err.message);\n            } else {\n                console.log(\"[VideoTranscription] FFmpeg test passed (formats check)\");\n                results.ffmpeg = true;\n            }\n            // Test ffprobe by trying to get info from a dummy/non-existent file path\n            // We expect an error, but not 'ffprobe not found'\n            fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().ffprobe(\"dummy_test_file.mp4\", (probeErr, metadata)=>{\n                if (probeErr && probeErr.message.toLowerCase().includes(\"cannot find ffprobe\")) {\n                    console.error(\"[VideoTranscription] FFprobe test failed: ffprobe not found\");\n                } else if (probeErr && probeErr.message.toLowerCase().includes(\"no such file\")) {\n                    console.log(\"[VideoTranscription] FFprobe test passed (expected error on dummy file)\");\n                    results.ffprobe = true;\n                } else if (!probeErr) {\n                    console.log(\"[VideoTranscription] FFprobe test passed (unexpected success on dummy file, but ok)\");\n                    results.ffprobe = true;\n                } else {\n                    console.error(\"[VideoTranscription] FFprobe test returned unexpected error:\", probeErr.message);\n                }\n                resolve(results);\n            });\n        });\n    });\n}\n// Initialize OpenAI client for Whisper API\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Extracts audio from video file and transcribes it using OpenAI Whisper API\n */ async function transcribeVideoFile(videoFilePath, outputDir, progressCallback) {\n    const tempDir = outputDir || path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"temp\", \"video-processing\");\n    const audioFileName = `audio_${Date.now()}.mp3`;\n    const audioFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, audioFileName);\n    try {\n        // Test FFmpeg availability first\n        console.log(\"[VideoTranscription] Testing FFmpeg/FFprobe availability...\");\n        const { ffmpeg: ffmpegAvailable, ffprobe: ffprobeAvailable } = await testFFmpegAvailability();\n        if (!ffmpegAvailable) {\n            return {\n                transcript: \"\",\n                error: \"FFmpeg (for audio extraction) is not available. Please ensure FFmpeg is properly installed and accessible.\"\n            };\n        }\n        // FFprobe is used for validation and info, can proceed with extraction if only ffprobe is missing but warn.\n        if (!ffprobeAvailable) {\n            console.warn(\"[VideoTranscription] FFprobe not available. Video validation and info might be incomplete, but attempting audio extraction.\");\n        }\n        // Ensure temp directory exists\n        await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().ensureDir(tempDir);\n        // Step 1: Extract audio from video\n        console.log(\"[VideoTranscription] Extracting audio from video...\");\n        progressCallback?.({\n            step: \"extracting\",\n            progress: 0,\n            message: \"Extracting audio from video...\"\n        });\n        await extractAudioFromVideo(videoFilePath, audioFilePath, (progress)=>{\n            progressCallback?.({\n                step: \"extracting\",\n                progress,\n                message: `Extracting audio: ${progress}%`\n            });\n        });\n        progressCallback?.({\n            step: \"extracting\",\n            progress: 100,\n            message: \"Audio extraction complete\"\n        });\n        // Step 2: Check if audio needs to be chunked and transcribe\n        console.log(\"[VideoTranscription] Checking audio file size and preparing for transcription...\");\n        // Check audio file size first\n        const audioStats = await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().stat(audioFilePath);\n        console.log(`[VideoTranscription] Audio file size: ${(audioStats.size / 1024 / 1024).toFixed(2)} MB`);\n        let transcriptionResult;\n        if (audioStats.size > 15 * 1024 * 1024) {\n            console.log(\"[VideoTranscription] Audio file is large, using chunking approach...\");\n            progressCallback?.({\n                step: \"transcribing\",\n                progress: 0,\n                message: \"Preparing large audio file for transcription...\"\n            });\n            // Split audio into chunks\n            const chunkPaths = await splitAudioIntoChunks(audioFilePath);\n            progressCallback?.({\n                step: \"transcribing\",\n                progress: 25,\n                message: `Transcribing audio in ${chunkPaths.length} chunks...`\n            });\n            // Transcribe all chunks\n            transcriptionResult = await transcribeAudioChunks(chunkPaths);\n        } else {\n            console.log(\"[VideoTranscription] Audio file is small enough, using direct transcription...\");\n            progressCallback?.({\n                step: \"transcribing\",\n                progress: 0,\n                message: \"Transcribing audio with AI...\"\n            });\n            // Use direct transcription for smaller files\n            transcriptionResult = await transcribeAudioWithWhisper(audioFilePath);\n        }\n        progressCallback?.({\n            step: \"transcribing\",\n            progress: 100,\n            message: \"Transcription complete\"\n        });\n        // Cleanup: Remove temporary audio file\n        try {\n            await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().remove(audioFilePath);\n        } catch (cleanupError) {\n            console.warn(\"[VideoTranscription] Failed to cleanup audio file:\", cleanupError);\n        }\n        progressCallback?.({\n            step: \"complete\",\n            progress: 100,\n            message: \"Video processing complete\"\n        });\n        return transcriptionResult;\n    } catch (error) {\n        console.error(\"[VideoTranscription] Error:\", error);\n        // Cleanup on error\n        try {\n            await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().remove(audioFilePath);\n        } catch (cleanupError) {\n            console.warn(\"[VideoTranscription] Failed to cleanup after error:\", cleanupError);\n        }\n        return {\n            transcript: \"\",\n            error: error instanceof Error ? error.message : \"Unknown transcription error\"\n        };\n    }\n}\n/**\n * Extracts audio from video file using FFmpeg\n */ async function extractAudioFromVideo(videoPath, outputPath, progressCallback) {\n    return new Promise((resolve, reject)=>{\n        let duration = null;\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default()(videoPath).audioCodec(\"libmp3lame\") // Use MP3 compression instead of uncompressed WAV\n        .audioBitrate(\"48k\") // Even lower bitrate for speech (was 64k)\n        .audioChannels(1) // Mono audio for efficiency\n        .audioFrequency(16000) // 16kHz sample rate (optimal for speech)\n        .format(\"mp3\") // Use MP3 format to save space\n        .on(\"codecData\", (data)=>{\n            // Get duration for progress calculation\n            const durationMatch = data.duration.match(/(\\d+):(\\d+):(\\d+\\.\\d+)/);\n            if (durationMatch) {\n                const hours = parseInt(durationMatch[1]);\n                const minutes = parseInt(durationMatch[2]);\n                const seconds = parseFloat(durationMatch[3]);\n                duration = hours * 3600 + minutes * 60 + seconds;\n            }\n        }).on(\"progress\", (progress)=>{\n            if (duration && progressCallback && progress.timemark) {\n                // Parse timemark which is in format \"HH:MM:SS.ms\"\n                const timeMatch = progress.timemark.toString().match(/(\\d+):(\\d+):(\\d+\\.\\d+)/);\n                if (timeMatch) {\n                    const hours = parseInt(timeMatch[1]);\n                    const minutes = parseInt(timeMatch[2]);\n                    const seconds = parseFloat(timeMatch[3]);\n                    const currentTime = hours * 3600 + minutes * 60 + seconds;\n                    const percent = Math.min(100, Math.round(currentTime / duration * 100));\n                    progressCallback(percent);\n                }\n            }\n        }).on(\"end\", ()=>{\n            console.log(\"[VideoTranscription] Audio extraction completed\");\n            resolve();\n        }).on(\"error\", (error)=>{\n            console.error(\"[VideoTranscription] FFmpeg error:\", error);\n            // Provide more specific error messages based on the type of error\n            let errorMessage = `Audio extraction failed: ${error.message}`;\n            if (error.message.includes(\"Cannot find ffmpeg\")) {\n                errorMessage = \"Cannot find ffmpeg. Please ensure FFmpeg is properly installed.\";\n                console.error(\"[VideoTranscription] FFmpeg not found. Installed paths checked:\");\n                console.error(\"[VideoTranscription] - @ffmpeg-installer path:\", ffmpegPathSet ? \"Found\" : \"Not found\");\n                console.error(\"[VideoTranscription] - System paths checked: /usr/local/bin/ffmpeg, /usr/bin/ffmpeg, /opt/homebrew/bin/ffmpeg\");\n            } else if (error.message.includes(\"No such file\")) {\n                errorMessage = `Input video file not found: ${videoPath}`;\n            } else if (error.message.includes(\"Invalid data\")) {\n                errorMessage = \"Invalid video file format or corrupted file\";\n            } else if (error.message.includes(\"Permission denied\")) {\n                errorMessage = \"Permission denied accessing video file or output directory\";\n            }\n            reject(new Error(errorMessage));\n        }).save(outputPath);\n    });\n}\n/**\n * Splits audio file into chunks if it's too large for Whisper API\n */ async function splitAudioIntoChunks(audioFilePath, maxSizeBytes = 15 * 1024 * 1024 // 15MB to be safe (Whisper limit is 25MB)\n) {\n    const audioStats = await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().stat(audioFilePath);\n    if (audioStats.size <= maxSizeBytes) {\n        // File is small enough, return as single chunk\n        return [\n            audioFilePath\n        ];\n    }\n    console.log(`[VideoTranscription] Audio file too large (${(audioStats.size / 1024 / 1024).toFixed(2)}MB), splitting into chunks...`);\n    // Calculate chunk duration based on file size\n    // Estimate: assume roughly 1MB per minute of audio at current settings\n    const estimatedDurationMinutes = audioStats.size / (1024 * 1024);\n    const maxChunkDurationMinutes = maxSizeBytes / (1024 * 1024); // Rough estimate\n    const numberOfChunks = Math.ceil(estimatedDurationMinutes / maxChunkDurationMinutes);\n    console.log(`[VideoTranscription] Estimated duration: ${estimatedDurationMinutes.toFixed(1)} minutes, creating ${numberOfChunks} chunks`);\n    const chunkPaths = [];\n    const baseDir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(audioFilePath);\n    const baseName = path__WEBPACK_IMPORTED_MODULE_1___default().basename(audioFilePath, path__WEBPACK_IMPORTED_MODULE_1___default().extname(audioFilePath));\n    // Split audio into chunks\n    for(let i = 0; i < numberOfChunks; i++){\n        const chunkPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(baseDir, `${baseName}_chunk_${i}.mp3`);\n        const startTime = i * maxChunkDurationMinutes * 60; // Convert to seconds\n        await new Promise((resolve, reject)=>{\n            fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default()(audioFilePath).seekInput(startTime).duration(maxChunkDurationMinutes * 60) // Duration in seconds\n            .audioCodec(\"libmp3lame\").audioBitrate(\"48k\") // Match the main extraction bitrate\n            .audioChannels(1).audioFrequency(16000).format(\"mp3\").on(\"end\", ()=>{\n                console.log(`[VideoTranscription] Created chunk ${i + 1}/${numberOfChunks}: ${chunkPath}`);\n                resolve();\n            }).on(\"error\", (error)=>{\n                console.error(`[VideoTranscription] Error creating chunk ${i + 1}:`, error);\n                reject(new Error(`Failed to create audio chunk ${i + 1}: ${error.message}`));\n            }).save(chunkPath);\n        });\n        // Verify chunk was created and has reasonable size\n        try {\n            const chunkStats = await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().stat(chunkPath);\n            if (chunkStats.size > 0) {\n                chunkPaths.push(chunkPath);\n            } else {\n                console.warn(`[VideoTranscription] Chunk ${i + 1} is empty, skipping`);\n            }\n        } catch (error) {\n            console.warn(`[VideoTranscription] Chunk ${i + 1} was not created properly, skipping`);\n        }\n    }\n    console.log(`[VideoTranscription] Successfully created ${chunkPaths.length} audio chunks`);\n    return chunkPaths;\n}\n/**\n * Transcribes multiple audio chunks and combines the results\n */ async function transcribeAudioChunks(chunkPaths) {\n    if (chunkPaths.length === 1) {\n        // Single chunk, use existing function\n        return await transcribeAudioWithWhisper(chunkPaths[0]);\n    }\n    console.log(`[VideoTranscription] Transcribing ${chunkPaths.length} audio chunks...`);\n    const transcripts = [];\n    let totalDuration = 0;\n    for(let i = 0; i < chunkPaths.length; i++){\n        const chunkPath = chunkPaths[i];\n        console.log(`[VideoTranscription] Transcribing chunk ${i + 1}/${chunkPaths.length}: ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(chunkPath)}`);\n        try {\n            const chunkResult = await transcribeAudioWithWhisper(chunkPath);\n            if (chunkResult.error) {\n                console.error(`[VideoTranscription] Error transcribing chunk ${i + 1}:`, chunkResult.error);\n                return {\n                    transcript: \"\",\n                    error: `Failed to transcribe audio chunk ${i + 1}: ${chunkResult.error}`\n                };\n            }\n            if (chunkResult.transcript && chunkResult.transcript.trim()) {\n                transcripts.push(chunkResult.transcript.trim());\n            }\n            // Clean up chunk file after processing\n            try {\n                await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().remove(chunkPath);\n            } catch (cleanupError) {\n                console.warn(`[VideoTranscription] Failed to cleanup chunk ${i + 1}:`, cleanupError);\n            }\n        } catch (error) {\n            console.error(`[VideoTranscription] Exception transcribing chunk ${i + 1}:`, error);\n            return {\n                transcript: \"\",\n                error: `Exception during chunk ${i + 1} transcription: ${error instanceof Error ? error.message : \"Unknown error\"}`\n            };\n        }\n    }\n    // Combine all transcripts\n    const combinedTranscript = transcripts.join(\" \");\n    console.log(`[VideoTranscription] Successfully transcribed ${transcripts.length} chunks, total length: ${combinedTranscript.length} characters`);\n    return {\n        transcript: combinedTranscript,\n        language: \"auto-detected\"\n    };\n}\n/**\n * Transcribes audio file using OpenAI Whisper API (handles chunking for large files)\n */ async function transcribeAudioWithWhisper(audioFilePath) {\n    try {\n        if (!openai) {\n            throw new Error(\"OpenAI client not initialized - check API key configuration\");\n        }\n        // Check if audio file exists and get its size\n        const audioStats = await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().stat(audioFilePath);\n        console.log(`[VideoTranscription] Audio file size: ${(audioStats.size / 1024 / 1024).toFixed(2)} MB`);\n        // OpenAI Whisper API has a 25MB file size limit - throw error immediately for large files\n        if (audioStats.size > 25 * 1024 * 1024) {\n            throw new Error(`Audio file too large for Whisper API (max 25MB). Consider splitting the video into smaller segments.`);\n        }\n        // Create a file stream for the audio\n        const audioStream = fs_extra__WEBPACK_IMPORTED_MODULE_2___default().createReadStream(audioFilePath);\n        console.log(\"[VideoTranscription] Sending audio to OpenAI Whisper API...\");\n        const transcription = await openai.audio.transcriptions.create({\n            file: audioStream,\n            model: \"whisper-1\",\n            language: undefined,\n            response_format: \"text\",\n            temperature: 0.1 // Lower temperature for more consistent transcription\n        });\n        if (!transcription || typeof transcription !== \"string\") {\n            throw new Error(\"Invalid response from Whisper API\");\n        }\n        console.log(`[VideoTranscription] Transcription completed: ${transcription.length} characters`);\n        return {\n            transcript: transcription.trim(),\n            language: \"auto-detected\" // Whisper auto-detects language\n        };\n    } catch (error) {\n        console.error(\"[VideoTranscription] Whisper API error:\", error);\n        if (error instanceof Error) {\n            // Check for the custom file size error message we might return directly or other known patterns\n            if (error.message.includes(\"Audio file too large\") || error.message.includes(\"max 25MB\") || error.message.includes(\"maximum content length exceeded\") || error.message.includes(\"file size\")) {\n                return {\n                    transcript: \"\",\n                    error: \"Audio file is too large for the transcription service (max 25MB). This should be handled by chunking.\"\n                };\n            } else if (error.message.includes(\"API key\")) {\n                return {\n                    transcript: \"\",\n                    error: \"Transcription service configuration error. Please contact support.\"\n                };\n            } else if (error.message.includes(\"rate limit\")) {\n                return {\n                    transcript: \"\",\n                    error: \"Transcription service is temporarily overloaded. Please try again in a few minutes.\"\n                };\n            }\n        }\n        return {\n            transcript: \"\",\n            error: \"Failed to transcribe audio. Please ensure the video contains clear speech or check service status.\"\n        };\n    }\n}\n/**\n * Gets video file information (duration, format, etc.)\n */ async function getVideoInfo(videoFilePath) {\n    const stats = await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().stat(videoFilePath);\n    return new Promise((resolve, reject)=>{\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().ffprobe(videoFilePath, (error, metadata)=>{\n            if (error) {\n                reject(new Error(`Failed to analyze video: ${error.message}`));\n                return;\n            }\n            const duration = metadata.format.duration || 0;\n            const format = metadata.format.format_name || \"unknown\";\n            resolve({\n                duration,\n                format,\n                size: stats.size\n            });\n        });\n    });\n}\n/**\n * Validates if the uploaded file is a supported video format\n */ function validateVideoFile(filePath, originalName) {\n    return new Promise((resolve)=>{\n        console.log(`[VideoTranscription] Validating file: ${originalName}`);\n        console.log(`[VideoTranscription] File path: ${filePath}`);\n        // First check if file exists\n        if (!fs_extra__WEBPACK_IMPORTED_MODULE_2___default().existsSync(filePath)) {\n            console.error(\"[VideoTranscription] File does not exist at path:\", filePath);\n            resolve(false);\n            return;\n        }\n        // Check file size\n        try {\n            const stats = fs_extra__WEBPACK_IMPORTED_MODULE_2___default().statSync(filePath);\n            console.log(`[VideoTranscription] File size: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);\n            if (stats.size === 0) {\n                console.error(\"[VideoTranscription] File is empty\");\n                resolve(false);\n                return;\n            }\n        } catch (error) {\n            console.error(\"[VideoTranscription] Error reading file stats:\", error);\n            resolve(false);\n            return;\n        }\n        // Set a timeout for FFprobe to prevent hanging\n        const timeout = setTimeout(()=>{\n            console.warn(\"[VideoTranscription] FFprobe timeout, using fallback validation\");\n            const supportedExtensions = [\n                \".mp4\",\n                \".mov\",\n                \".webm\",\n                \".avi\",\n                \".mkv\"\n            ];\n            const fileExtension = path__WEBPACK_IMPORTED_MODULE_1___default().extname(originalName).toLowerCase();\n            const isValidExtension = supportedExtensions.includes(fileExtension);\n            console.log(`[VideoTranscription] Timeout fallback - Extension: ${fileExtension}, Valid: ${isValidExtension}`);\n            resolve(isValidExtension);\n        }, 10000); // 10 second timeout\n        fluent_ffmpeg__WEBPACK_IMPORTED_MODULE_0___default().ffprobe(filePath, (error, metadata)=>{\n            clearTimeout(timeout); // Clear the timeout since we got a response\n            if (error) {\n                console.error(\"[VideoTranscription] FFprobe error:\", error);\n                console.error(\"[VideoTranscription] FFprobe error message:\", error.message);\n                // If FFprobe fails, use fallback validation based on file extension and MIME type\n                const supportedExtensions = [\n                    \".mp4\",\n                    \".mov\",\n                    \".webm\",\n                    \".avi\",\n                    \".mkv\"\n                ];\n                const fileExtension = path__WEBPACK_IMPORTED_MODULE_1___default().extname(originalName).toLowerCase();\n                const isValidExtension = supportedExtensions.includes(fileExtension);\n                console.log(`[VideoTranscription] FFprobe failed, using fallback validation`);\n                console.log(`[VideoTranscription] File extension: ${fileExtension}`);\n                console.log(`[VideoTranscription] Valid extension: ${isValidExtension}`);\n                // Be more permissive - if it has a valid extension, allow it through\n                // The transcription process will catch any real issues\n                resolve(isValidExtension);\n                return;\n            }\n            console.log(\"[VideoTranscription] FFprobe metadata obtained successfully\");\n            console.log(\"[VideoTranscription] Format:\", metadata.format?.format_name);\n            console.log(\"[VideoTranscription] Duration:\", metadata.format?.duration);\n            console.log(\"[VideoTranscription] Streams count:\", metadata.streams?.length);\n            if (!metadata.streams || metadata.streams.length === 0) {\n                console.error(\"[VideoTranscription] No streams found in file\");\n                // Even if no streams found, try fallback validation\n                const supportedExtensions = [\n                    \".mp4\",\n                    \".mov\",\n                    \".webm\",\n                    \".avi\",\n                    \".mkv\"\n                ];\n                const fileExtension = path__WEBPACK_IMPORTED_MODULE_1___default().extname(originalName).toLowerCase();\n                const isValidExtension = supportedExtensions.includes(fileExtension);\n                console.log(`[VideoTranscription] No streams fallback - Extension: ${fileExtension}, Valid: ${isValidExtension}`);\n                resolve(isValidExtension);\n                return;\n            }\n            // Check if file has video streams\n            const hasVideoStream = metadata.streams.some((stream)=>{\n                console.log(`[VideoTranscription] Stream type: ${stream.codec_type}, codec: ${stream.codec_name}`);\n                return stream.codec_type === \"video\";\n            });\n            const hasAudioStream = metadata.streams.some((stream)=>{\n                return stream.codec_type === \"audio\";\n            });\n            console.log(`[VideoTranscription] Has video stream: ${hasVideoStream}`);\n            console.log(`[VideoTranscription] Has audio stream: ${hasAudioStream}`);\n            // For note generation, we primarily need audio, but video presence is also good\n            const isValid = hasAudioStream || hasVideoStream;\n            console.log(`[VideoTranscription] File validation result: ${isValid}`);\n            // If FFprobe says invalid but file has proper extension, be more lenient\n            if (!isValid) {\n                console.warn(\"[VideoTranscription] FFprobe validation failed, checking fallback...\");\n                const supportedExtensions = [\n                    \".mp4\",\n                    \".mov\",\n                    \".webm\",\n                    \".avi\",\n                    \".mkv\"\n                ];\n                const fileExtension = path__WEBPACK_IMPORTED_MODULE_1___default().extname(originalName).toLowerCase();\n                const isValidExtension = supportedExtensions.includes(fileExtension);\n                if (isValidExtension) {\n                    console.warn(\"[VideoTranscription] Using fallback validation - file has valid extension\");\n                    resolve(true); // Be permissive for files with correct extensions\n                    return;\n                }\n            }\n            resolve(isValid);\n        });\n    });\n}\n/**\n * Creates a safe temporary directory for video processing\n */ async function createTempDirectory() {\n    const tempDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"temp\", \"video-processing\", `session_${Date.now()}`);\n    await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().ensureDir(tempDir);\n    return tempDir;\n}\n/**\n * Cleans up temporary files and directories\n */ async function cleanupTempDirectory(tempDir) {\n    try {\n        await fs_extra__WEBPACK_IMPORTED_MODULE_2___default().remove(tempDir);\n        console.log(`[VideoTranscription] Cleaned up temp directory: ${tempDir}`);\n    } catch (error) {\n        console.warn(`[VideoTranscription] Failed to cleanup temp directory: ${tempDir}`, error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/videoTranscription.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/splitTranscript.ts":
/*!**************************************!*\
  !*** ./src/utils/splitTranscript.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   estimateTokenCount: () => (/* binding */ estimateTokenCount),\n/* harmony export */   isChunkWithinTokenLimit: () => (/* binding */ isChunkWithinTokenLimit),\n/* harmony export */   splitTranscriptIntoChunks: () => (/* binding */ splitTranscriptIntoChunks)\n/* harmony export */ });\n/**\n * Represents a chunk of text with metadata\n */ /**\n * Splits a transcript into chunks based on word count\n * @param transcript The full transcript text to split\n * @param maxWords Maximum number of words per chunk (default: 800)\n * @returns Array of TranscriptChunk objects\n */ function splitTranscriptIntoChunks(transcript, maxWords = 800) {\n    // Split into words and filter out empty strings\n    const words = transcript.split(/\\s+/).filter((word)=>word.length > 0);\n    const chunks = [];\n    for(let i = 0; i < words.length; i += maxWords){\n        const startWord = i;\n        const endWord = Math.min(i + maxWords, words.length);\n        const chunkWords = words.slice(startWord, endWord);\n        chunks.push({\n            content: chunkWords.join(\" \"),\n            index: chunks.length,\n            wordCount: chunkWords.length,\n            startWord,\n            endWord\n        });\n    }\n    return chunks;\n}\n/**\n * Estimates the number of tokens in a text string\n * This is a rough estimate: ~4 characters per token on average\n * @param text The text to estimate tokens for\n * @returns Estimated number of tokens\n */ function estimateTokenCount(text) {\n    return Math.ceil(text.length / 4);\n}\n/**\n * Validates if a chunk is within safe token limits\n * @param chunk The chunk to validate\n * @param maxTokens Maximum allowed tokens (default: 3000)\n * @returns boolean indicating if chunk is within limits\n */ function isChunkWithinTokenLimit(chunk, maxTokens = 3000) {\n    return estimateTokenCount(chunk.content) <= maxTokens;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdXRpbHMvc3BsaXRUcmFuc2NyaXB0LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBb0JEOzs7OztDQUtDLEdBQ00sU0FBU0EsMEJBQ2RDLFVBQWtCLEVBQ2xCQyxXQUFtQixHQUFHO0lBRXRCLGdEQUFnRDtJQUNoRCxNQUFNQyxRQUFRRixXQUFXRyxLQUFLLENBQUMsT0FBT0MsTUFBTSxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxNQUFNLEdBQUc7SUFDbkUsTUFBTUMsU0FBNEIsRUFBRTtJQUVwQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sTUFBTUksTUFBTSxFQUFFRSxLQUFLUCxTQUFVO1FBQy9DLE1BQU1RLFlBQVlEO1FBQ2xCLE1BQU1FLFVBQVVDLEtBQUtDLEdBQUcsQ0FBQ0osSUFBSVAsVUFBVUMsTUFBTUksTUFBTTtRQUNuRCxNQUFNTyxhQUFhWCxNQUFNWSxLQUFLLENBQUNMLFdBQVdDO1FBRTFDSCxPQUFPUSxJQUFJLENBQUM7WUFDVkMsU0FBU0gsV0FBV0ksSUFBSSxDQUFDO1lBQ3pCQyxPQUFPWCxPQUFPRCxNQUFNO1lBQ3BCYSxXQUFXTixXQUFXUCxNQUFNO1lBQzVCRztZQUNBQztRQUNGO0lBQ0Y7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTYSxtQkFBbUJDLElBQVk7SUFDN0MsT0FBT1YsS0FBS1csSUFBSSxDQUFDRCxLQUFLZixNQUFNLEdBQUc7QUFDakM7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNpQix3QkFDZEMsS0FBc0IsRUFDdEJDLFlBQW9CLElBQUk7SUFFeEIsT0FBT0wsbUJBQW1CSSxNQUFNUixPQUFPLEtBQUtTO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vc3JjL3V0aWxzL3NwbGl0VHJhbnNjcmlwdC50cz9jZmVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIHRleHQgd2l0aCBtZXRhZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRDaHVuayB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgaW5kZXg6IG51bWJlcjtcbiAgd29yZENvdW50OiBudW1iZXI7XG4gIHN0YXJ0V29yZDogbnVtYmVyO1xuICBlbmRXb3JkOiBudW1iZXI7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGZhaWxlZCBjaHVuayBwcm9jZXNzaW5nIGF0dGVtcHRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGYWlsZWRDaHVuayB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHJlYXNvbjogc3RyaW5nO1xuICBhdHRlbXB0czogbnVtYmVyO1xuICBzdGFydFdvcmQ6IG51bWJlcjtcbiAgZW5kV29yZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhIHRyYW5zY3JpcHQgaW50byBjaHVua3MgYmFzZWQgb24gd29yZCBjb3VudFxuICogQHBhcmFtIHRyYW5zY3JpcHQgVGhlIGZ1bGwgdHJhbnNjcmlwdCB0ZXh0IHRvIHNwbGl0XG4gKiBAcGFyYW0gbWF4V29yZHMgTWF4aW11bSBudW1iZXIgb2Ygd29yZHMgcGVyIGNodW5rIChkZWZhdWx0OiA4MDApXG4gKiBAcmV0dXJucyBBcnJheSBvZiBUcmFuc2NyaXB0Q2h1bmsgb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRUcmFuc2NyaXB0SW50b0NodW5rcyhcbiAgdHJhbnNjcmlwdDogc3RyaW5nLFxuICBtYXhXb3JkczogbnVtYmVyID0gODAwXG4pOiBUcmFuc2NyaXB0Q2h1bmtbXSB7XG4gIC8vIFNwbGl0IGludG8gd29yZHMgYW5kIGZpbHRlciBvdXQgZW1wdHkgc3RyaW5nc1xuICBjb25zdCB3b3JkcyA9IHRyYW5zY3JpcHQuc3BsaXQoL1xccysvKS5maWx0ZXIod29yZCA9PiB3b3JkLmxlbmd0aCA+IDApO1xuICBjb25zdCBjaHVua3M6IFRyYW5zY3JpcHRDaHVua1tdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkgKz0gbWF4V29yZHMpIHtcbiAgICBjb25zdCBzdGFydFdvcmQgPSBpO1xuICAgIGNvbnN0IGVuZFdvcmQgPSBNYXRoLm1pbihpICsgbWF4V29yZHMsIHdvcmRzLmxlbmd0aCk7XG4gICAgY29uc3QgY2h1bmtXb3JkcyA9IHdvcmRzLnNsaWNlKHN0YXJ0V29yZCwgZW5kV29yZCk7XG4gICAgXG4gICAgY2h1bmtzLnB1c2goe1xuICAgICAgY29udGVudDogY2h1bmtXb3Jkcy5qb2luKCcgJyksXG4gICAgICBpbmRleDogY2h1bmtzLmxlbmd0aCxcbiAgICAgIHdvcmRDb3VudDogY2h1bmtXb3Jkcy5sZW5ndGgsXG4gICAgICBzdGFydFdvcmQsXG4gICAgICBlbmRXb3JkXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY2h1bmtzO1xufVxuXG4vKipcbiAqIEVzdGltYXRlcyB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiBhIHRleHQgc3RyaW5nXG4gKiBUaGlzIGlzIGEgcm91Z2ggZXN0aW1hdGU6IH40IGNoYXJhY3RlcnMgcGVyIHRva2VuIG9uIGF2ZXJhZ2VcbiAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIGVzdGltYXRlIHRva2VucyBmb3JcbiAqIEByZXR1cm5zIEVzdGltYXRlZCBudW1iZXIgb2YgdG9rZW5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc3RpbWF0ZVRva2VuQ291bnQodGV4dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguY2VpbCh0ZXh0Lmxlbmd0aCAvIDQpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBpZiBhIGNodW5rIGlzIHdpdGhpbiBzYWZlIHRva2VuIGxpbWl0c1xuICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byB2YWxpZGF0ZVxuICogQHBhcmFtIG1heFRva2VucyBNYXhpbXVtIGFsbG93ZWQgdG9rZW5zIChkZWZhdWx0OiAzMDAwKVxuICogQHJldHVybnMgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNodW5rIGlzIHdpdGhpbiBsaW1pdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2h1bmtXaXRoaW5Ub2tlbkxpbWl0KFxuICBjaHVuazogVHJhbnNjcmlwdENodW5rLFxuICBtYXhUb2tlbnM6IG51bWJlciA9IDMwMDBcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gZXN0aW1hdGVUb2tlbkNvdW50KGNodW5rLmNvbnRlbnQpIDw9IG1heFRva2Vucztcbn0gIl0sIm5hbWVzIjpbInNwbGl0VHJhbnNjcmlwdEludG9DaHVua3MiLCJ0cmFuc2NyaXB0IiwibWF4V29yZHMiLCJ3b3JkcyIsInNwbGl0IiwiZmlsdGVyIiwid29yZCIsImxlbmd0aCIsImNodW5rcyIsImkiLCJzdGFydFdvcmQiLCJlbmRXb3JkIiwiTWF0aCIsIm1pbiIsImNodW5rV29yZHMiLCJzbGljZSIsInB1c2giLCJjb250ZW50Iiwiam9pbiIsImluZGV4Iiwid29yZENvdW50IiwiZXN0aW1hdGVUb2tlbkNvdW50IiwidGV4dCIsImNlaWwiLCJpc0NodW5rV2l0aGluVG9rZW5MaW1pdCIsImNodW5rIiwibWF4VG9rZW5zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/splitTranscript.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/fs-extra","vendor-chunks/fluent-ffmpeg","vendor-chunks/graceful-fs","vendor-chunks/isexe","vendor-chunks/jsonfile","vendor-chunks/universalify","vendor-chunks/async"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload-video%2Froute&page=%2Fapi%2Fupload-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload-video%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();