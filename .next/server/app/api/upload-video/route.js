(()=>{var e={};e.id=1e3,e.ids=[1e3],e.modules={83581:e=>{function o(e){var o=Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}o.keys=()=>[],o.resolve=o,o.id=83581,e.exports=o},42916:e=>{function o(e){var o=Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}o.keys=()=>[],o.resolve=o,o.id=42916,e.exports=o},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},27790:e=>{"use strict";e.exports=require("assert")},78893:e=>{"use strict";e.exports=require("buffer")},61282:e=>{"use strict";e.exports=require("child_process")},9714:e=>{"use strict";e.exports=require("constants")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},92048:e=>{"use strict";e.exports=require("fs")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},19801:e=>{"use strict";e.exports=require("os")},55315:e=>{"use strict";e.exports=require("path")},68621:e=>{"use strict";e.exports=require("punycode")},76162:e=>{"use strict";e.exports=require("stream")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},21764:e=>{"use strict";e.exports=require("util")},6162:e=>{"use strict";e.exports=require("worker_threads")},71568:e=>{"use strict";e.exports=require("zlib")},87561:e=>{"use strict";e.exports=require("node:fs")},84492:e=>{"use strict";e.exports=require("node:stream")},72477:e=>{"use strict";e.exports=require("node:stream/web")},41206:(e,o,r)=>{"use strict";r.r(o),r.d(o,{originalPathname:()=>B,patchFetch:()=>O,requestAsyncStorage:()=>D,routeModule:()=>j,serverHooks:()=>R,staticGenerationAsyncStorage:()=>C});var t={};r.r(t),r.d(t,{DELETE:()=>E,GET:()=>S,POST:()=>N});var i=r(49303),s=r(88716),a=r(60670),n=r(87070),l=r(23517),c=r(51215),d=r(60211),p=r.n(d),u=r(40788),g=r.n(u),f=r(55315),m=r.n(f),h=r(75605);let V=!1,b=!1;try{let e=r(11511);e&&e.path?g().existsSync(e.path)?(p().setFfmpegPath(e.path),console.log("[VideoTranscription] FFmpeg path set from installer:",e.path),V=!0):console.warn("[VideoTranscription] FFmpeg installer path does not exist:",e.path):console.warn("[VideoTranscription] FFmpeg installer found but no path provided")}catch(e){console.warn("[VideoTranscription] FFmpeg installer require failed:",e)}try{p().setFfprobePath("ffprobe"),console.log("[VideoTranscription] FFprobe path set to system ffprobe"),b=!0}catch(e){console.warn("[VideoTranscription] System ffprobe not available:",e)}if(!V||!b)for(let e of[{ffmpeg:m().join(process.cwd(),"node_modules","@ffmpeg-installer","darwin-x64","ffmpeg"),ffprobe:"/usr/local/bin/ffprobe"},{ffmpeg:m().join(process.cwd(),"node_modules","@ffmpeg-installer","darwin-arm64","ffmpeg"),ffprobe:"/opt/homebrew/bin/ffprobe"},{ffmpeg:"/usr/local/bin/ffmpeg",ffprobe:"/usr/local/bin/ffprobe"},{ffmpeg:"/usr/bin/ffmpeg",ffprobe:"/usr/bin/ffprobe"},{ffmpeg:"/opt/homebrew/bin/ffmpeg",ffprobe:"/opt/homebrew/bin/ffprobe"},{ffmpeg:"ffmpeg",ffprobe:"ffprobe"}])try{if(!V&&("ffmpeg"===e.ffmpeg||g().existsSync(e.ffmpeg))&&(p().setFfmpegPath(e.ffmpeg),console.log("[VideoTranscription] Using FFmpeg at:",e.ffmpeg),V=!0),!b&&("ffprobe"===e.ffprobe||g().existsSync(e.ffprobe))&&(p().setFfprobePath(e.ffprobe),console.log("[VideoTranscription] Using FFprobe at:",e.ffprobe),b=!0),V&&b)break}catch(o){console.warn("[VideoTranscription] Could not use FFmpeg/FFprobe at:",e)}async function v(){let e={ffmpeg:!1,ffprobe:!1};return new Promise(o=>{p().getAvailableFormats(r=>{r?console.error("[VideoTranscription] FFmpeg test failed:",r.message):(console.log("[VideoTranscription] FFmpeg test passed (formats check)"),e.ffmpeg=!0),p().ffprobe("dummy_test_file.mp4",(r,t)=>{r&&r.message.toLowerCase().includes("cannot find ffprobe")?console.error("[VideoTranscription] FFprobe test failed: ffprobe not found"):r&&r.message.toLowerCase().includes("no such file")?(console.log("[VideoTranscription] FFprobe test passed (expected error on dummy file)"),e.ffprobe=!0):r?console.error("[VideoTranscription] FFprobe test returned unexpected error:",r.message):(console.log("[VideoTranscription] FFprobe test passed (unexpected success on dummy file, but ok)"),e.ffprobe=!0),o(e)})})})}V||console.error("[VideoTranscription] ⚠️  Could not find FFmpeg! Video processing may fail for extraction."),b||console.error("[VideoTranscription] ⚠️  Could not find FFprobe! Video validation/info may fail.");let y=new h.ZP({apiKey:process.env.OPENAI_API_KEY});async function w(e,o,r){let t=o||m().join(process.cwd(),"temp","video-processing"),i=`audio_${Date.now()}.mp3`,s=m().join(t,i);try{let o;console.log("[VideoTranscription] Testing FFmpeg/FFprobe availability...");let{ffmpeg:i,ffprobe:a}=await v();if(!i)return{transcript:"",error:"FFmpeg (for audio extraction) is not available. Please ensure FFmpeg is properly installed and accessible."};a||console.warn("[VideoTranscription] FFprobe not available. Video validation and info might be incomplete, but attempting audio extraction."),await g().ensureDir(t),console.log("[VideoTranscription] Extracting audio from video..."),r?.({step:"extracting",progress:0,message:"Extracting audio from video..."}),await I(e,s,e=>{r?.({step:"extracting",progress:e,message:`Extracting audio: ${e}%`})}),r?.({step:"extracting",progress:100,message:"Audio extraction complete"}),console.log("[VideoTranscription] Checking audio file size and preparing for transcription...");let n=await g().stat(s);if(console.log(`[VideoTranscription] Audio file size: ${(n.size/1024/1024).toFixed(2)} MB`),n.size>15728640){console.log("[VideoTranscription] Audio file is large, using chunking approach..."),r?.({step:"transcribing",progress:0,message:"Preparing large audio file for transcription..."});let e=await F(s);r?.({step:"transcribing",progress:25,message:`Transcribing audio in ${e.length} chunks...`}),o=await A(e)}else console.log("[VideoTranscription] Audio file is small enough, using direct transcription..."),r?.({step:"transcribing",progress:0,message:"Transcribing audio with AI..."}),o=await T(s);r?.({step:"transcribing",progress:100,message:"Transcription complete"});try{await g().remove(s)}catch(e){console.warn("[VideoTranscription] Failed to cleanup audio file:",e)}return r?.({step:"complete",progress:100,message:"Video processing complete"}),o}catch(e){console.error("[VideoTranscription] Error:",e);try{await g().remove(s)}catch(e){console.warn("[VideoTranscription] Failed to cleanup after error:",e)}return{transcript:"",error:e instanceof Error?e.message:"Unknown transcription error"}}}async function I(e,o,r){return new Promise((t,i)=>{let s=null;p()(e).audioCodec("libmp3lame").audioBitrate("48k").audioChannels(1).audioFrequency(16e3).format("mp3").on("codecData",e=>{let o=e.duration.match(/(\d+):(\d+):(\d+\.\d+)/);o&&(s=3600*parseInt(o[1])+60*parseInt(o[2])+parseFloat(o[3]))}).on("progress",e=>{if(s&&r&&e.timemark){let o=e.timemark.toString().match(/(\d+):(\d+):(\d+\.\d+)/);if(o){let e=parseInt(o[1]);r(Math.min(100,Math.round((3600*e+60*parseInt(o[2])+parseFloat(o[3]))/s*100)))}}}).on("end",()=>{console.log("[VideoTranscription] Audio extraction completed"),t()}).on("error",o=>{console.error("[VideoTranscription] FFmpeg error:",o);let r=`Audio extraction failed: ${o.message}`;o.message.includes("Cannot find ffmpeg")?(r="Cannot find ffmpeg. Please ensure FFmpeg is properly installed.",console.error("[VideoTranscription] FFmpeg not found. Installed paths checked:"),console.error("[VideoTranscription] - @ffmpeg-installer path:",V?"Found":"Not found"),console.error("[VideoTranscription] - System paths checked: /usr/local/bin/ffmpeg, /usr/bin/ffmpeg, /opt/homebrew/bin/ffmpeg")):o.message.includes("No such file")?r=`Input video file not found: ${e}`:o.message.includes("Invalid data")?r="Invalid video file format or corrupted file":o.message.includes("Permission denied")&&(r="Permission denied accessing video file or output directory"),i(Error(r))}).save(o)})}async function F(e,o=15728640){let r=await g().stat(e);if(r.size<=o)return[e];console.log(`[VideoTranscription] Audio file too large (${(r.size/1024/1024).toFixed(2)}MB), splitting into chunks...`);let t=r.size/1048576,i=o/1048576,s=Math.ceil(t/i);console.log(`[VideoTranscription] Estimated duration: ${t.toFixed(1)} minutes, creating ${s} chunks`);let a=[],n=m().dirname(e),l=m().basename(e,m().extname(e));for(let o=0;o<s;o++){let r=m().join(n,`${l}_chunk_${o}.mp3`),t=o*i*60;await new Promise((a,n)=>{p()(e).seekInput(t).duration(60*i).audioCodec("libmp3lame").audioBitrate("48k").audioChannels(1).audioFrequency(16e3).format("mp3").on("end",()=>{console.log(`[VideoTranscription] Created chunk ${o+1}/${s}: ${r}`),a()}).on("error",e=>{console.error(`[VideoTranscription] Error creating chunk ${o+1}:`,e),n(Error(`Failed to create audio chunk ${o+1}: ${e.message}`))}).save(r)});try{(await g().stat(r)).size>0?a.push(r):console.warn(`[VideoTranscription] Chunk ${o+1} is empty, skipping`)}catch(e){console.warn(`[VideoTranscription] Chunk ${o+1} was not created properly, skipping`)}}return console.log(`[VideoTranscription] Successfully created ${a.length} audio chunks`),a}async function A(e){if(1===e.length)return await T(e[0]);console.log(`[VideoTranscription] Transcribing ${e.length} audio chunks...`);let o=[];for(let r=0;r<e.length;r++){let t=e[r];console.log(`[VideoTranscription] Transcribing chunk ${r+1}/${e.length}: ${m().basename(t)}`);try{let e=await T(t);if(e.error)return console.error(`[VideoTranscription] Error transcribing chunk ${r+1}:`,e.error),{transcript:"",error:`Failed to transcribe audio chunk ${r+1}: ${e.error}`};e.transcript&&e.transcript.trim()&&o.push(e.transcript.trim());try{await g().remove(t)}catch(e){console.warn(`[VideoTranscription] Failed to cleanup chunk ${r+1}:`,e)}}catch(e){return console.error(`[VideoTranscription] Exception transcribing chunk ${r+1}:`,e),{transcript:"",error:`Exception during chunk ${r+1} transcription: ${e instanceof Error?e.message:"Unknown error"}`}}}let r=o.join(" ");return console.log(`[VideoTranscription] Successfully transcribed ${o.length} chunks, total length: ${r.length} characters`),{transcript:r,language:"auto-detected"}}async function T(e){try{if(!y)throw Error("OpenAI client not initialized - check API key configuration");let o=await g().stat(e);if(console.log(`[VideoTranscription] Audio file size: ${(o.size/1024/1024).toFixed(2)} MB`),o.size>26214400)throw Error("Audio file too large for Whisper API (max 25MB). Consider splitting the video into smaller segments.");let r=g().createReadStream(e);console.log("[VideoTranscription] Sending audio to OpenAI Whisper API...");let t=await y.audio.transcriptions.create({file:r,model:"whisper-1",language:void 0,response_format:"text",temperature:.1});if(!t||"string"!=typeof t)throw Error("Invalid response from Whisper API");return console.log(`[VideoTranscription] Transcription completed: ${t.length} characters`),{transcript:t.trim(),language:"auto-detected"}}catch(e){if(console.error("[VideoTranscription] Whisper API error:",e),e instanceof Error){if(e.message.includes("Audio file too large")||e.message.includes("max 25MB")||e.message.includes("maximum content length exceeded")||e.message.includes("file size"))return{transcript:"",error:"Audio file is too large for the transcription service (max 25MB). This should be handled by chunking."};if(e.message.includes("API key"))return{transcript:"",error:"Transcription service configuration error. Please contact support."};if(e.message.includes("rate limit"))return{transcript:"",error:"Transcription service is temporarily overloaded. Please try again in a few minutes."}}return{transcript:"",error:"Failed to transcribe audio. Please ensure the video contains clear speech or check service status."}}}async function x(e){let o=await g().stat(e);return new Promise((r,t)=>{p().ffprobe(e,(e,i)=>{if(e){t(Error(`Failed to analyze video: ${e.message}`));return}r({duration:i.format.duration||0,format:i.format.format_name||"unknown",size:o.size})})})}async function P(){let e=m().join(process.cwd(),"temp","video-processing",`session_${Date.now()}`);return await g().ensureDir(e),e}async function U(e){try{await g().remove(e),console.log(`[VideoTranscription] Cleaned up temp directory: ${e}`)}catch(o){console.warn(`[VideoTranscription] Failed to cleanup temp directory: ${e}`,o)}}var $=r(58026),k=r(82227);let _="https://xhljckmlzdshxibnqsbj.supabase.co",q="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function z(e){try{let o=(0,l.eI)(_,q),{data:r}=await o.from("user_subscriptions").select("plan_id").eq("user_id",e).eq("status","active").single(),t=r?.plan_id;if("student"===t||"pro"===t)return{planId:t};return{planId:"free"}}catch(e){return console.warn("[Upload Video API] Could not fetch subscription:",e),{planId:"free"}}}async function N(e){console.log("[Upload Video API] Request received: POST");let o=null,r=null;try{console.log("[Upload Video API] Authenticating request");let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Upload Video API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let i=t.replace("Bearer ",""),s=(0,l.eI)(_,q,{global:{headers:{Authorization:`Bearer ${i}`}}}),{data:{user:a},error:d}=await s.auth.getUser(i);if(d||!a)return console.error("[Upload Video API] Authentication failed:",d?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:d?.message||"Invalid authentication token"},{status:401});console.log(`[Upload Video API] User authenticated: ${a.id}`),console.log("[Upload Video API] Checking usage limits");let u=await (0,$.PH)(a.id,i,"video");if(!u.canGenerate)return console.log(`[Upload Video API] Generation limit reached: ${u.reason}`),n.NextResponse.json({success:!1,error:"Generation limit reached",message:u.reason||"You have reached your monthly note generation limit",usage:u.usage,limits:u.limits},{status:429});if(!u.canSave)return console.log(`[Upload Video API] Storage limit reached: ${u.reason}`),n.NextResponse.json({success:!1,error:"Storage limit reached",message:u.reason||"You have reached your saved notes limit",usage:u.usage,limits:u.limits},{status:429});console.log(`[Upload Video API] Usage check passed - can generate: ${u.canGenerate}, can save: ${u.canSave}`);let f=await z(a.id),h=await (0,k.GV)(a.id,f.planId,"video-upload",async()=>{let t,n;let l=await e.formData(),d=l.get("file"),u=l.get("title");if(!d)return console.error("[Upload Video API] No file provided"),{success:!1,error:"Missing file",message:"Please provide a video file to upload"};if(console.log(`[Upload Video API] File received: ${d.name} (${d.size} bytes, ${d.type})`),!["video/mp4","video/mov","video/quicktime","video/webm","video/avi","video/mkv"].includes(d.type))return console.error(`[Upload Video API] Unsupported file type: ${d.type}`),{success:!1,error:"Unsupported file type",message:"Please upload a video file (.mp4, .mov, .webm, .avi, .mkv)"};if(d.size>209715200)return console.error(`[Upload Video API] File too large: ${d.size} bytes`),{success:!1,error:"File too large",message:"Video file must be smaller than 200MB"};console.log("[Upload Video API] File validated successfully"),o=await P();let f=`video_${Date.now()}_${d.name}`;r=m().join(o,f),console.log(`[Upload Video API] Saving file to: ${r}`);let h=Buffer.from(await d.arrayBuffer());await g().writeFile(r,h),console.log("[Upload Video API] File saved successfully"),console.log("[Upload Video API] Validating video format..."),console.log(`[Upload Video API] File details: name=${d.name}, size=${d.size}, type=${d.type}`),console.log(`[Upload Video API] Temp file path: ${r}`);try{var V,b;let e=await (V=r,b=d.name,new Promise(e=>{if(console.log(`[VideoTranscription] Validating file: ${b}`),console.log(`[VideoTranscription] File path: ${V}`),!g().existsSync(V)){console.error("[VideoTranscription] File does not exist at path:",V),e(!1);return}try{let o=g().statSync(V);if(console.log(`[VideoTranscription] File size: ${(o.size/1024/1024).toFixed(2)} MB`),0===o.size){console.error("[VideoTranscription] File is empty"),e(!1);return}}catch(o){console.error("[VideoTranscription] Error reading file stats:",o),e(!1);return}let o=setTimeout(()=>{console.warn("[VideoTranscription] FFprobe timeout, using fallback validation");let o=m().extname(b).toLowerCase(),r=[".mp4",".mov",".webm",".avi",".mkv"].includes(o);console.log(`[VideoTranscription] Timeout fallback - Extension: ${o}, Valid: ${r}`),e(r)},1e4);p().ffprobe(V,(r,t)=>{if(clearTimeout(o),r){console.error("[VideoTranscription] FFprobe error:",r),console.error("[VideoTranscription] FFprobe error message:",r.message);let o=m().extname(b).toLowerCase(),t=[".mp4",".mov",".webm",".avi",".mkv"].includes(o);console.log("[VideoTranscription] FFprobe failed, using fallback validation"),console.log(`[VideoTranscription] File extension: ${o}`),console.log(`[VideoTranscription] Valid extension: ${t}`),e(t);return}if(console.log("[VideoTranscription] FFprobe metadata obtained successfully"),console.log("[VideoTranscription] Format:",t.format?.format_name),console.log("[VideoTranscription] Duration:",t.format?.duration),console.log("[VideoTranscription] Streams count:",t.streams?.length),!t.streams||0===t.streams.length){console.error("[VideoTranscription] No streams found in file");let o=m().extname(b).toLowerCase(),r=[".mp4",".mov",".webm",".avi",".mkv"].includes(o);console.log(`[VideoTranscription] No streams fallback - Extension: ${o}, Valid: ${r}`),e(r);return}let i=t.streams.some(e=>(console.log(`[VideoTranscription] Stream type: ${e.codec_type}, codec: ${e.codec_name}`),"video"===e.codec_type)),s=t.streams.some(e=>"audio"===e.codec_type);console.log(`[VideoTranscription] Has video stream: ${i}`),console.log(`[VideoTranscription] Has audio stream: ${s}`);let a=s||i;if(console.log(`[VideoTranscription] File validation result: ${a}`),!a&&(console.warn("[VideoTranscription] FFprobe validation failed, checking fallback..."),[".mp4",".mov",".webm",".avi",".mkv"].includes(m().extname(b).toLowerCase()))){console.warn("[VideoTranscription] Using fallback validation - file has valid extension"),e(!0);return}e(a)})}));if(console.log(`[Upload Video API] Video validation result: ${e}`),!e){console.error("[Upload Video API] Video validation failed"),console.error(`[Upload Video API] File: ${d.name} (${d.type}) - ${d.size} bytes`);try{let e=await g().pathExists(r);if(console.log(`[Upload Video API] File exists at temp path: ${e}`),e){let e=await g().stat(r);console.log(`[Upload Video API] Temp file size: ${e.size} bytes`)}}catch(e){console.error("[Upload Video API] Debug error:",e)}return{success:!1,error:"Invalid video",message:"The uploaded file is not a valid video or does not contain audio. Please ensure you upload a valid video file with audio content."}}}catch(e){return console.error("[Upload Video API] Video validation threw error:",e),{success:!1,error:"Validation failed",message:"Failed to validate video file. Please try uploading again."}}console.log("[Upload Video API] Analyzing video...");try{t=await x(r),console.log(`[Upload Video API] Video info: ${JSON.stringify(t)}`)}catch(e){console.error("[Upload Video API] Failed to analyze video:",e),t={duration:0,format:"unknown",size:d.size}}console.log("[Upload Video API] Starting video transcription...");let v=await w(r,o,e=>{console.log(`[Upload Video API] Transcription progress: ${e.step} - ${e.progress}% - ${e.message}`)});if(v.error||!v.transcript)return console.error("[Upload Video API] Transcription failed:",v.error),{success:!1,error:"Transcription failed",message:v.error||"Failed to transcribe video audio"};console.log(`[Upload Video API] Transcription completed: ${v.transcript.length} characters`),console.log("[Upload Video API] Generating notes from transcript");try{if(!(n=await (0,c.L)({transcript:v.transcript,videoTitle:u||d.name})).content)return console.error("[Upload Video API] AI note generation failed:",n.error),{success:!1,error:"Note generation failed",message:n.error||"Failed to generate notes from the transcript"};console.log(`[Upload Video API] Successfully generated notes (${n.content.length} chars)`)}catch(e){return console.error("[Upload Video API] Error during AI note generation:",e),{success:!1,error:"AI processing failed",message:e.message||"An error occurred while generating notes with AI"}}let y=`video_upload_${Date.now()}`,I={id:y,user_id:a.id,title:u||`Video Notes - ${d.name}`,file_name:d.name,file_size:d.size,duration:t.duration||0,transcript:v.transcript,content:n.content,summary:n.summary,quiz:n.quiz,language:v.language||"auto-detected"};console.log(`[Upload Video API] Created note with ID: ${y}`),console.log("[Upload Video API] Note data structure:",Object.keys(I).join(", ")),console.log("[Upload Video API] Storing note in Supabase");try{let{data:e,error:r}=await s.from("video_upload_notes").insert(I).select().single();if(r){if(console.error("[Upload Video API] Database storage error:",JSON.stringify(r,null,2)),"42P01"===r.code||r.message?.includes("relation")||r.message?.includes("does not exist"))return console.error("[Upload Video API] Table video_upload_notes does not exist"),{success:!1,error:"Database setup required",message:"The video notes database table needs to be set up. Please contact support.",details:{code:r.code,message:r.message,hint:"Table video_upload_notes does not exist"}};if("23505"!==r.code)return console.error("[Upload Video API] Unhandled database error:",JSON.stringify(r,null,2)),{success:!1,error:"Database error",message:"Failed to store the notes in the database",details:{code:r.code,message:r.message,hint:r.hint}};{let o=`video_upload_${Date.now()}_retry`,r={...I,id:o};console.log("[Upload Video API] Duplicate ID detected, retrying with new ID:",o);let{data:t,error:i}=await s.from("video_upload_notes").insert(r).select().single();if(i)return console.error("[Upload Video API] Retry insert failed:",JSON.stringify(i,null,2)),{success:!1,error:"Database error",message:"Failed to store the notes in the database after retry",details:{code:i.code,message:i.message}};e=t}}if(!e)return console.error("[Upload Video API] No data returned from insert operation"),{success:!1,error:"Database error",message:"No data returned from database insert operation"};console.log(`[Upload Video API] Successfully stored note: ${e.id}`);try{await (0,$.iS)(a.id,i,"video"),console.log("[Upload Video API] Usage incremented successfully")}catch(e){console.warn("[Upload Video API] Failed to increment usage:",e)}console.log("[Upload Video API] Refreshing saved notes count");try{await (0,$.u6)(a.id,i),console.log("[Upload Video API] Saved notes count refreshed")}catch(e){console.error("[Upload Video API] Saved notes count refresh failed (note still created):",e)}return o&&await U(o),console.log("[Upload Video API] Video processing completed successfully"),{success:!0,message:"Video processed and notes generated successfully",data:{id:e.id,title:e.title,content:e.content,summary:e.summary,quiz:e.quiz,transcript:e.transcript,duration:e.duration,language:e.language,created_at:e.created_at}}}catch(e){return console.error("[Upload Video API] Database operation failed:",JSON.stringify(e,null,2)),{success:!1,error:"Database error",message:"Failed to store the notes in the database",details:{message:e.message,code:e.code,name:e.name}}}});return n.NextResponse.json(h)}catch(e){return console.error("[Upload Video API] Unexpected error:",e),o&&await U(o),n.NextResponse.json({success:!1,error:"Server error",message:e.message||"An unexpected error occurred while processing the video"},{status:500})}}async function S(e){console.log("[Upload Video API] Request received: GET");try{let o=e.headers.get("authorization");if(!o||!o.startsWith("Bearer "))return n.NextResponse.json({success:!1,error:"Authentication required"},{status:401});let r=o.replace("Bearer ",""),t=(0,l.eI)(_,q,{global:{headers:{Authorization:`Bearer ${r}`}}}),{data:{user:i},error:s}=await t.auth.getUser(r);if(s||!i)return n.NextResponse.json({success:!1,error:"Authentication failed"},{status:401});let{data:a,error:c}=await t.from("video_upload_notes").select("id, title, file_name, duration, content, summary, quiz, language, created_at").eq("user_id",i.id).order("created_at",{ascending:!1});if(c){if(console.error("[Upload Video API] Error fetching notes:",c),"42P01"===c.code)return n.NextResponse.json({success:!0,data:[],message:"No video upload notes found"});return n.NextResponse.json({success:!1,error:"Database error",message:"Failed to fetch video upload notes"},{status:500})}return n.NextResponse.json({success:!0,data:a||[],count:a?.length||0})}catch(e){return console.error("[Upload Video API] GET error:",e),n.NextResponse.json({success:!1,error:"Server error",message:e.message||"Failed to fetch video upload notes"},{status:500})}}async function E(e){console.log("[Upload Video API] Request received: DELETE");try{let o=e.headers.get("authorization");if(!o||!o.startsWith("Bearer "))return n.NextResponse.json({success:!1,error:"Authentication required"},{status:401});let r=o.replace("Bearer ",""),t=(0,l.eI)(_,q,{global:{headers:{Authorization:`Bearer ${r}`}}}),{data:{user:i},error:s}=await t.auth.getUser(r);if(s||!i)return n.NextResponse.json({success:!1,error:"Authentication failed"},{status:401});let a=e.nextUrl.searchParams.get("id");if(!a)return n.NextResponse.json({success:!1,error:"Missing note ID",message:"Note ID is required for deletion"},{status:400});console.log(`[Upload Video API] Deleting note with ID: ${a}`);let{data:c,error:d}=await t.from("video_upload_notes").delete().eq("id",a).eq("user_id",i.id).select();if(d)return console.error("[Upload Video API] Database delete error:",d),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to delete the note from the database",details:{code:d.code,message:d.message}},{status:500});if(!c||0===c.length)return console.error(`[Upload Video API] Note not found or access denied: ${a}`),n.NextResponse.json({success:!1,error:"Note not found",message:"The note was not found or you do not have permission to delete it"},{status:404});console.log(`[Upload Video API] Successfully deleted note: ${a}`);try{await (0,$.u6)(i.id,r),console.log("[Upload Video API] Saved notes count refreshed after deletion")}catch(e){console.error("[Upload Video API] Saved notes count refresh failed after deletion:",e)}return n.NextResponse.json({success:!0,message:"Note deleted successfully",data:c[0]})}catch(e){return console.error("[Upload Video API] DELETE error:",e),n.NextResponse.json({success:!1,error:"Server error",message:e.message||"Failed to delete video upload note"},{status:500})}}let j=new i.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/upload-video/route",pathname:"/api/upload-video",filename:"route",bundlePath:"app/api/upload-video/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/upload-video/route.ts",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:D,staticGenerationAsyncStorage:C,serverHooks:R}=j,B="/api/upload-video/route";function O(){return(0,a.patchFetch)({serverHooks:R,staticGenerationAsyncStorage:C})}}};var o=require("../../../webpack-runtime.js");o.C(e);var r=e=>o(o.s=e),t=o.X(0,[9276,5972,3517,4769,5605,2071,8285,1724],()=>r(41206));module.exports=t})();