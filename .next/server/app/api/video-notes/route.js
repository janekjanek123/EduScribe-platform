"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/video-notes/route";
exports.ids = ["app/api/video-notes/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "vm":
/*!*********************!*\
  !*** external "vm" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("vm");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("node:child_process");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/promises":
/*!***************************************!*\
  !*** external "node:stream/promises" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("node:stream/promises");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:string_decoder":
/*!**************************************!*\
  !*** external "node:string_decoder" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("node:string_decoder");

/***/ }),

/***/ "node:timers/promises":
/*!***************************************!*\
  !*** external "node:timers/promises" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("node:timers/promises");

/***/ }),

/***/ "node:tty":
/*!***************************!*\
  !*** external "node:tty" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:tty");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:v8":
/*!**************************!*\
  !*** external "node:v8" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:v8");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo-notes%2Froute&page=%2Fapi%2Fvideo-notes%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo-notes%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo-notes%2Froute&page=%2Fapi%2Fvideo-notes%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo-notes%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_janjedrach_Cursor_eduscribe_src_app_api_video_notes_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/video-notes/route.ts */ \"(rsc)/./src/app/api/video-notes/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/video-notes/route\",\n        pathname: \"/api/video-notes\",\n        filename: \"route\",\n        bundlePath: \"app/api/video-notes/route\"\n    },\n    resolvedPagePath: \"/Users/janjedrach/Cursor/eduscribe/src/app/api/video-notes/route.ts\",\n    nextConfigOutput,\n    userland: _Users_janjedrach_Cursor_eduscribe_src_app_api_video_notes_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/video-notes/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ2aWRlby1ub3RlcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdmlkZW8tbm90ZXMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ2aWRlby1ub3RlcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmphbmplZHJhY2glMkZDdXJzb3IlMkZlZHVzY3JpYmUlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9anMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz1tZHgmcm9vdERpcj0lMkZVc2VycyUyRmphbmplZHJhY2glMkZDdXJzb3IlMkZlZHVzY3JpYmUmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQjtBQUNoRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2VkdXNjcmliZS8/YTMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvamFuamVkcmFjaC9DdXJzb3IvZWR1c2NyaWJlL3NyYy9hcHAvYXBpL3ZpZGVvLW5vdGVzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdmlkZW8tbm90ZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS92aWRlby1ub3Rlc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdmlkZW8tbm90ZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvamFuamVkcmFjaC9DdXJzb3IvZWR1c2NyaWJlL3NyYy9hcHAvYXBpL3ZpZGVvLW5vdGVzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS92aWRlby1ub3Rlcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo-notes%2Froute&page=%2Fapi%2Fvideo-notes%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo-notes%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/video-notes/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/video-notes/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _services_youtube__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/youtube */ \"(rsc)/./src/services/youtube.ts\");\n/* harmony import */ var _services_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/ai */ \"(rsc)/./src/services/ai.ts\");\n/* harmony import */ var _services_subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/subscription */ \"(rsc)/./src/services/subscription.ts\");\n/* harmony import */ var _services_queue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/queue */ \"(rsc)/./src/services/queue.ts\");\n\n\n\n\n\n\n// Initialize Supabase client\nconst supabaseUrl = \"https://xhljckmlzdshxibnqsbj.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA\";\n/**\n * Get user's subscription plan for queue priority\n */ async function getSubscriptionPlan(userId) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(supabaseUrl, supabaseAnonKey);\n        const { data } = await supabase.from(\"user_subscriptions\").select(\"plan_id\").eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        const planId = data?.plan_id;\n        // Ensure we return a valid plan type\n        if (planId === \"student\" || planId === \"pro\") {\n            return {\n                planId\n            };\n        }\n        return {\n            planId: \"free\"\n        };\n    } catch (error) {\n        console.warn(\"[Video Notes API] Could not fetch subscription:\", error);\n        return {\n            planId: \"free\"\n        };\n    }\n}\n/**\n * Video Notes API Endpoint - Isolated System\n * \n * Processes a YouTube URL to:\n * 1. Extract the video ID\n * 2. Get video information (title, thumbnail)\n * 3. Fetch the transcript\n * 4. Generate AI notes\n * 5. Store in the isolated video_notes table\n */ async function POST(request) {\n    console.log(\"[Video Notes API] Request received: POST\");\n    try {\n        // STEP 1: Authenticate the request\n        console.log(\"[Video Notes API] Authenticating request\");\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            console.error(\"[Video Notes API] Authentication missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\",\n                message: \"Valid Bearer token is required\"\n            }, {\n                status: 401\n            });\n        }\n        // Initialize Supabase client with the token\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        // Verify the user's token and set the session\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            console.error(\"[Video Notes API] Authentication failed:\", authError?.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\",\n                message: authError?.message || \"Invalid authentication token\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(`[Video Notes API] User authenticated: ${user.id}`);\n        // STEP 1.5: Check usage limits BEFORE processing\n        console.log(\"[Video Notes API] Checking usage limits\");\n        const usageCheck = await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.checkUsageLimits)(user.id, token, \"video\");\n        if (!usageCheck.canGenerate) {\n            console.log(`[Video Notes API] Generation limit reached: ${usageCheck.reason}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Generation limit reached\",\n                message: usageCheck.reason || \"You have reached your monthly note generation limit\",\n                usage: usageCheck.usage,\n                limits: usageCheck.limits\n            }, {\n                status: 429\n            }); // 429 = Too Many Requests\n        }\n        if (!usageCheck.canSave) {\n            console.log(`[Video Notes API] Storage limit reached: ${usageCheck.reason}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Storage limit reached\",\n                message: usageCheck.reason || \"You have reached your saved notes limit\",\n                usage: usageCheck.usage,\n                limits: usageCheck.limits\n            }, {\n                status: 429\n            });\n        }\n        console.log(`[Video Notes API] Usage check passed - can generate: ${usageCheck.canGenerate}, can save: ${usageCheck.canSave}`);\n        // Get user's subscription for priority\n        const subscription = await getSubscriptionPlan(user.id);\n        // Wrap the processing in queue\n        const result = await (0,_services_queue__WEBPACK_IMPORTED_MODULE_4__.queueRequest)(user.id, subscription.planId, \"video\", async ()=>{\n            // Original processing logic goes here\n            const body = await request.json();\n            const { url, title: customTitle } = body;\n            if (!url) {\n                console.error(\"[Video Notes API] Missing URL parameter\");\n                return {\n                    success: false,\n                    error: \"Missing URL\",\n                    message: \"Please provide a YouTube URL\"\n                };\n            }\n            console.log(`[Video Notes API] Processing URL: ${url}`);\n            // STEP 3: Extract and validate YouTube video ID\n            const videoId = (0,_services_youtube__WEBPACK_IMPORTED_MODULE_1__.extractYouTubeId)(url);\n            if (!videoId || !(0,_services_youtube__WEBPACK_IMPORTED_MODULE_1__.isValidYouTubeId)(videoId)) {\n                console.error(\"[Video Notes API] Invalid YouTube URL:\", url);\n                return {\n                    success: false,\n                    error: \"Invalid YouTube URL\",\n                    message: \"The provided URL is not a valid YouTube video URL\"\n                };\n            }\n            console.log(`[Video Notes API] Valid YouTube ID: ${videoId}`);\n            // STEP 4: Check if we already have notes for this video\n            try {\n                const { data: existingNote, error: existingError } = await supabase.from(\"video_notes\").select(\"id, video_id\").eq(\"video_id\", videoId).eq(\"user_id\", user.id).single();\n                if (existingNote && !existingError) {\n                    console.log(`[Video Notes API] Notes already exist for video: ${videoId}`);\n                    return {\n                        success: false,\n                        error: \"Duplicate note\",\n                        message: \"Notes for this video already exist\",\n                        noteId: existingNote.id\n                    };\n                }\n            } catch (checkError) {\n                console.error(\"[Video Notes API] Error checking for existing notes:\", checkError);\n            // Continue processing - this is not a critical error\n            }\n            // STEP 5: Get video information (title, thumbnail, etc.)\n            console.log(\"[Video Notes API] Fetching video information\");\n            const videoInfo = await (0,_services_youtube__WEBPACK_IMPORTED_MODULE_1__.getVideoInfo)(videoId);\n            if (!videoInfo || videoInfo.error) {\n                console.error(\"[Video Notes API] Failed to get video info:\", videoInfo?.error || \"Unknown error\");\n                return {\n                    success: false,\n                    error: \"Video info error\",\n                    message: videoInfo?.error || \"Failed to retrieve video information\"\n                };\n            }\n            console.log(`[Video Notes API] Video info retrieved: \"${videoInfo.title}\"`);\n            // STEP 6: Fetch video transcript\n            console.log(\"[Video Notes API] Fetching video transcript\");\n            const transcriptResult = await (0,_services_youtube__WEBPACK_IMPORTED_MODULE_1__.getVideoTranscript)(videoId);\n            if (!transcriptResult || transcriptResult.error) {\n                console.error(\"[Video Notes API] Transcript error:\", transcriptResult?.error || \"Unknown error\");\n                return {\n                    success: false,\n                    error: \"Transcript error\",\n                    message: transcriptResult?.error || \"Failed to extract transcript from the video\"\n                };\n            }\n            if (!transcriptResult.transcript || transcriptResult.transcript.trim().length === 0) {\n                console.error(\"[Video Notes API] Empty transcript\");\n                return {\n                    success: false,\n                    error: \"Empty transcript\",\n                    message: \"The video does not have any extractable content for notes\"\n                };\n            }\n            console.log(`[Video Notes API] Transcript retrieved (${transcriptResult.transcript.length} chars)`);\n            // STEP 7: Generate notes using AI\n            console.log(\"[Video Notes API] Generating notes from transcript\");\n            const notesResult = await (0,_services_ai__WEBPACK_IMPORTED_MODULE_2__.generateNotes)({\n                transcript: transcriptResult.transcript,\n                videoTitle: videoInfo.title\n            });\n            if (!notesResult.content) {\n                console.error(\"[Video Notes API] AI note generation failed:\", notesResult.error);\n                return {\n                    success: false,\n                    error: \"Note generation failed\",\n                    message: notesResult.error || \"Failed to generate notes from the transcript\"\n                };\n            }\n            console.log(`[Video Notes API] Successfully generated notes (${notesResult.content.length} chars)`);\n            // STEP 8: Create the note record for isolated video_notes table\n            const noteId = `video_${Date.now()}`;\n            const noteData = {\n                id: noteId,\n                user_id: user.id,\n                video_url: url,\n                video_id: videoId,\n                title: customTitle || videoInfo.title,\n                thumbnail_url: videoInfo.thumbnailUrl,\n                content: notesResult.content,\n                summary: notesResult.summary,\n                quiz: notesResult.quiz,\n                created_at: new Date().toISOString()\n            };\n            console.log(`[Video Notes API] Created note with ID: ${noteId}`);\n            console.log(\"[Video Notes API] Note data structure:\", Object.keys(noteData).join(\", \"));\n            // STEP 9: Store the note in Supabase video_notes table\n            console.log(\"[Video Notes API] Storing note in Supabase video_notes table\");\n            try {\n                // Verify database connection before attempting insert\n                try {\n                    const { error: pingError } = await supabase.from(\"video_notes\").select(\"count\").limit(1);\n                    if (pingError) {\n                        console.error(\"[Video Notes API] Database connection check failed:\", pingError);\n                        return {\n                            success: false,\n                            error: \"Database connection error\",\n                            message: \"Could not connect to the database. Please try again later.\",\n                            details: {\n                                code: pingError.code,\n                                message: pingError.message\n                            }\n                        };\n                    }\n                } catch (pingException) {\n                    console.error(\"[Video Notes API] Database ping exception:\", pingException);\n                }\n                const { data, error } = await supabase.from(\"video_notes\").insert(noteData).select().single();\n                if (error) {\n                    console.error(\"[Video Notes API] Database storage error:\", error);\n                    // Log detailed diagnostic information\n                    console.error(\"[Video Notes API] Database error details:\", {\n                        code: error.code,\n                        message: error.message,\n                        details: error.details,\n                        hint: error.hint\n                    });\n                    // Handle specific database errors with appropriate status codes\n                    if (error.code === \"23505\") {\n                        return {\n                            success: false,\n                            error: \"Duplicate record\",\n                            message: \"Notes for this video already exist in the database\",\n                            details: {\n                                code: error.code,\n                                message: error.message\n                            }\n                        };\n                    } else if (error.code?.startsWith(\"22\") || error.code?.startsWith(\"23\")) {\n                        // Data exception (22) or integrity constraint violation (23)\n                        return {\n                            success: false,\n                            error: \"Invalid data format\",\n                            message: \"The note data could not be stored due to validation errors\",\n                            details: {\n                                code: error.code,\n                                message: error.message\n                            }\n                        };\n                    } else if (error.code === \"42P01\") {\n                        // Undefined table\n                        return {\n                            success: false,\n                            error: \"Schema error\",\n                            message: \"The video_notes table does not exist. Please run the database initialization.\",\n                            details: {\n                                code: error.code,\n                                message: error.message\n                            }\n                        };\n                    }\n                    return {\n                        success: false,\n                        error: \"Database error\",\n                        message: \"Failed to store the notes in the database\",\n                        details: {\n                            code: error.code,\n                            message: error.message\n                        }\n                    };\n                }\n                console.log(`[Video Notes API] Successfully stored note in database with ID: ${data?.id || noteId}`);\n                // STEP 10.5: Track usage after successful creation\n                console.log(\"[Video Notes API] Incrementing usage counters\");\n                try {\n                    await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.incrementUsage)(user.id, token, \"video\");\n                    console.log(\"[Video Notes API] Usage tracking completed\");\n                } catch (usageError) {\n                    console.error(\"[Video Notes API] Usage tracking failed (note still created):\", usageError);\n                // Don't fail the request if usage tracking fails\n                }\n                // STEP 10.6: Refresh saved notes count\n                console.log(\"[Video Notes API] Refreshing saved notes count\");\n                try {\n                    await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.refreshSavedNotesCount)(user.id, token);\n                    console.log(\"[Video Notes API] Saved notes count refreshed\");\n                } catch (countError) {\n                    console.error(\"[Video Notes API] Saved notes count refresh failed (note still created):\", countError);\n                // Don't fail the request if count refresh fails\n                }\n                return {\n                    success: true,\n                    data\n                };\n            } catch (dbError) {\n                console.error(\"[Video Notes API] Unexpected database error:\", dbError);\n                return {\n                    success: false,\n                    error: \"Database exception\",\n                    message: dbError?.message || \"An unexpected error occurred while storing notes\",\n                    details: dbError\n                };\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"[Video Notes API] Critical error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: \"An unexpected error occurred on the server\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Get all video notes for the authenticated user\n */ async function GET(request) {\n    console.log(\"[Video Notes API] Request received: GET\");\n    try {\n        // STEP 1: Authenticate the request\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            console.error(\"[Video Notes API] Authentication missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\",\n                message: \"Valid Bearer token is required\"\n            }, {\n                status: 401\n            });\n        }\n        // Initialize Supabase client with the token\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        // Verify the user's token and set the session\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            console.error(\"[Video Notes API] Authentication failed:\", authError?.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\",\n                message: authError?.message || \"Invalid authentication token\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(`[Video Notes API] User authenticated: ${user.id}`);\n        // STEP 2: Fetch the user's video notes\n        const { data, error } = await supabase.from(\"video_notes\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"[Video Notes API] Database fetch error:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Database error\",\n                message: \"Failed to fetch video notes from the database\",\n                details: {\n                    code: error.code,\n                    message: error.message\n                }\n            }, {\n                status: 500\n            });\n        }\n        console.log(`[Video Notes API] Successfully fetched ${data.length} video notes`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data\n        });\n    } catch (error) {\n        console.error(\"[Video Notes API] Error fetching video notes:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: \"An unexpected error occurred while fetching video notes\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Delete a specific video note for the authenticated user\n */ async function DELETE(request) {\n    console.log(\"[Video Notes API] Request received: DELETE\");\n    try {\n        // STEP 1: Authenticate the request\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n            console.error(\"[Video Notes API] Authentication missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\",\n                message: \"Valid Bearer token is required\"\n            }, {\n                status: 401\n            });\n        }\n        // Initialize Supabase client with the token\n        const token = authHeader.replace(\"Bearer \", \"\");\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        // Verify the user's token and set the session\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) {\n            console.error(\"[Video Notes API] Authentication failed:\", authError?.message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication failed\",\n                message: authError?.message || \"Invalid authentication token\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(`[Video Notes API] User authenticated: ${user.id}`);\n        // STEP 2: Get the note ID from query parameters\n        const noteId = request.nextUrl.searchParams.get(\"id\");\n        if (!noteId) {\n            console.error(\"[Video Notes API] Note ID missing\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Missing note ID\",\n                message: \"Note ID is required for deletion\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`[Video Notes API] Deleting note with ID: ${noteId}`);\n        // STEP 3: Delete the note (with user ownership check)\n        const { data, error } = await supabase.from(\"video_notes\").delete().eq(\"id\", noteId).eq(\"user_id\", user.id) // Ensure user can only delete their own notes\n        .select();\n        if (error) {\n            console.error(\"[Video Notes API] Database delete error:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Database error\",\n                message: \"Failed to delete the note from the database\",\n                details: {\n                    code: error.code,\n                    message: error.message\n                }\n            }, {\n                status: 500\n            });\n        }\n        // Check if any rows were affected\n        if (!data || data.length === 0) {\n            console.error(`[Video Notes API] Note not found or access denied: ${noteId}`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Note not found\",\n                message: \"The note was not found or you do not have permission to delete it\"\n            }, {\n                status: 404\n            });\n        }\n        console.log(`[Video Notes API] Successfully deleted note: ${noteId}`);\n        // Refresh saved notes count after deletion\n        try {\n            await (0,_services_subscription__WEBPACK_IMPORTED_MODULE_3__.refreshSavedNotesCount)(user.id, token);\n            console.log(\"[Video Notes API] Saved notes count refreshed after deletion\");\n        } catch (countError) {\n            console.error(\"[Video Notes API] Saved notes count refresh failed after deletion:\", countError);\n        // Don't fail the request if count refresh fails\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Note deleted successfully\",\n            data: data[0]\n        });\n    } catch (error) {\n        console.error(\"[Video Notes API] Error deleting video note:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error\",\n            message: \"An unexpected error occurred while deleting the note\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n// Configure dynamic behavior to avoid caching\nconst dynamic = \"force-dynamic\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/video-notes/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ai.ts":
/*!****************************!*\
  !*** ./src/services/ai.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateNotes: () => (/* binding */ generateNotes)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/splitTranscript */ \"(rsc)/./src/utils/splitTranscript.ts\");\n\n\n// Validate API key presence\nconst openaiApiKey = process.env.OPENAI_API_KEY;\nif (!openaiApiKey) {\n    console.error(\"[OpenAI] API key is missing from environment variables!\");\n}\n// Initialize OpenAI client with error handling\nlet openai = null;\ntry {\n    openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        apiKey: openaiApiKey\n    });\n} catch (error) {\n    console.error(\"[OpenAI] Failed to initialize client:\", error);\n}\nconst MAX_RETRIES = 2;\nconst RETRY_DELAY = 1000; // 1 second\n/**\n * Delays execution for specified milliseconds\n */ const delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n/**\n * Processes a single chunk of transcript using OpenAI with retries\n */ async function processChunkWithRetry(chunk, retryCount = 0) {\n    try {\n        // Validate OpenAI client initialization\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        // Validate chunk size\n        if (!(0,_utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__.isChunkWithinTokenLimit)(chunk)) {\n            throw new Error(\"Chunk exceeds token limit\");\n        }\n        console.log(`[OpenAI] Processing chunk ${chunk.index} (${chunk.content.length} chars)`);\n        const startTime = Date.now();\n        // Add timeout to prevent long-running requests\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Request timeout\")), 60000); // 60 second timeout\n        });\n        // Enhanced educational prompt for structured notes with deep semantic content\n        const completionPromise = openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational content creator, researcher, and teacher with deep knowledge across multiple domains. Create comprehensive, high-quality study notes with exceptional educational value and semantic depth.\n\nCRITICAL REQUIREMENTS:\n- Write in Polish\n- DO NOT include the original source text or transcript\n- Create ONLY summarized, structured educational notes with deep explanations\n- Use clear markdown formatting with proper headings\n- Structure like professional university-level study materials\n- Focus on DEEP SEMANTIC UNDERSTANDING and practical applications\n- ABSOLUTELY NO TABLES OF ANY KIND - NEVER USE | symbols or table syntax\n- AVOID REPETITIVE CONTENT - each concept should be explained once thoroughly\n- Provide CONCRETE TECHNIQUES, METHODS, and DETAILED EXPLANATIONS instead of generic statements\n\n❌ FORBIDDEN CONTENT PATTERNS:\n- Vague statements like \"istnieją metody\" without listing them\n- Repetitive explanations of the same concept across sections\n- Superficial overviews without depth\n- Generic advice without specific techniques\n- Any table format (| symbols, markdown tables, HTML tables)\n- \"Notatki:\" prefixes in titles\n\n✅ REQUIRED DEPTH AND QUALITY:\n- When mentioning techniques, LIST AND EXPLAIN them in detail\n- Provide step-by-step processes where applicable\n- Include specific examples, formulas, or procedures\n- Explain WHY concepts work, not just WHAT they are\n- Connect concepts to real-world applications\n- Give concrete, actionable information\n\nFORMATTING GUIDELINES - PROFESSIONAL & READABLE:\n- Start with a clear title using ## WITHOUT \"Notatki:\" prefix (e.g., ## 🧠 Techniki Efektywnego Uczenia)\n- Add one-sentence topic description right after title\n- Include \"📚 Przegląd Materiału\" section at top (5-6 bullet points max covering main concepts)\n- Use #### for main sections with emojis and numbering (e.g., #### 1. 🎯 Technika Pomodoro)\n- Use ##### for subsections when needed\n- Use moderate spacing between sections\n\nCONTENT STRUCTURE REQUIREMENTS:\n- REPLACE ALL TABLES with detailed bullet lists using \"Feature: Explanation\" format\n- Use **bold** sparingly for only the most important terms\n- Highlight key definitions with 🔑 icon: \"🔑 **Definicja:** *Term* - comprehensive explanation with context...\"\n- Highlight important concepts with 🎯 icon: \"🎯 **Kluczowy mechanizm:** detailed explanation of how it works...\"\n- For techniques, use step-by-step format:\n  **Implementacja techniki:**\n  1. **Krok 1**: szczegółowy opis działania\n  2. **Krok 2**: konkretne instrukcje\n  3. **Krok 3**: praktyczne wskazówki\n- Add section numbering (1., 2., 3.) for main topics\n- NEVER repeat the same definitions or explanations across sections\n\nEDUCATIONAL DEPTH REQUIREMENTS:\nWhen discussing any topic, you MUST:\n1. **Define precisely** - not just \"what is X\" but \"what is X, how does it work, and why is it important\"\n2. **List specific methods** - if mentioning \"techniques\" or \"methods\", always provide concrete examples:\n   - Instead of: \"istnieją techniki zapamiętywania\"\n   - Write: \"techniki zapamiętywania obejmują: Metodę Pałacu Pamięci (wizualizacja przestrzenna), System Powtórek Rozłożonych w Czasie (algorytm SM-2), Aktywne Przypominanie (retrieval practice), oraz Technikę Feynmana (wyjaśnianie prostymi słowami)\"\n3. **Explain mechanisms** - describe HOW and WHY things work\n4. **Provide procedures** - give step-by-step instructions for practical applications\n5. **Include real examples** - concrete scenarios, calculations, or implementations\n\nALTERNATIVE COMPARISON FORMATS (instead of tables):\n1. **Detailed Comparison Lists**:\n   **Różnice między metodą A i B:**\n   - **Efektywność**: Metoda A osiąga 85% skuteczność w badaniach kontrolowanych, podczas gdy metoda B pokazuje 72% skuteczność\n   - **Implementacja**: A wymaga 15-20 minut przygotowania, B można zastosować natychmiast\n   - **Zastosowanie**: A działa najlepiej przy materiale faktograficznym, B przy koncepcjach abstrakcyjnych\n   \n2. **Sequential Detailed Descriptions**:\n   **Metoda A - Szczegółowy Opis:**\n   - **Procedura**: Dokładne kroki 1-5 z czasem wykonania\n   - **Mechanizm działania**: Neurologiczne podstawy skuteczności\n   - **Optymalizacja**: Konkretne wskazówki dostosowania do różnych typów treści\n\nREQUIRED SECTIONS:\n1. **Title with emoji but NO \"Notatki:\" prefix** (just the topic name)\n2. **📚 Przegląd Materiału** (5-6 comprehensive overview points)\n3. **Numbered main sections** with deep content (aim for 3-4 major sections)\n4. **Detailed subsections** with specific techniques, methods, formulas\n5. **Section summaries after each major section** (paragraph style recap)\n6. **🎯 Szybkie Streszczenie** (3-6 lines max at very end) - NOT \"TL;DR\"\n\nSECTION SUMMARIES (ESSENTIAL):\nAfter each major section (####), add a substantive summary:\n> **Podsumowanie sekcji:** [4-6 sentence detailed explanation connecting all concepts from the section, explaining practical implications and how the techniques integrate with broader understanding]\n\nSEMANTIC DEPTH EXAMPLES:\n❌ AVOID: \"Technika Pomodoro jest metodą zarządzania czasem\"\n✅ PROVIDE: \"Technika Pomodoro jest metodą zarządzania czasem opartą na badaniach neuronaukowych dotyczących cykli uwagi. Polega na podziale pracy na 25-minutowe bloki (pomodoros) z 5-minutowymi przerwami, wykorzystując naturalny rytm uwagi mózgu i zapobiegając zmęczeniu poznawczemu poprzez aktywną regenerację prefrontalnej kory mózgowej.\"\n\n❌ AVOID: \"Istnieją różne metody uczenia\"\n✅ PROVIDE: \"Główne metody uczenia oparte na dowodach naukowych to: 1) Aktywne Przypominanie (retrieval practice) - aktywne odtwarzanie informacji z pamięci, co wzmacnia ścieżki neuronalne; 2) Powtórki Rozłożone (spaced repetition) - algorytmiczne planowanie powtórek w optymalnych odstępach czasu; 3) Naprzemienne Uczenie (interleaving) - mieszanie różnych typów zadań dla lepszej dyskryminacji pojęć; 4) Elaborative Interrogation - zadawanie pytań 'dlaczego' i 'jak' dla głębszego zrozumienia mechanizmów.\"\n\nVISUAL ENHANCEMENTS - BALANCED APPROACH:\n- Use emojis strategically for sections and key concepts\n- Format definitions as: \"🔑 **Definicja:** *Term* - comprehensive explanation with scientific background\"\n- Format key mechanisms as: \"🎯 **Kluczowy mechanizm:** detailed explanation of how and why it works\"\n- Use \"📋 *Procedura:*\" for step-by-step instructions\n- Use \"🧪 *Przykład:*\" for concrete examples with specific details\n- Use \"⚡ *Optymalizacja:*\" for advanced tips and customization\n- NEVER use any table format\n- Use moderate spacing and balanced formatting\n\nEXAMPLE STRUCTURE:\n## 🧠 Techniki Efektywnego Uczenia\nZaawansowane metody optymalizacji procesów poznawczych oparte na najnowszych badaniach neuronaukowych i psychologii kognitywnej.\n\n### 📚 Przegląd Materiału\n- Aktywne Przypominanie jako najskuteczniejsza metoda wzmacniania pamięci długotrwałej\n- System Powtórek Rozłożonych w Czasie z algorytmem SM-2 dla optymalnego planowania\n- Technika Pomodoro wykorzystująca naturalne cykle uwagi i regeneracji neuronowej\n- Metoda Feynmana dla głębokiego zrozumienia przez aktywne wyjaśnianie\n- Interleaving jako strategia poprawy dyskryminacji pojęciowej\n- Neuroplastyczność i jej praktyczne zastosowania w procesie uczenia\n\n#### 1. 🎯 Aktywne Przypominanie (Retrieval Practice)\n\n🔑 **Definicja:** *Aktywne Przypominanie* - metoda uczenia polegająca na aktywnym odtwarzaniu informacji z pamięci bez pomocy materiałów źródłowych, która według badań Hermann Ebbinghausa i współczesnych neuronaukowców zwiększa siłę połączeń synaptycznych o 300-400% w porównaniu do biernego powtarzania.\n\n**Mechanizm neurologiczny:**\n- **Wzmocnienie ścieżek neuronowych**: Każde aktywne przypomnienie aktywuje te same ścieżki neuronowe co pierwotne uczenie\n- **Konsolidacja pamięci**: Proces ten przenosi informacje z hipokampa do kory mózgowej dla długotrwałego przechowywania\n- **Efekt testowania**: Próba przypomnienia, nawet nieudana, wzmacnia pamięć lepiej niż wielokrotne czytanie\n\n📋 *Procedura implementacji:*\n1. **Przygotowanie materiału** (5 min): Podziel treść na logiczne sekcje po 200-300 słów\n2. **Pierwsza lektura** (15-20 min): Przeczytaj uważnie z pełnym skupieniem\n3. **Zamknięcie materiału** (0 min): Całkowicie usuń dostęp do notatek\n4. **Aktywne odtworzenie** (10-15 min): Napisz lub wypowiedz wszystko co pamiętasz\n5. **Weryfikacja i uzupełnienie** (5-10 min): Porównaj z oryginałem i uzupełnij luki\n6. **Powtórka po 24h**: Wykonaj ponownie kroki 3-5 bez ponownej lektury\n\n🧪 *Przykład praktyczny:*\nPrzy nauce biochemii: zamiast wielokrotnego czytania o cyklu Krebsa, narysuj pełny schemat z pamięci z nazwami wszystkich 8 etapów, enzymów i produktów. Sprawdź dokładność i uzupełnij błędy. Powtórz za tydzień.\n\n> **Podsumowanie sekcji:** Aktywne Przypominanie wykorzystuje fundamentalne właściwości neuroplastyczności mózgu, gdzie każda próba odtworzenia z pamięci wzmacnia połączenia synaptyczne. Technika ta jest szczególnie skuteczna przy materiałach faktograficznych i procedurach, gdzie kluczowe jest precyzyjne zapamiętanie sekwencji lub definicji. Regularne stosowanie tej metody prowadzi do trwałej reorganizacji sieci neuronowych, co przekłada się na znacznie lepsze wyniki w testach długoterminowych niż tradycyjne metody powtarzania.\n\n#### 2. ⏰ System Powtórek Rozłożonych (Spaced Repetition)\n\n🔑 **Definicja:** *System Powtórek Rozłożonych* - algorytmiczny system planowania powtórek oparty na krzywej zapominania Ebbinghausa, który optymalizuje interwały między powtórkami tak, aby maksymalizować retencję przy minimalnym nakładzie czasowym.\n\n**Algorytm SM-2 (SuperMemo):**\n- **Interwał 1**: 1 dzień\n- **Interwał 2**: 6 dni  \n- **Interwał n+1**: Interwał n × Współczynnik Łatwości (EF)\n- **Współczynnik Łatwości**: 1.3-2.5 w zależności od trudności (automatycznie dostosowywany)\n\n📋 *Procedura implementacji cyfrowej:*\n1. **Wybór narzędzia**: Anki, SuperMemo, lub Quizlet z funkcją SR\n2. **Tworzenie kart**: Jedna informacja na kartę (atomic principle)\n3. **Format pytanie-odpowiedź**: Konkretne, jednoznaczne sformułowania\n4. **Codzienna sesja**: 15-30 minut o stałej porze\n5. **Ocena trudności**: Szczerze oceń łatwość przypomnienia (1-5)\n6. **Konsystencja**: Minimum 80% dni w miesiącu dla efektywności\n\n⚡ *Optymalizacja zaawansowana:*\n- **Cloze deletion**: Uzupełnianie luk w kontekście (lepsze niż proste Q&A)\n- **Image occlusion**: Zakrywanie części diagramów/map\n- **Reverse cards**: Dwukierunkowe karty dla związków przyczynowo-skutkowych\n\n> **Podsumowanie sekcji:** System Powtórek Rozłożonych wykorzystuje matematyczną precyzję algorytmu SM-2 do optymalizacji naturalnego procesu zapominania. Kluczem sukcesu jest konsystentność i właściwe dostosowanie współczynników trudności do indywidualnych możliwości kognitywnych. System ten jest szczególnie skuteczny przy nauce języków obcych, terminologii medycznej i innych materiałach wymagających długotrwałej retencji faktów.\n\n### 🎯 Szybkie Streszczenie\n- **Aktywne Przypominanie**: Odtwarzanie z pamięci wzmacnia ścieżki neuronowe 3-4x skuteczniej niż czytanie\n- **Powtórki Rozłożone**: Algorytm SM-2 optymalizuje interwały dla maksymalnej retencji przy minimalnym czasie\n- **Implementacja**: Codzienne 15-30 min sesji z konsekwentną oceną trudności materiału\n- **Efektywność**: Kombinacja obu metod może zwiększyć długoterminową retencję o 200-400%\n\nREMEMBER: \n- NO \"Notatki:\" prefixes in titles\n- NO \"TL;DR\" - use \"Szybkie Streszczenie\" instead\n- Absolutely no tables whatsoever \n- DEEP SEMANTIC CONTENT with specific techniques and detailed explanations\n- AVOID REPETITIVE CONTENT across sections\n- Always provide concrete methods, procedures, and examples\n- Focus on educational value and practical applications\n\n${chunk.content}`\n                },\n                {\n                    role: \"user\",\n                    content: `Na podstawie poniższej treści utwórz profesjonalne notatki edukacyjne z głęboką analizą semantyczną. Skoncentruj się na konkretnych technikach, szczegółowych wyjaśnieniach i praktycznych zastosowaniach. Unikaj powierzchownych opisów - zamiast tego podawaj konkretne metody, procedury i mechanizmy działania. NIE używaj tabel, NIE powtarzaj treści, użyj \"Szybkie Streszczenie\" zamiast \"TL;DR\":\n\n${chunk.content}`\n                }\n            ],\n            temperature: 0.7\n        });\n        const completion = await Promise.race([\n            completionPromise,\n            timeoutPromise\n        ]);\n        const duration = Date.now() - startTime;\n        // Log API response details for token usage monitoring\n        console.log(`[OpenAI] Chunk ${chunk.index} processed in ${duration}ms:`, {\n            promptTokens: completion.usage?.prompt_tokens,\n            completionTokens: completion.usage?.completion_tokens,\n            totalTokens: completion.usage?.total_tokens,\n            model: completion.model,\n            responseLength: completion.choices[0].message.content?.length || 0\n        });\n        const content = completion.choices[0].message.content || \"\";\n        return {\n            content,\n            chunkIndex: chunk.index\n        };\n    } catch (error) {\n        console.error(`[OpenAI] Error processing chunk ${chunk.index} (attempt ${retryCount + 1}):`, error);\n        // More detailed error logging for API issues\n        if (error instanceof Error) {\n            const errorDetails = error.toString();\n            // Network errors\n            if (errorDetails.includes(\"ECONNREFUSED\") || errorDetails.includes(\"ETIMEDOUT\") || errorDetails.includes(\"network\") || errorDetails.includes(\"connection\") || errorDetails.includes(\"socket\")) {\n                console.error(\"[OpenAI] Network error detected - check internet connection\");\n            } else if (errorDetails.includes(\"status code 401\") || errorDetails.includes(\"authentication\") || errorDetails.includes(\"api key\")) {\n                console.error(\"[OpenAI] Authentication error - check API key validity\");\n            } else if (errorDetails.includes(\"status code 429\")) {\n                console.error(\"[OpenAI] Rate limit exceeded - consider reducing request frequency\");\n            } else if (errorDetails.includes(\"status code 400\")) {\n                console.error(\"[OpenAI] Bad request error - check input format\");\n            } else if (errorDetails.includes(\"timeout\")) {\n                console.error(\"[OpenAI] Request timeout - API call took too long\");\n            }\n        }\n        // If we haven't exceeded max retries, try again after delay\n        if (retryCount < MAX_RETRIES) {\n            console.log(`[OpenAI] Retrying chunk ${chunk.index} after ${RETRY_DELAY * (retryCount + 1)}ms delay...`);\n            await delay(RETRY_DELAY * (retryCount + 1));\n            return processChunkWithRetry(chunk, retryCount + 1);\n        }\n        // If all retries failed, return error result\n        return {\n            content: \"\",\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            chunkIndex: chunk.index\n        };\n    }\n}\n/**\n * Generates a quiz based on the content with appropriate number of questions\n */ async function generateQuiz(content, retryCount = 0) {\n    try {\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        console.log(`[OpenAI] Generating quiz for content (${content.length} chars)`);\n        // Determine number of questions based on content length\n        const contentLength = content.length;\n        let numQuestions;\n        if (contentLength <= 2000) {\n            numQuestions = 10;\n        } else if (contentLength <= 3000) {\n            numQuestions = 15;\n        } else {\n            numQuestions = 20;\n        }\n        const startTime = Date.now();\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Quiz generation timeout\")), 60000);\n        });\n        const completionPromise = openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational quiz creator and teacher. Create high-quality multiple-choice questions that test understanding of key concepts and help students learn effectively.\n\nQUIZ REQUIREMENTS:\n- Create exactly ${numQuestions} questions\n- Each question must have exactly 3 options (A, B, C)\n- Only ONE correct answer per question\n- Questions should test comprehension and understanding, not just memorization\n- Write in Polish\n- Include detailed, educational explanations for correct answers\n- Base ALL questions directly on the provided note content\n- Cover different sections and topics from the notes comprehensively\n\nQUESTION QUALITY STANDARDS:\n- Focus on key concepts, main ideas, and important definitions from the notes\n- Test different levels of understanding (knowledge, comprehension, application)\n- Avoid trick questions or overly specific details not covered in notes\n- Make incorrect options plausible but clearly distinguishable from correct answer\n- Ensure questions are clear, unambiguous, and educational\n- Connect to real-world applications when mentioned in the notes\n- Cover material from all major sections of the notes\n- Include questions about definitions, comparisons, and key features\n\nCONTENT COVERAGE:\n- Distribute questions across all major sections of the notes\n- Include questions about definitions and key terms\n- Test understanding of comparisons and differences\n- Ask about examples and applications mentioned in notes\n- Cover both factual knowledge and conceptual understanding\n- Ensure comprehensive coverage of the educational material\n\nEXPLANATION QUALITY:\n- Provide comprehensive explanations that teach the concept\n- Explain WHY the answer is correct based on the notes\n- Include additional context or related information from the notes\n- Help students understand the underlying principles\n- Use educational language that reinforces learning\n- Reference specific information from the notes when explaining\n\nRESPONSE FORMAT:\nReturn ONLY a valid JSON array with this exact structure:\n[\n  {\n    \"id\": \"q1\",\n    \"question\": \"Clear, educational question that tests understanding of content from the notes?\",\n    \"options\": {\n      \"A\": \"Plausible but incorrect option based on note content\",\n      \"B\": \"Correct answer with proper terminology from notes\", \n      \"C\": \"Another plausible but incorrect option from note content\"\n    },\n    \"correctAnswer\": \"B\",\n    \"explanation\": \"Detailed explanation of why this answer is correct based on the information provided in the notes. This should reference specific concepts, definitions, or facts from the educational material and help the student understand the topic better.\"\n  }\n]\n\nEnsure the JSON is perfectly formatted and valid. Focus on creating questions that genuinely help students learn and understand the material covered in the notes.`\n                },\n                {\n                    role: \"user\",\n                    content: `Na podstawie poniższych notatek edukacyjnych utwórz ${numQuestions} przemyślanych pytań wielokrotnego wyboru. Każde pytanie MUSI być oparte bezpośrednio na treści notatek. Sprawdzaj zrozumienie kluczowych pojęć, definicji, porównań i ważnych koncepcji z notatek. Pokryj wszystkie główne sekcje materiału. Dodaj szczegółowe wyjaśnienia odwołujące się do treści notatek:\n\n${content}`\n                }\n            ],\n            temperature: 0.3\n        });\n        const completion = await Promise.race([\n            completionPromise,\n            timeoutPromise\n        ]);\n        const duration = Date.now() - startTime;\n        console.log(`[OpenAI] Quiz generated in ${duration}ms`);\n        const quizContent = completion.choices[0].message.content || \"\";\n        try {\n            // Parse the JSON response\n            const quiz = JSON.parse(quizContent);\n            // Validate the quiz structure\n            if (!Array.isArray(quiz)) {\n                throw new Error(\"Quiz response is not an array\");\n            }\n            // Validate each question\n            for (const question of quiz){\n                if (!question.id || !question.question || !question.options || !question.correctAnswer) {\n                    throw new Error(\"Invalid question structure\");\n                }\n                if (!question.options.A || !question.options.B || !question.options.C) {\n                    throw new Error(\"Missing question options\");\n                }\n                if (![\n                    \"A\",\n                    \"B\",\n                    \"C\"\n                ].includes(question.correctAnswer)) {\n                    throw new Error(\"Invalid correct answer\");\n                }\n            }\n            console.log(`[OpenAI] Successfully generated ${quiz.length} quiz questions`);\n            return {\n                quiz\n            };\n        } catch (parseError) {\n            console.error(\"[OpenAI] Failed to parse quiz JSON:\", parseError);\n            console.error(\"[OpenAI] Raw quiz content:\", quizContent);\n            throw new Error(\"Failed to parse quiz response as valid JSON\");\n        }\n    } catch (error) {\n        console.error(`[OpenAI] Error generating quiz (attempt ${retryCount + 1}):`, error);\n        // Retry logic for quiz generation\n        if (retryCount < MAX_RETRIES) {\n            console.log(`[OpenAI] Retrying quiz generation after ${RETRY_DELAY * (retryCount + 1)}ms delay...`);\n            await delay(RETRY_DELAY * (retryCount + 1));\n            return generateQuiz(content, retryCount + 1);\n        }\n        // If all retries failed, return empty quiz with error\n        return {\n            quiz: [],\n            error: error instanceof Error ? error.message : \"Unknown error generating quiz\"\n        };\n    }\n}\n/**\n * Generates notes from a transcript using AI by processing it in chunks\n */ async function generateNotes(request) {\n    console.log(`[OpenAI] Starting notes generation for text (${request.transcript.length} chars)`);\n    const startTime = Date.now();\n    try {\n        // Validate OpenAI client initialization\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized due to configuration issues\");\n        }\n        // Validate transcript input\n        if (!request.transcript || typeof request.transcript !== \"string\" || request.transcript.trim().length === 0) {\n            throw new Error(\"Empty or invalid transcript provided\");\n        }\n        // Split transcript into chunks\n        const chunks = (0,_utils_splitTranscript__WEBPACK_IMPORTED_MODULE_0__.splitTranscriptIntoChunks)(request.transcript);\n        console.log(`[OpenAI] Split text into ${chunks.length} chunks`);\n        if (chunks.length === 0) {\n            throw new Error(\"No valid text chunks could be created from the transcript\");\n        }\n        // Process all chunks with retries\n        const chunkPromises = chunks.map((chunk)=>processChunkWithRetry(chunk));\n        const results = await Promise.all(chunkPromises);\n        // Sort results by chunk index to maintain order\n        results.sort((a, b)=>a.chunkIndex - b.chunkIndex);\n        // Track failed chunks\n        const failedChunks = results.filter((result)=>result.error).map((result)=>({\n                index: result.chunkIndex,\n                reason: result.error || \"Unknown error\",\n                attempts: MAX_RETRIES + 1,\n                startWord: chunks[result.chunkIndex]?.startWord || 0,\n                endWord: chunks[result.chunkIndex]?.endWord || 0\n            }));\n        // Log completion status\n        const duration = Date.now() - startTime;\n        console.log(`[OpenAI] Notes generation completed in ${duration}ms:`, {\n            totalChunks: chunks.length,\n            successfulChunks: chunks.length - failedChunks.length,\n            failedChunks: failedChunks.length\n        });\n        // If all chunks failed, throw an error\n        if (failedChunks.length === chunks.length) {\n            throw new Error(`All ${chunks.length} chunks failed to process. First error: ${failedChunks[0]?.reason}`);\n        }\n        // Combine successful chunks\n        const successfulNotes = results.filter((result)=>result.content).map((result)=>result.content).join(\"\\n\\n---\\n\\n\");\n        // If no content was generated despite some chunks \"succeeding\", that's an error\n        if (!successfulNotes || successfulNotes.trim().length === 0) {\n            throw new Error(\"No content was generated from any chunks\");\n        }\n        // Generate quiz based on the notes content\n        console.log(\"[OpenAI] Generating quiz for the notes...\");\n        const quizResult = await generateQuiz(successfulNotes);\n        if (quizResult.error) {\n            console.warn(\"[OpenAI] Quiz generation failed:\", quizResult.error);\n        } else {\n            console.log(`[OpenAI] Successfully generated ${quizResult.quiz.length} quiz questions`);\n        }\n        // Generate summary from the notes content\n        console.log(\"[OpenAI] Generating condensed summary from full notes\");\n        const summary = await generateSummary(successfulNotes);\n        // Return result with partial success information if needed\n        return {\n            content: successfulNotes,\n            summary: summary,\n            quiz: quizResult.quiz,\n            partialSuccess: failedChunks.length > 0,\n            failedChunks: failedChunks.length > 0 ? failedChunks : undefined,\n            error: failedChunks.length > 0 ? `Niektóre fragmenty nie zostały przetworzone (${failedChunks.length}/${chunks.length})` : undefined\n        };\n    } catch (error) {\n        const duration = Date.now() - startTime;\n        console.error(`[OpenAI] Error generating notes after ${duration}ms:`, error);\n        // Create user-friendly error message based on the type of error\n        let errorMessage = \"Wystąpił błąd podczas generowania notatek. Proszę spr\\xf3bować ponownie.\";\n        if (error instanceof Error) {\n            const errorDetails = error.toString();\n            if (errorDetails.includes(\"API key\")) {\n                errorMessage = \"Błąd konfiguracji API. Proszę skontaktować się z administratorem.\";\n            } else if (errorDetails.includes(\"network\") || errorDetails.includes(\"timeout\")) {\n                errorMessage = \"Problem z połączeniem sieciowym podczas komunikacji z API. Proszę spr\\xf3bować ponownie.\";\n            } else if (errorDetails.includes(\"rate limit\") || errorDetails.includes(\"429\")) {\n                errorMessage = \"Przekroczono limit zapytań do API. Proszę spr\\xf3bować ponownie za kilka minut.\";\n            } else if (errorDetails.includes(\"empty\") || errorDetails.includes(\"invalid transcript\")) {\n                errorMessage = \"Nie można wygenerować notatek z pustego lub nieprawidłowego transkryptu.\";\n            }\n        }\n        return {\n            content: \"\",\n            summary: \"\",\n            quiz: [],\n            error: errorMessage,\n            partialSuccess: false\n        };\n    }\n}\nasync function generateSummary(content, retryCount = 0) {\n    try {\n        console.log(\"[OpenAI] Generating condensed summary from full notes\");\n        if (!openai) {\n            throw new Error(\"OpenAI client is not initialized\");\n        }\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert educational summarizer specializing in creating concise, high-value summaries of academic content.\n\nCRITICAL REQUIREMENTS:\n- Write in Polish\n- Create a VERY SHORT summary (3-5 bullet points maximum)\n- Focus ONLY on the most essential, actionable insights\n- Write in simple, clear language suitable for quick review\n- Each point should be one concise sentence capturing a key concept or practical application\n- NO detailed explanations - just the core ideas that students need to remember\n- NO formatting, emojis, or markdown - just clean bullet points\n- AVOID repetitive content - each point should cover a different aspect\n\nSUMMARY QUALITY STANDARDS:\n- Each bullet point should represent a distinct, valuable insight\n- Focus on practical applications, key definitions, or important mechanisms\n- Prioritize information that would be most useful for exam review or quick reference\n- Balance theoretical concepts with practical applications\n- Use concrete, specific language rather than vague generalizations\n\nSTRUCTURE:\nCreate 3-5 bullet points that capture:\n- Most important definition or core concept (if applicable)\n- Key practical technique or method (with specific name/approach)\n- Critical mechanism or principle that explains \"how\" something works\n- Most significant application or real-world relevance\n- Essential takeaway for understanding or implementation\n\nLANGUAGE STYLE:\n- Professional but accessible\n- Specific terminology where appropriate\n- Active voice preferred\n- Concrete rather than abstract language\n\nEXAMPLE OUTPUT (for learning techniques topic):\n- Aktywne Przypominanie wzmacnia pamięć 3-4x skuteczniej niż pasywne czytanie przez aktywację tych samych ścieżek neuronowych\n- System Powtórek Rozłożonych wykorzystuje algorytm SM-2 do optymalizacji interwałów między powtórkami (1 dzień, 6 dni, następnie x2.5)\n- Technika Pomodoro dzieli pracę na 25-minutowe bloki z 5-minutowymi przerwami, wykorzystując naturalny cykl uwagi mózgu\n- Implementacja wymaga codziennej konsystencji przez minimum 80% dni w miesiącu dla osiągnięcia optymalnych rezultatów`\n                },\n                {\n                    role: \"user\",\n                    content: `Create a high-quality, condensed summary focusing on the most essential and actionable insights from these notes. Focus on key concepts, practical techniques, and important mechanisms that students should remember:\\n\\n${content}`\n                }\n            ],\n            max_tokens: 400,\n            temperature: 0.3\n        });\n        const summary = completion.choices[0]?.message?.content?.trim() || \"\";\n        if (!summary) {\n            throw new Error(\"Empty summary generated\");\n        }\n        console.log(`[OpenAI] Summary generated successfully (${summary.length} characters)`);\n        return summary;\n    } catch (error) {\n        console.error(`[OpenAI] Error generating summary (attempt ${retryCount + 1}):`, error.message);\n        if (retryCount < 2) {\n            console.log(`[OpenAI] Retrying summary generation in ${(retryCount + 1) * 1000}ms...`);\n            await delay((retryCount + 1) * 1000);\n            return generateSummary(content, retryCount + 1);\n        }\n        return \"Nie udało się wygenerować streszczenia.\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ai.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/queue.ts":
/*!*******************************!*\
  !*** ./src/services/queue.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getQueueInfo: () => (/* binding */ getQueueInfo),\n/* harmony export */   priorityQueue: () => (/* binding */ priorityQueue),\n/* harmony export */   queueRequest: () => (/* binding */ queueRequest)\n/* harmony export */ });\n/**\n * Priority Queue Service for EduScribe\n * \n * Provides priority-based request queuing for note generation\n * with subscription tier support\n */ class PriorityQueueService {\n    /**\n   * Add request to queue with priority based on subscription\n   */ async addToQueue(userId, requestType, subscriptionPlan, payload, processingFunction) {\n        const priority = this.getPriorityFromPlan(subscriptionPlan);\n        const itemId = `${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        return new Promise((resolve, reject)=>{\n            const queueItem = {\n                id: itemId,\n                userId,\n                priority,\n                requestType,\n                payload,\n                resolve: async (value)=>{\n                    try {\n                        const result = await processingFunction();\n                        resolve(result);\n                    } catch (error) {\n                        reject(error);\n                    } finally{\n                        this.processing.delete(itemId);\n                        this.processNext();\n                    }\n                },\n                reject: (error)=>{\n                    this.processing.delete(itemId);\n                    reject(error);\n                    this.processNext();\n                },\n                timestamp: new Date()\n            };\n            this.insertByPriority(queueItem);\n            console.log(`[Queue] Added ${requestType} request for user ${userId} with priority ${priority}`);\n            this.processNext();\n        });\n    }\n    /**\n   * Get current queue statistics for UI display\n   */ getQueueStats(userId) {\n        const userPosition = userId ? this.getUserPosition(userId) : null;\n        const priorityBreakdown = this.queue.reduce((acc, item)=>{\n            if (item.priority === 1) acc.high++;\n            else if (item.priority === 2) acc.medium++;\n            else acc.low++;\n            return acc;\n        }, {\n            high: 0,\n            medium: 0,\n            low: 0\n        });\n        const estimatedWaitTime = userPosition ? userPosition * this.averageProcessingTime : this.queue.length * this.averageProcessingTime;\n        return {\n            totalItems: this.queue.length,\n            priorityBreakdown,\n            estimatedWaitTime\n        };\n    }\n    /**\n   * Get user's position in queue\n   */ getUserPosition(userId) {\n        const index = this.queue.findIndex((item)=>item.userId === userId);\n        return index === -1 ? null : index + 1;\n    }\n    /**\n   * Process next items in queue\n   */ processNext() {\n        const currentlyProcessing = this.processing.size;\n        if (currentlyProcessing >= this.maxConcurrent || this.queue.length === 0) {\n            return;\n        }\n        // Take next item (already sorted by priority)\n        const nextItem = this.queue.shift();\n        if (!nextItem) return;\n        this.processing.set(nextItem.id, true);\n        console.log(`[Queue] Processing ${nextItem.requestType} for user ${nextItem.userId} (priority ${nextItem.priority})`);\n        // Start processing\n        setTimeout(()=>{\n            nextItem.resolve(null); // The actual processing happens in the resolve function\n        }, 100);\n    }\n    /**\n   * Insert item into queue maintaining priority order\n   */ insertByPriority(item) {\n        // Find insertion point (sorted by priority, then by timestamp)\n        let insertIndex = 0;\n        for(let i = 0; i < this.queue.length; i++){\n            const existingItem = this.queue[i];\n            // Higher priority (lower number) goes first\n            if (item.priority < existingItem.priority) {\n                break;\n            }\n            // Same priority, older timestamp goes first\n            if (item.priority === existingItem.priority && item.timestamp >= existingItem.timestamp) {\n                insertIndex = i + 1;\n            } else if (item.priority > existingItem.priority) {\n                insertIndex = i + 1;\n            }\n        }\n        this.queue.splice(insertIndex, 0, item);\n    }\n    /**\n   * Map subscription plan to priority level\n   */ getPriorityFromPlan(plan) {\n        switch(plan){\n            case \"pro\":\n                return 1; // Highest priority\n            case \"student\":\n                return 2; // Medium priority  \n            case \"free\":\n            default:\n                return 3; // Lowest priority\n        }\n    }\n    /**\n   * Remove user from queue (if they cancel)\n   */ removeFromQueue(userId) {\n        const initialLength = this.queue.length;\n        this.queue = this.queue.filter((item)=>item.userId !== userId);\n        return this.queue.length < initialLength;\n    }\n    /**\n   * Update processing time average for better estimates\n   */ updateAverageProcessingTime(duration) {\n        // Simple moving average\n        this.averageProcessingTime = this.averageProcessingTime * 0.8 + duration * 0.2;\n    }\n    /**\n   * Get system load information\n   */ getSystemLoad() {\n        const processing = this.processing.size;\n        const capacity = this.maxConcurrent;\n        const loadPercentage = processing / capacity * 100;\n        return {\n            queueLength: this.queue.length,\n            processing,\n            capacity,\n            loadPercentage\n        };\n    }\n    constructor(){\n        this.queue = [];\n        this.processing = new Map();\n        this.maxConcurrent = 3 // Max concurrent processing\n        ;\n        this.averageProcessingTime = 90 // seconds\n        ;\n    }\n}\n// Singleton instance\nconst priorityQueue = new PriorityQueueService();\n/**\n * Helper function to wrap existing API calls with queue\n */ async function queueRequest(userId, subscriptionPlan, requestType, processingFunction) {\n    return priorityQueue.addToQueue(userId, requestType, subscriptionPlan, {}, processingFunction);\n}\n/**\n * Get queue information for UI\n */ function getQueueInfo(userId) {\n    return {\n        stats: priorityQueue.getQueueStats(userId),\n        position: userId ? priorityQueue.getUserPosition(userId) : null,\n        systemLoad: priorityQueue.getSystemLoad()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmljZXMvcXVldWUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0NBS0MsR0F1QkQsTUFBTUE7SUFNSjs7R0FFQyxHQUNELE1BQU1DLFdBQ0pDLE1BQWMsRUFDZEMsV0FBcUMsRUFDckNDLGdCQUE0QyxFQUM1Q0MsT0FBWSxFQUNaQyxrQkFBb0MsRUFDeEI7UUFDWixNQUFNQyxXQUFXLElBQUksQ0FBQ0MsbUJBQW1CLENBQUNKO1FBQzFDLE1BQU1LLFNBQVMsQ0FBQyxFQUFFUCxPQUFPLENBQUMsRUFBRVEsS0FBS0MsR0FBRyxHQUFHLENBQUMsRUFBRUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRW5GLE9BQU8sSUFBSUMsUUFBVyxDQUFDQyxTQUFTQztZQUM5QixNQUFNQyxZQUF1QjtnQkFDM0JDLElBQUlYO2dCQUNKUDtnQkFDQUs7Z0JBQ0FKO2dCQUNBRTtnQkFDQVksU0FBUyxPQUFPSTtvQkFDZCxJQUFJO3dCQUNGLE1BQU1DLFNBQVMsTUFBTWhCO3dCQUNyQlcsUUFBUUs7b0JBQ1YsRUFBRSxPQUFPQyxPQUFPO3dCQUNkTCxPQUFPSztvQkFDVCxTQUFVO3dCQUNSLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxNQUFNLENBQUNoQjt3QkFDdkIsSUFBSSxDQUFDaUIsV0FBVztvQkFDbEI7Z0JBQ0Y7Z0JBQ0FSLFFBQVEsQ0FBQ0s7b0JBQ1AsSUFBSSxDQUFDQyxVQUFVLENBQUNDLE1BQU0sQ0FBQ2hCO29CQUN2QlMsT0FBT0s7b0JBQ1AsSUFBSSxDQUFDRyxXQUFXO2dCQUNsQjtnQkFDQUMsV0FBVyxJQUFJakI7WUFDakI7WUFFQSxJQUFJLENBQUNrQixnQkFBZ0IsQ0FBQ1Q7WUFDdEJVLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRTNCLFlBQVksa0JBQWtCLEVBQUVELE9BQU8sZUFBZSxFQUFFSyxTQUFTLENBQUM7WUFFL0YsSUFBSSxDQUFDbUIsV0FBVztRQUNsQjtJQUNGO0lBRUE7O0dBRUMsR0FDREssY0FBYzdCLE1BQWUsRUFBYztRQUN6QyxNQUFNOEIsZUFBZTlCLFNBQVMsSUFBSSxDQUFDK0IsZUFBZSxDQUFDL0IsVUFBVTtRQUU3RCxNQUFNZ0Msb0JBQW9CLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLENBQ3pDLENBQUNDLEtBQUtDO1lBQ0osSUFBSUEsS0FBSy9CLFFBQVEsS0FBSyxHQUFHOEIsSUFBSUUsSUFBSTtpQkFDNUIsSUFBSUQsS0FBSy9CLFFBQVEsS0FBSyxHQUFHOEIsSUFBSUcsTUFBTTtpQkFDbkNILElBQUlJLEdBQUc7WUFDWixPQUFPSjtRQUNULEdBQ0E7WUFBRUUsTUFBTTtZQUFHQyxRQUFRO1lBQUdDLEtBQUs7UUFBRTtRQUcvQixNQUFNQyxvQkFBb0JWLGVBQ3RCQSxlQUFlLElBQUksQ0FBQ1cscUJBQXFCLEdBQ3pDLElBQUksQ0FBQ1IsS0FBSyxDQUFDUyxNQUFNLEdBQUcsSUFBSSxDQUFDRCxxQkFBcUI7UUFFbEQsT0FBTztZQUNMRSxZQUFZLElBQUksQ0FBQ1YsS0FBSyxDQUFDUyxNQUFNO1lBQzdCVjtZQUNBUTtRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNEVCxnQkFBZ0IvQixNQUFjLEVBQWlCO1FBQzdDLE1BQU00QyxRQUFRLElBQUksQ0FBQ1gsS0FBSyxDQUFDWSxTQUFTLENBQUNULENBQUFBLE9BQVFBLEtBQUtwQyxNQUFNLEtBQUtBO1FBQzNELE9BQU80QyxVQUFVLENBQUMsSUFBSSxPQUFPQSxRQUFRO0lBQ3ZDO0lBRUE7O0dBRUMsR0FDRCxjQUE0QjtRQUMxQixNQUFNRSxzQkFBc0IsSUFBSSxDQUFDeEIsVUFBVSxDQUFDeUIsSUFBSTtRQUVoRCxJQUFJRCx1QkFBdUIsSUFBSSxDQUFDRSxhQUFhLElBQUksSUFBSSxDQUFDZixLQUFLLENBQUNTLE1BQU0sS0FBSyxHQUFHO1lBQ3hFO1FBQ0Y7UUFFQSw4Q0FBOEM7UUFDOUMsTUFBTU8sV0FBVyxJQUFJLENBQUNoQixLQUFLLENBQUNpQixLQUFLO1FBQ2pDLElBQUksQ0FBQ0QsVUFBVTtRQUVmLElBQUksQ0FBQzNCLFVBQVUsQ0FBQzZCLEdBQUcsQ0FBQ0YsU0FBUy9CLEVBQUUsRUFBRTtRQUVqQ1MsUUFBUUMsR0FBRyxDQUFDLENBQUMsbUJBQW1CLEVBQUVxQixTQUFTaEQsV0FBVyxDQUFDLFVBQVUsRUFBRWdELFNBQVNqRCxNQUFNLENBQUMsV0FBVyxFQUFFaUQsU0FBUzVDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFcEgsbUJBQW1CO1FBQ25CK0MsV0FBVztZQUNUSCxTQUFTbEMsT0FBTyxDQUFDLE9BQU8sd0RBQXdEO1FBQ2xGLEdBQUc7SUFDTDtJQUVBOztHQUVDLEdBQ0QsaUJBQXlCcUIsSUFBZSxFQUFRO1FBQzlDLCtEQUErRDtRQUMvRCxJQUFJaUIsY0FBYztRQUVsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNyQixLQUFLLENBQUNTLE1BQU0sRUFBRVksSUFBSztZQUMxQyxNQUFNQyxlQUFlLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ3FCLEVBQUU7WUFFbEMsNENBQTRDO1lBQzVDLElBQUlsQixLQUFLL0IsUUFBUSxHQUFHa0QsYUFBYWxELFFBQVEsRUFBRTtnQkFDekM7WUFDRjtZQUVBLDRDQUE0QztZQUM1QyxJQUFJK0IsS0FBSy9CLFFBQVEsS0FBS2tELGFBQWFsRCxRQUFRLElBQ3ZDK0IsS0FBS1gsU0FBUyxJQUFJOEIsYUFBYTlCLFNBQVMsRUFBRTtnQkFDNUM0QixjQUFjQyxJQUFJO1lBQ3BCLE9BQU8sSUFBSWxCLEtBQUsvQixRQUFRLEdBQUdrRCxhQUFhbEQsUUFBUSxFQUFFO2dCQUNoRGdELGNBQWNDLElBQUk7WUFDcEI7UUFDRjtRQUVBLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ3VCLE1BQU0sQ0FBQ0gsYUFBYSxHQUFHakI7SUFDcEM7SUFFQTs7R0FFQyxHQUNELG9CQUE0QnFCLElBQVksRUFBVTtRQUNoRCxPQUFRQTtZQUNOLEtBQUs7Z0JBQU8sT0FBTyxHQUFHLG1CQUFtQjtZQUN6QyxLQUFLO2dCQUFXLE9BQU8sR0FBRyxvQkFBb0I7WUFDOUMsS0FBSztZQUNMO2dCQUFTLE9BQU8sR0FBRyxrQkFBa0I7UUFDdkM7SUFDRjtJQUVBOztHQUVDLEdBQ0RDLGdCQUFnQjFELE1BQWMsRUFBVztRQUN2QyxNQUFNMkQsZ0JBQWdCLElBQUksQ0FBQzFCLEtBQUssQ0FBQ1MsTUFBTTtRQUN2QyxJQUFJLENBQUNULEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUssQ0FBQzJCLE1BQU0sQ0FBQ3hCLENBQUFBLE9BQVFBLEtBQUtwQyxNQUFNLEtBQUtBO1FBQ3ZELE9BQU8sSUFBSSxDQUFDaUMsS0FBSyxDQUFDUyxNQUFNLEdBQUdpQjtJQUM3QjtJQUVBOztHQUVDLEdBQ0RFLDRCQUE0QkMsUUFBZ0IsRUFBUTtRQUNsRCx3QkFBd0I7UUFDeEIsSUFBSSxDQUFDckIscUJBQXFCLEdBQUcsSUFBSyxDQUFDQSxxQkFBcUIsR0FBRyxNQUFRcUIsV0FBVztJQUNoRjtJQUVBOztHQUVDLEdBQ0RDLGdCQUtFO1FBQ0EsTUFBTXpDLGFBQWEsSUFBSSxDQUFDQSxVQUFVLENBQUN5QixJQUFJO1FBQ3ZDLE1BQU1pQixXQUFXLElBQUksQ0FBQ2hCLGFBQWE7UUFDbkMsTUFBTWlCLGlCQUFpQixhQUFjRCxXQUFZO1FBRWpELE9BQU87WUFDTEUsYUFBYSxJQUFJLENBQUNqQyxLQUFLLENBQUNTLE1BQU07WUFDOUJwQjtZQUNBMEM7WUFDQUM7UUFDRjtJQUNGOzthQXpMUWhDLFFBQXFCLEVBQUU7YUFDdkJYLGFBQW1DLElBQUk2QzthQUN2Q25CLGdCQUF3QixFQUFHLDRCQUE0Qjs7YUFDdkRQLHdCQUFnQyxHQUFJLFVBQVU7OztBQXVMeEQ7QUFFQSxxQkFBcUI7QUFDZCxNQUFNMkIsZ0JBQWdCLElBQUl0RSx1QkFBdUI7QUFFeEQ7O0NBRUMsR0FDTSxlQUFldUUsYUFDcEJyRSxNQUFjLEVBQ2RFLGdCQUE0QyxFQUM1Q0QsV0FBcUMsRUFDckNHLGtCQUFvQztJQUVwQyxPQUFPZ0UsY0FBY3JFLFVBQVUsQ0FDN0JDLFFBQ0FDLGFBQ0FDLGtCQUNBLENBQUMsR0FDREU7QUFFSjtBQUVBOztDQUVDLEdBQ00sU0FBU2tFLGFBQWF0RSxNQUFlO0lBQzFDLE9BQU87UUFDTHVFLE9BQU9ILGNBQWN2QyxhQUFhLENBQUM3QjtRQUNuQ3dFLFVBQVV4RSxTQUFTb0UsY0FBY3JDLGVBQWUsQ0FBQy9CLFVBQVU7UUFDM0R5RSxZQUFZTCxjQUFjTCxhQUFhO0lBQ3pDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZHVzY3JpYmUvLi9zcmMvc2VydmljZXMvcXVldWUudHM/MDYxNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByaW9yaXR5IFF1ZXVlIFNlcnZpY2UgZm9yIEVkdVNjcmliZVxuICogXG4gKiBQcm92aWRlcyBwcmlvcml0eS1iYXNlZCByZXF1ZXN0IHF1ZXVpbmcgZm9yIG5vdGUgZ2VuZXJhdGlvblxuICogd2l0aCBzdWJzY3JpcHRpb24gdGllciBzdXBwb3J0XG4gKi9cblxuaW50ZXJmYWNlIFF1ZXVlSXRlbSB7XG4gIGlkOiBzdHJpbmc7XG4gIHVzZXJJZDogc3RyaW5nO1xuICBwcmlvcml0eTogbnVtYmVyOyAvLyAxPWhpZ2ggKFBybyksIDI9bWVkaXVtIChTdHVkZW50KSwgMz1sb3cgKEZyZWUpXG4gIHJlcXVlc3RUeXBlOiAndmlkZW8nIHwgJ2ZpbGUnIHwgJ3RleHQnIHwgJ3ZpZGVvLXVwbG9hZCc7XG4gIHBheWxvYWQ6IGFueTtcbiAgcmVzb2x2ZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIHJlamVjdDogKGVycm9yOiBhbnkpID0+IHZvaWQ7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbn1cblxuaW50ZXJmYWNlIFF1ZXVlU3RhdHMge1xuICB0b3RhbEl0ZW1zOiBudW1iZXI7XG4gIHByaW9yaXR5QnJlYWtkb3duOiB7XG4gICAgaGlnaDogbnVtYmVyO1xuICAgIG1lZGl1bTogbnVtYmVyO1xuICAgIGxvdzogbnVtYmVyO1xuICB9O1xuICBlc3RpbWF0ZWRXYWl0VGltZTogbnVtYmVyOyAvLyBzZWNvbmRzXG59XG5cbmNsYXNzIFByaW9yaXR5UXVldWVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBxdWV1ZTogUXVldWVJdGVtW10gPSBbXTtcbiAgcHJpdmF0ZSBwcm9jZXNzaW5nOiBNYXA8c3RyaW5nLCBib29sZWFuPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBtYXhDb25jdXJyZW50OiBudW1iZXIgPSAzOyAvLyBNYXggY29uY3VycmVudCBwcm9jZXNzaW5nXG4gIHByaXZhdGUgYXZlcmFnZVByb2Nlc3NpbmdUaW1lOiBudW1iZXIgPSA5MDsgLy8gc2Vjb25kc1xuXG4gIC8qKlxuICAgKiBBZGQgcmVxdWVzdCB0byBxdWV1ZSB3aXRoIHByaW9yaXR5IGJhc2VkIG9uIHN1YnNjcmlwdGlvblxuICAgKi9cbiAgYXN5bmMgYWRkVG9RdWV1ZTxUPihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZXF1ZXN0VHlwZTogUXVldWVJdGVtWydyZXF1ZXN0VHlwZSddLFxuICAgIHN1YnNjcmlwdGlvblBsYW46ICdmcmVlJyB8ICdzdHVkZW50JyB8ICdwcm8nLFxuICAgIHBheWxvYWQ6IGFueSxcbiAgICBwcm9jZXNzaW5nRnVuY3Rpb246ICgpID0+IFByb21pc2U8VD5cbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgcHJpb3JpdHkgPSB0aGlzLmdldFByaW9yaXR5RnJvbVBsYW4oc3Vic2NyaXB0aW9uUGxhbik7XG4gICAgY29uc3QgaXRlbUlkID0gYCR7dXNlcklkfV8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVldWVJdGVtOiBRdWV1ZUl0ZW0gPSB7XG4gICAgICAgIGlkOiBpdGVtSWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIHJlcXVlc3RUeXBlLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgICByZXNvbHZlOiBhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvY2Vzc2luZ0Z1bmN0aW9uKCk7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZy5kZWxldGUoaXRlbUlkKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc05leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlamVjdDogKGVycm9yKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcm9jZXNzaW5nLmRlbGV0ZShpdGVtSWQpO1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgdGhpcy5wcm9jZXNzTmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuaW5zZXJ0QnlQcmlvcml0eShxdWV1ZUl0ZW0pO1xuICAgICAgY29uc29sZS5sb2coYFtRdWV1ZV0gQWRkZWQgJHtyZXF1ZXN0VHlwZX0gcmVxdWVzdCBmb3IgdXNlciAke3VzZXJJZH0gd2l0aCBwcmlvcml0eSAke3ByaW9yaXR5fWApO1xuICAgICAgXG4gICAgICB0aGlzLnByb2Nlc3NOZXh0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgcXVldWUgc3RhdGlzdGljcyBmb3IgVUkgZGlzcGxheVxuICAgKi9cbiAgZ2V0UXVldWVTdGF0cyh1c2VySWQ/OiBzdHJpbmcpOiBRdWV1ZVN0YXRzIHtcbiAgICBjb25zdCB1c2VyUG9zaXRpb24gPSB1c2VySWQgPyB0aGlzLmdldFVzZXJQb3NpdGlvbih1c2VySWQpIDogbnVsbDtcbiAgICBcbiAgICBjb25zdCBwcmlvcml0eUJyZWFrZG93biA9IHRoaXMucXVldWUucmVkdWNlKFxuICAgICAgKGFjYywgaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5wcmlvcml0eSA9PT0gMSkgYWNjLmhpZ2grKztcbiAgICAgICAgZWxzZSBpZiAoaXRlbS5wcmlvcml0eSA9PT0gMikgYWNjLm1lZGl1bSsrO1xuICAgICAgICBlbHNlIGFjYy5sb3crKztcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sXG4gICAgICB7IGhpZ2g6IDAsIG1lZGl1bTogMCwgbG93OiAwIH1cbiAgICApO1xuXG4gICAgY29uc3QgZXN0aW1hdGVkV2FpdFRpbWUgPSB1c2VyUG9zaXRpb24gXG4gICAgICA/IHVzZXJQb3NpdGlvbiAqIHRoaXMuYXZlcmFnZVByb2Nlc3NpbmdUaW1lXG4gICAgICA6IHRoaXMucXVldWUubGVuZ3RoICogdGhpcy5hdmVyYWdlUHJvY2Vzc2luZ1RpbWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxJdGVtczogdGhpcy5xdWV1ZS5sZW5ndGgsXG4gICAgICBwcmlvcml0eUJyZWFrZG93bixcbiAgICAgIGVzdGltYXRlZFdhaXRUaW1lXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlcidzIHBvc2l0aW9uIGluIHF1ZXVlXG4gICAqL1xuICBnZXRVc2VyUG9zaXRpb24odXNlcklkOiBzdHJpbmcpOiBudW1iZXIgfCBudWxsIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucXVldWUuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS51c2VySWQgPT09IHVzZXJJZCk7XG4gICAgcmV0dXJuIGluZGV4ID09PSAtMSA/IG51bGwgOiBpbmRleCArIDE7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBuZXh0IGl0ZW1zIGluIHF1ZXVlXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3NOZXh0KCk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnJlbnRseVByb2Nlc3NpbmcgPSB0aGlzLnByb2Nlc3Npbmcuc2l6ZTtcbiAgICBcbiAgICBpZiAoY3VycmVudGx5UHJvY2Vzc2luZyA+PSB0aGlzLm1heENvbmN1cnJlbnQgfHwgdGhpcy5xdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUYWtlIG5leHQgaXRlbSAoYWxyZWFkeSBzb3J0ZWQgYnkgcHJpb3JpdHkpXG4gICAgY29uc3QgbmV4dEl0ZW0gPSB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgaWYgKCFuZXh0SXRlbSkgcmV0dXJuO1xuXG4gICAgdGhpcy5wcm9jZXNzaW5nLnNldChuZXh0SXRlbS5pZCwgdHJ1ZSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtRdWV1ZV0gUHJvY2Vzc2luZyAke25leHRJdGVtLnJlcXVlc3RUeXBlfSBmb3IgdXNlciAke25leHRJdGVtLnVzZXJJZH0gKHByaW9yaXR5ICR7bmV4dEl0ZW0ucHJpb3JpdHl9KWApO1xuICAgIFxuICAgIC8vIFN0YXJ0IHByb2Nlc3NpbmdcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG5leHRJdGVtLnJlc29sdmUobnVsbCk7IC8vIFRoZSBhY3R1YWwgcHJvY2Vzc2luZyBoYXBwZW5zIGluIHRoZSByZXNvbHZlIGZ1bmN0aW9uXG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgaXRlbSBpbnRvIHF1ZXVlIG1haW50YWluaW5nIHByaW9yaXR5IG9yZGVyXG4gICAqL1xuICBwcml2YXRlIGluc2VydEJ5UHJpb3JpdHkoaXRlbTogUXVldWVJdGVtKTogdm9pZCB7XG4gICAgLy8gRmluZCBpbnNlcnRpb24gcG9pbnQgKHNvcnRlZCBieSBwcmlvcml0eSwgdGhlbiBieSB0aW1lc3RhbXApXG4gICAgbGV0IGluc2VydEluZGV4ID0gMDtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IHRoaXMucXVldWVbaV07XG4gICAgICBcbiAgICAgIC8vIEhpZ2hlciBwcmlvcml0eSAobG93ZXIgbnVtYmVyKSBnb2VzIGZpcnN0XG4gICAgICBpZiAoaXRlbS5wcmlvcml0eSA8IGV4aXN0aW5nSXRlbS5wcmlvcml0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2FtZSBwcmlvcml0eSwgb2xkZXIgdGltZXN0YW1wIGdvZXMgZmlyc3RcbiAgICAgIGlmIChpdGVtLnByaW9yaXR5ID09PSBleGlzdGluZ0l0ZW0ucHJpb3JpdHkgJiYgXG4gICAgICAgICAgaXRlbS50aW1lc3RhbXAgPj0gZXhpc3RpbmdJdGVtLnRpbWVzdGFtcCkge1xuICAgICAgICBpbnNlcnRJbmRleCA9IGkgKyAxO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLnByaW9yaXR5ID4gZXhpc3RpbmdJdGVtLnByaW9yaXR5KSB7XG4gICAgICAgIGluc2VydEluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRoaXMucXVldWUuc3BsaWNlKGluc2VydEluZGV4LCAwLCBpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXAgc3Vic2NyaXB0aW9uIHBsYW4gdG8gcHJpb3JpdHkgbGV2ZWxcbiAgICovXG4gIHByaXZhdGUgZ2V0UHJpb3JpdHlGcm9tUGxhbihwbGFuOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHN3aXRjaCAocGxhbikge1xuICAgICAgY2FzZSAncHJvJzogcmV0dXJuIDE7IC8vIEhpZ2hlc3QgcHJpb3JpdHlcbiAgICAgIGNhc2UgJ3N0dWRlbnQnOiByZXR1cm4gMjsgLy8gTWVkaXVtIHByaW9yaXR5ICBcbiAgICAgIGNhc2UgJ2ZyZWUnOlxuICAgICAgZGVmYXVsdDogcmV0dXJuIDM7IC8vIExvd2VzdCBwcmlvcml0eVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdXNlciBmcm9tIHF1ZXVlIChpZiB0aGV5IGNhbmNlbClcbiAgICovXG4gIHJlbW92ZUZyb21RdWV1ZSh1c2VySWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGluaXRpYWxMZW5ndGggPSB0aGlzLnF1ZXVlLmxlbmd0aDtcbiAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtLnVzZXJJZCAhPT0gdXNlcklkKTtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZS5sZW5ndGggPCBpbml0aWFsTGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBwcm9jZXNzaW5nIHRpbWUgYXZlcmFnZSBmb3IgYmV0dGVyIGVzdGltYXRlc1xuICAgKi9cbiAgdXBkYXRlQXZlcmFnZVByb2Nlc3NpbmdUaW1lKGR1cmF0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBTaW1wbGUgbW92aW5nIGF2ZXJhZ2VcbiAgICB0aGlzLmF2ZXJhZ2VQcm9jZXNzaW5nVGltZSA9ICh0aGlzLmF2ZXJhZ2VQcm9jZXNzaW5nVGltZSAqIDAuOCkgKyAoZHVyYXRpb24gKiAwLjIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzeXN0ZW0gbG9hZCBpbmZvcm1hdGlvblxuICAgKi9cbiAgZ2V0U3lzdGVtTG9hZCgpOiB7XG4gICAgcXVldWVMZW5ndGg6IG51bWJlcjtcbiAgICBwcm9jZXNzaW5nOiBudW1iZXI7XG4gICAgY2FwYWNpdHk6IG51bWJlcjtcbiAgICBsb2FkUGVyY2VudGFnZTogbnVtYmVyO1xuICB9IHtcbiAgICBjb25zdCBwcm9jZXNzaW5nID0gdGhpcy5wcm9jZXNzaW5nLnNpemU7XG4gICAgY29uc3QgY2FwYWNpdHkgPSB0aGlzLm1heENvbmN1cnJlbnQ7XG4gICAgY29uc3QgbG9hZFBlcmNlbnRhZ2UgPSAocHJvY2Vzc2luZyAvIGNhcGFjaXR5KSAqIDEwMDtcblxuICAgIHJldHVybiB7XG4gICAgICBxdWV1ZUxlbmd0aDogdGhpcy5xdWV1ZS5sZW5ndGgsXG4gICAgICBwcm9jZXNzaW5nLFxuICAgICAgY2FwYWNpdHksXG4gICAgICBsb2FkUGVyY2VudGFnZVxuICAgIH07XG4gIH1cbn1cblxuLy8gU2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3QgcHJpb3JpdHlRdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlU2VydmljZSgpO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byB3cmFwIGV4aXN0aW5nIEFQSSBjYWxscyB3aXRoIHF1ZXVlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBxdWV1ZVJlcXVlc3Q8VD4oXG4gIHVzZXJJZDogc3RyaW5nLFxuICBzdWJzY3JpcHRpb25QbGFuOiAnZnJlZScgfCAnc3R1ZGVudCcgfCAncHJvJyxcbiAgcmVxdWVzdFR5cGU6IFF1ZXVlSXRlbVsncmVxdWVzdFR5cGUnXSxcbiAgcHJvY2Vzc2luZ0Z1bmN0aW9uOiAoKSA9PiBQcm9taXNlPFQ+XG4pOiBQcm9taXNlPFQ+IHtcbiAgcmV0dXJuIHByaW9yaXR5UXVldWUuYWRkVG9RdWV1ZShcbiAgICB1c2VySWQsXG4gICAgcmVxdWVzdFR5cGUsIFxuICAgIHN1YnNjcmlwdGlvblBsYW4sXG4gICAge30sXG4gICAgcHJvY2Vzc2luZ0Z1bmN0aW9uXG4gICk7XG59XG5cbi8qKlxuICogR2V0IHF1ZXVlIGluZm9ybWF0aW9uIGZvciBVSVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVldWVJbmZvKHVzZXJJZD86IHN0cmluZykge1xuICByZXR1cm4ge1xuICAgIHN0YXRzOiBwcmlvcml0eVF1ZXVlLmdldFF1ZXVlU3RhdHModXNlcklkKSxcbiAgICBwb3NpdGlvbjogdXNlcklkID8gcHJpb3JpdHlRdWV1ZS5nZXRVc2VyUG9zaXRpb24odXNlcklkKSA6IG51bGwsXG4gICAgc3lzdGVtTG9hZDogcHJpb3JpdHlRdWV1ZS5nZXRTeXN0ZW1Mb2FkKClcbiAgfTtcbn0gIl0sIm5hbWVzIjpbIlByaW9yaXR5UXVldWVTZXJ2aWNlIiwiYWRkVG9RdWV1ZSIsInVzZXJJZCIsInJlcXVlc3RUeXBlIiwic3Vic2NyaXB0aW9uUGxhbiIsInBheWxvYWQiLCJwcm9jZXNzaW5nRnVuY3Rpb24iLCJwcmlvcml0eSIsImdldFByaW9yaXR5RnJvbVBsYW4iLCJpdGVtSWQiLCJEYXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWV1ZUl0ZW0iLCJpZCIsInZhbHVlIiwicmVzdWx0IiwiZXJyb3IiLCJwcm9jZXNzaW5nIiwiZGVsZXRlIiwicHJvY2Vzc05leHQiLCJ0aW1lc3RhbXAiLCJpbnNlcnRCeVByaW9yaXR5IiwiY29uc29sZSIsImxvZyIsImdldFF1ZXVlU3RhdHMiLCJ1c2VyUG9zaXRpb24iLCJnZXRVc2VyUG9zaXRpb24iLCJwcmlvcml0eUJyZWFrZG93biIsInF1ZXVlIiwicmVkdWNlIiwiYWNjIiwiaXRlbSIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJlc3RpbWF0ZWRXYWl0VGltZSIsImF2ZXJhZ2VQcm9jZXNzaW5nVGltZSIsImxlbmd0aCIsInRvdGFsSXRlbXMiLCJpbmRleCIsImZpbmRJbmRleCIsImN1cnJlbnRseVByb2Nlc3NpbmciLCJzaXplIiwibWF4Q29uY3VycmVudCIsIm5leHRJdGVtIiwic2hpZnQiLCJzZXQiLCJzZXRUaW1lb3V0IiwiaW5zZXJ0SW5kZXgiLCJpIiwiZXhpc3RpbmdJdGVtIiwic3BsaWNlIiwicGxhbiIsInJlbW92ZUZyb21RdWV1ZSIsImluaXRpYWxMZW5ndGgiLCJmaWx0ZXIiLCJ1cGRhdGVBdmVyYWdlUHJvY2Vzc2luZ1RpbWUiLCJkdXJhdGlvbiIsImdldFN5c3RlbUxvYWQiLCJjYXBhY2l0eSIsImxvYWRQZXJjZW50YWdlIiwicXVldWVMZW5ndGgiLCJNYXAiLCJwcmlvcml0eVF1ZXVlIiwicXVldWVSZXF1ZXN0IiwiZ2V0UXVldWVJbmZvIiwic3RhdHMiLCJwb3NpdGlvbiIsInN5c3RlbUxvYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/services/queue.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/subscription.ts":
/*!**************************************!*\
  !*** ./src/services/subscription.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignUserSubscription: () => (/* binding */ assignUserSubscription),\n/* harmony export */   checkUsageLimits: () => (/* binding */ checkUsageLimits),\n/* harmony export */   getPlanPricing: () => (/* binding */ getPlanPricing),\n/* harmony export */   getSubscriptionPlan: () => (/* binding */ getSubscriptionPlan),\n/* harmony export */   getSubscriptionPlans: () => (/* binding */ getSubscriptionPlans),\n/* harmony export */   getUserSubscription: () => (/* binding */ getUserSubscription),\n/* harmony export */   hasFeatureAccess: () => (/* binding */ hasFeatureAccess),\n/* harmony export */   incrementUsage: () => (/* binding */ incrementUsage),\n/* harmony export */   refreshSavedNotesCount: () => (/* binding */ refreshSavedNotesCount),\n/* harmony export */   updateSavedNotesCount: () => (/* binding */ updateSavedNotesCount)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Subscription Service\n * \n * Handles subscription plans, usage tracking, and feature access control\n */ \n// Initialize Supabase client\nconst supabaseUrl = \"https://xhljckmlzdshxibnqsbj.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA\";\n/**\n * Get all available subscription plans\n */ async function getSubscriptionPlans() {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n    const { data, error } = await supabase.from(\"subscription_plans\").select(\"*\").eq(\"is_active\", true).order(\"price_monthly\", {\n        ascending: true\n    });\n    if (error) {\n        console.error(\"[Subscription] Error fetching plans:\", error);\n        throw new Error(\"Failed to fetch subscription plans\");\n    }\n    return data || [];\n}\n/**\n * Get user's current subscription with plan details\n */ async function getUserSubscription(userId, token) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n        global: {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n    });\n    try {\n        // Use direct table query instead of RPC function\n        const { data: userSub, error } = await supabase.from(\"user_subscriptions\").select(`\n        id,\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        if (error) {\n            console.error(\"[Subscription] Error fetching user subscription:\", error);\n            return null;\n        }\n        if (!userSub || !userSub.subscription_plans) {\n            return null;\n        }\n        const planData = userSub.subscription_plans;\n        return {\n            subscription_id: userSub.id,\n            plan_id: userSub.plan_id,\n            plan_name: planData.name,\n            plan_display_name: planData.display_name,\n            billing_cycle: userSub.billing_cycle,\n            status: userSub.status,\n            current_period_end: userSub.current_period_end,\n            features: planData.features,\n            limits: planData.limits,\n            price_monthly: planData.price_monthly,\n            price_yearly: planData.price_yearly\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error in getUserSubscription:\", error);\n        return null;\n    }\n}\n/**\n * Get a specific subscription plan by ID\n */ async function getSubscriptionPlan(planId) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n    const { data, error } = await supabase.from(\"subscription_plans\").select(\"*\").eq(\"id\", planId).eq(\"is_active\", true).single();\n    if (error) {\n        console.error(\"[Subscription] Error fetching plan:\", error);\n        return null;\n    }\n    return data;\n}\n/**\n * Check if user can generate notes based on their plan and usage\n */ async function checkUsageLimits(userId, token, noteType = \"text\") {\n    try {\n        // Use direct table queries instead of RPC functions to avoid issues\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        console.log(\"[Subscription] Checking usage limits for user:\", userId);\n        // Get user's subscription directly\n        const { data: userSub, error: subError } = await supabase.from(\"user_subscriptions\").select(`\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).eq(\"user_id\", userId).eq(\"status\", \"active\").single();\n        // Get current month usage directly\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { data: usage, error: usageError } = await supabase.from(\"user_usage\").select(\"*\").eq(\"user_id\", userId).eq(\"month_year\", currentMonth).single();\n        // Default free plan limits\n        const freePlanLimits = {\n            notes_per_month: 2,\n            max_saved_notes: 3,\n            max_text_length: 5000\n        };\n        const currentUsage = usage || {\n            notes_generated: 0,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 0,\n            month_year: currentMonth\n        };\n        // If usage record doesn't exist, create it\n        if (!usage) {\n            console.log(\"[Subscription] Creating usage record for current month:\", currentMonth);\n            const { error: createUsageError } = await supabase.from(\"user_usage\").insert({\n                user_id: userId,\n                month_year: currentMonth,\n                notes_generated: 0,\n                video_notes_count: 0,\n                file_notes_count: 0,\n                text_notes_count: 0,\n                total_saved_notes: 0,\n                updated_at: new Date().toISOString()\n            });\n            if (createUsageError) {\n                console.error(\"[Subscription] Warning: Could not create usage record:\", createUsageError);\n            }\n        }\n        // If no subscription found or error, try to create a free subscription\n        if (!userSub || subError) {\n            console.log(\"[Subscription] No active subscription found, attempting to create free subscription\");\n            if (subError) {\n                console.error(\"[Subscription] Subscription query error:\", subError);\n            }\n            // Try to create a free subscription for the user\n            const { error: createSubError } = await supabase.from(\"user_subscriptions\").insert({\n                user_id: userId,\n                plan_id: \"free\",\n                billing_cycle: \"monthly\",\n                status: \"active\",\n                current_period_start: new Date().toISOString(),\n                current_period_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                updated_at: new Date().toISOString()\n            }).select();\n            if (createSubError) {\n                console.error(\"[Subscription] Could not create free subscription:\", createSubError);\n            } else {\n                console.log(\"[Subscription] Created free subscription for user\");\n            }\n            // Return free plan limits regardless of whether we could create the subscription\n            const canGenerate = currentUsage.notes_generated < freePlanLimits.notes_per_month;\n            const canSave = currentUsage.total_saved_notes < freePlanLimits.max_saved_notes;\n            return {\n                canGenerate,\n                canSave,\n                reason: !canGenerate ? `Monthly limit reached (${freePlanLimits.notes_per_month} notes per month)` : !canSave ? `Storage limit reached (${freePlanLimits.max_saved_notes} saved notes maximum)` : undefined,\n                usage: currentUsage,\n                limits: freePlanLimits\n            };\n        }\n        const subscription = userSub;\n        const planData = subscription.subscription_plans;\n        if (!planData) {\n            console.error(\"[Subscription] Plan data not found for subscription:\", subscription);\n            // Fallback to free plan\n            const canGenerate = currentUsage.notes_generated < freePlanLimits.notes_per_month;\n            const canSave = currentUsage.total_saved_notes < freePlanLimits.max_saved_notes;\n            return {\n                canGenerate,\n                canSave,\n                reason: \"Plan data not found - using free plan limits\",\n                usage: currentUsage,\n                limits: freePlanLimits\n            };\n        }\n        console.log(\"[Subscription] Found subscription:\", {\n            planId: subscription.plan_id,\n            planLimits: planData.limits,\n            currentUsage: currentUsage\n        });\n        // Check monthly generation limit (handle unlimited case)\n        const monthlyLimit = planData.limits.notes_per_month;\n        const canGenerate = monthlyLimit === -1 || currentUsage.notes_generated < monthlyLimit;\n        // Check saved notes limit\n        const canSave = currentUsage.total_saved_notes < planData.limits.max_saved_notes;\n        let reason;\n        if (!canGenerate && monthlyLimit !== -1) {\n            reason = `Monthly limit reached (${monthlyLimit} notes per month)`;\n        } else if (!canSave) {\n            reason = `Storage limit reached (${planData.limits.max_saved_notes} saved notes maximum)`;\n        }\n        return {\n            canGenerate,\n            canSave,\n            reason,\n            usage: currentUsage,\n            limits: planData.limits\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error checking usage limits:\", error);\n        // Return restrictive fallback\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const fallbackUsage = {\n            notes_generated: 999,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 999,\n            month_year: currentMonth\n        };\n        return {\n            canGenerate: false,\n            canSave: false,\n            reason: \"Error checking subscription limits. Please try again.\",\n            usage: fallbackUsage,\n            limits: {\n                notes_per_month: 2,\n                max_saved_notes: 3,\n                max_text_length: 5000\n            }\n        };\n    }\n}\n/**\n * Increment user's usage count after successful note generation\n */ async function incrementUsage(userId, token, noteType = \"text\") {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        console.log(\"[Subscription] Incrementing usage for user:\", userId, \"type:\", noteType);\n        // Get current usage\n        const { data: currentUsage, error: fetchError } = await supabase.from(\"user_usage\").select(\"*\").eq(\"user_id\", userId).eq(\"month_year\", currentMonth).single();\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n            console.error(\"[Subscription] Error fetching current usage:\", fetchError);\n            return false;\n        }\n        // Prepare update data\n        const updateData = {\n            notes_generated: (currentUsage?.notes_generated || 0) + 1,\n            updated_at: new Date().toISOString()\n        };\n        // Increment specific note type counter\n        if (noteType === \"video\") {\n            updateData.video_notes_count = (currentUsage?.video_notes_count || 0) + 1;\n        } else if (noteType === \"file\") {\n            updateData.file_notes_count = (currentUsage?.file_notes_count || 0) + 1;\n        } else if (noteType === \"text\") {\n            updateData.text_notes_count = (currentUsage?.text_notes_count || 0) + 1;\n        }\n        // Update or insert usage record\n        if (currentUsage) {\n            const { error: updateError } = await supabase.from(\"user_usage\").update(updateData).eq(\"user_id\", userId).eq(\"month_year\", currentMonth);\n            if (updateError) {\n                console.error(\"[Subscription] Error updating usage:\", updateError);\n                return false;\n            }\n        } else {\n            // Create new usage record\n            const insertData = {\n                user_id: userId,\n                month_year: currentMonth,\n                notes_generated: 1,\n                video_notes_count: noteType === \"video\" ? 1 : 0,\n                file_notes_count: noteType === \"file\" ? 1 : 0,\n                text_notes_count: noteType === \"text\" ? 1 : 0,\n                total_saved_notes: 0,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            const { error: insertError } = await supabase.from(\"user_usage\").insert(insertData);\n            if (insertError) {\n                console.error(\"[Subscription] Error creating usage record:\", insertError);\n                return false;\n            }\n        }\n        console.log(\"[Subscription] Successfully incremented usage\");\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error incrementing usage:\", error);\n        return false;\n    }\n}\n/**\n * Update saved notes count (used when notes are saved or deleted)\n */ async function updateSavedNotesCount(userId, token, count) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        console.log(\"[Subscription] Updating saved notes count for user:\", userId, \"count:\", count);\n        // Upsert the saved notes count\n        const { error } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            total_saved_notes: Math.max(0, count),\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\"\n        });\n        if (error) {\n            console.error(\"[Subscription] Error updating saved notes count:\", error);\n            return false;\n        }\n        console.log(\"[Subscription] Successfully updated saved notes count\");\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error updating saved notes count:\", error);\n        return false;\n    }\n}\n/**\n * Refresh saved notes count by counting all notes from all tables\n */ async function refreshSavedNotesCount(userId, token) {\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n            global: {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        });\n        console.log(\"[Subscription] Refreshing saved notes count for user:\", userId);\n        // Count notes from all tables\n        const [videoResult, fileResult, textResult] = await Promise.all([\n            supabase.from(\"video_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId),\n            supabase.from(\"file_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId),\n            supabase.from(\"text_notes\").select(\"id\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"user_id\", userId)\n        ]);\n        const videoCount = videoResult.count || 0;\n        const fileCount = fileResult.count || 0;\n        const textCount = textResult.count || 0;\n        const totalCount = videoCount + fileCount + textCount;\n        console.log(\"[Subscription] Note counts:\", {\n            video: videoCount,\n            file: fileCount,\n            text: textCount,\n            total: totalCount\n        });\n        // Update the usage record with the actual count\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { error } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            total_saved_notes: totalCount,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\"\n        });\n        if (error) {\n            console.error(\"[Subscription] Error updating saved notes count:\", error);\n            return false;\n        }\n        console.log(\"[Subscription] Successfully refreshed saved notes count to:\", totalCount);\n        return true;\n    } catch (error) {\n        console.error(\"[Subscription] Error refreshing saved notes count:\", error);\n        return false;\n    }\n}\n/**\n * Get plan pricing with discount calculation\n */ function getPlanPricing(plan) {\n    const monthlyPrice = plan.price_monthly;\n    const yearlyPrice = plan.price_yearly;\n    const yearlyMonthlyEquivalent = yearlyPrice / 12;\n    const discountPercentage = monthlyPrice > 0 ? Math.round((1 - yearlyMonthlyEquivalent / monthlyPrice) * 100) : 0;\n    const yearlySavings = monthlyPrice * 12 - yearlyPrice;\n    return {\n        monthly: monthlyPrice,\n        yearly: yearlyPrice,\n        yearlyMonthlyEquivalent,\n        discountPercentage,\n        yearlySavings,\n        currency: plan.currency\n    };\n}\n/**\n * Check if user has access to a specific feature\n */ async function hasFeatureAccess(userId, token, feature) {\n    try {\n        const subscription = await getUserSubscription(userId, token);\n        if (!subscription) {\n            // Default free plan features\n            const freeFeatures = {\n                notes_generation: true,\n                quizzes: false,\n                youtube_support: true,\n                ppt_support: false,\n                export: false,\n                copy_paste: true,\n                upload_video: false,\n                priority_generation: false\n            };\n            return freeFeatures[feature] || false;\n        }\n        return subscription.features[feature] || false;\n    } catch (error) {\n        console.error(\"[Subscription] Error checking feature access:\", error);\n        return false; // Default to no access on error\n    }\n}\n/**\n * Assign subscription to user after successful payment\n */ async function assignUserSubscription(userId, token, planId, billingCycle, paymentData) {\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n        global: {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n    });\n    try {\n        // Calculate period dates\n        const currentPeriodStart = new Date();\n        const currentPeriodEnd = new Date();\n        if (billingCycle === \"yearly\") {\n            currentPeriodEnd.setFullYear(currentPeriodEnd.getFullYear() + 1);\n        } else {\n            currentPeriodEnd.setMonth(currentPeriodEnd.getMonth() + 1);\n        }\n        // Prepare subscription data\n        const subscriptionData = {\n            user_id: userId,\n            plan_id: planId,\n            billing_cycle: billingCycle,\n            status: \"active\",\n            current_period_start: currentPeriodStart.toISOString(),\n            current_period_end: currentPeriodEnd.toISOString(),\n            cancel_at_period_end: false,\n            stripe_subscription_id: paymentData?.stripeSubscriptionId || null,\n            stripe_customer_id: paymentData?.stripeCustomerId || null,\n            updated_at: new Date().toISOString()\n        };\n        // Upsert subscription (update if exists, insert if new)\n        const { data: subscription, error: subscriptionError } = await supabase.from(\"user_subscriptions\").upsert(subscriptionData, {\n            onConflict: \"user_id\"\n        }).select(`\n        id,\n        plan_id,\n        billing_cycle,\n        status,\n        current_period_end,\n        subscription_plans (\n          name,\n          display_name,\n          features,\n          limits,\n          price_monthly,\n          price_yearly\n        )\n      `).single();\n        if (subscriptionError) {\n            console.error(\"[Subscription] Error assigning subscription:\", subscriptionError);\n            throw new Error(\"Failed to assign subscription\");\n        }\n        if (!subscription || !subscription.subscription_plans) {\n            throw new Error(\"Failed to retrieve subscription details\");\n        }\n        // Initialize usage tracking for current month\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        const { error: usageError } = await supabase.from(\"user_usage\").upsert({\n            user_id: userId,\n            month_year: currentMonth,\n            notes_generated: 0,\n            video_notes_count: 0,\n            file_notes_count: 0,\n            text_notes_count: 0,\n            total_saved_notes: 0,\n            updated_at: new Date().toISOString()\n        }, {\n            onConflict: \"user_id,month_year\",\n            ignoreDuplicates: true\n        });\n        if (usageError) {\n            console.error(\"[Subscription] Warning: Failed to initialize usage tracking:\", usageError);\n        // Don't throw error here as subscription assignment was successful\n        }\n        const planData = subscription.subscription_plans;\n        return {\n            subscription_id: subscription.id,\n            plan_id: subscription.plan_id,\n            plan_name: planData.name,\n            plan_display_name: planData.display_name,\n            billing_cycle: subscription.billing_cycle,\n            status: subscription.status,\n            current_period_end: subscription.current_period_end,\n            features: planData.features,\n            limits: planData.limits,\n            price_monthly: planData.price_monthly,\n            price_yearly: planData.price_yearly\n        };\n    } catch (error) {\n        console.error(\"[Subscription] Error in assignUserSubscription:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/subscription.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/subtitles.ts":
/*!***********************************!*\
  !*** ./src/services/subtitles.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadSubtitles: () => (/* binding */ downloadSubtitles),\n/* harmony export */   extractSubtitles: () => (/* binding */ extractSubtitles),\n/* harmony export */   getVideoSubtitles: () => (/* binding */ getVideoSubtitles),\n/* harmony export */   isYtDlpAvailable: () => (/* binding */ isYtDlpAvailable),\n/* harmony export */   parseSubtitlesFile: () => (/* binding */ parseSubtitlesFile)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var execa__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! execa */ \"(rsc)/./node_modules/execa/index.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var subtitle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! subtitle */ \"(rsc)/./node_modules/subtitle/dist/subtitle.esm.js\");\n/* harmony import */ var _youtube__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./youtube */ \"(rsc)/./src/services/youtube.ts\");\n/* harmony import */ var ytdl_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ytdl-core */ \"(rsc)/./node_modules/ytdl-core/lib/index.js\");\n/* harmony import */ var ytdl_core__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(ytdl_core__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\nconst readFile = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().readFile));\nconst writeFile = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().writeFile));\nconst unlink = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().unlink));\nconst exists = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().exists));\n// Flag to ensure we only show the warning once per session\nlet ytDlpWarningShown = false;\n/**\n * Checks if yt-dlp is installed on the system\n * @returns true if yt-dlp is available, false otherwise\n */ async function isYtDlpAvailable() {\n    try {\n        // First try using 'which' on Unix-like systems\n        try {\n            await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(\"which yt-dlp\", {\n                shell: true\n            });\n            return true;\n        } catch  {\n            // If 'which' fails, try to execute yt-dlp directly\n            await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(\"yt-dlp --version\", {\n                shell: true\n            });\n            return true;\n        }\n    } catch (error) {\n        if (!ytDlpWarningShown && \"development\" === \"development\") {\n            console.warn(\"\\n⚠️ WARNING: yt-dlp is not available on this system!\");\n            console.warn(\"⚠️ YouTube subtitle extraction will fail without yt-dlp.\");\n            console.warn(\"For subtitle support, please install yt-dlp:\");\n            console.warn(\"  • macOS: brew install yt-dlp\");\n            console.warn(\"  • Linux/macOS: pip install yt-dlp\");\n            console.warn(\"  • Windows: pip install yt-dlp or choco install yt-dlp\\n\");\n            ytDlpWarningShown = true;\n        }\n        return false;\n    }\n}\n/**\n * Downloads subtitles from a YouTube video using yt-dlp\n * @param videoId YouTube video ID\n * @param languages Languages to try, in order of preference\n * @returns The path to the downloaded subtitle file or null if not available\n */ async function downloadSubtitles(videoId, languages = [\n    \"pl\",\n    \"en\"\n]) {\n    if (!(0,_youtube__WEBPACK_IMPORTED_MODULE_5__.isValidYouTubeId)(videoId)) {\n        console.error(\"[Subtitles] Invalid video ID:\", videoId);\n        return null;\n    }\n    // Check if yt-dlp is available\n    const ytDlpAvailable = await isYtDlpAvailable();\n    if (ytDlpAvailable) {\n        // Use yt-dlp if available\n        return downloadWithYtDlp(videoId, languages);\n    } else {\n        // No fallback to ytdl-core - it's not reliable enough\n        console.error(\"[Subtitles] yt-dlp is not installed. Cannot download subtitles reliably.\");\n        throw new Error(\"yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\\n\" + \"• macOS: brew install yt-dlp\\n\" + \"• Linux/macOS: pip install yt-dlp\\n\" + \"• Windows: pip install yt-dlp or choco install yt-dlp\");\n    }\n}\n/**\n * Downloads subtitles using yt-dlp\n * @param videoId YouTube video ID\n * @param languages Languages to try, in order of preference\n * @returns The path to the downloaded subtitle file or null if not available\n */ async function downloadWithYtDlp(videoId, languages = [\n    \"pl\",\n    \"en\"\n]) {\n    // Create a temporary directory for downloads\n    const tempDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"temp\");\n    try {\n        // Ensure temp directory exists with proper permissions\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(tempDir)) {\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(tempDir, {\n                    recursive: true,\n                    mode: 493\n                });\n                console.log(`[Subtitles] Created temporary directory: ${tempDir}`);\n            } catch (mkdirError) {\n                console.error(`[Subtitles] Failed to create temporary directory: ${tempDir}`, mkdirError);\n                throw new Error(`Permission denied: Could not create temporary directory: ${mkdirError.message}`);\n            }\n        } else {\n            // Verify we can write to the temp directory\n            try {\n                const testFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `test-${Date.now()}.txt`);\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(testFile, \"test\", {\n                    mode: 420\n                });\n                fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(testFile);\n                console.log(`[Subtitles] Verified write access to temp directory: ${tempDir}`);\n            } catch (accessError) {\n                console.error(`[Subtitles] No write access to temp directory: ${tempDir}`, accessError);\n                throw new Error(`Permission denied: Cannot write to temporary directory: ${accessError.message}`);\n            }\n        }\n        // Generate a unique output filename\n        const uniqueId = (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        const outputTemplate = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-%(id)s.%(ext)s`);\n        // Build language preference string\n        const langPref = languages.join(\",\");\n        console.log(`[Subtitles] Downloading subtitles for video ${videoId} in languages: ${langPref}`);\n        // First get info about available subtitle tracks\n        try {\n            console.log(\"[Subtitles] Checking available subtitle tracks...\");\n            const { stdout: listOutput } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(`yt-dlp --list-subs https://www.youtube.com/watch?v=${videoId}`, {\n                shell: true,\n                timeout: 20000\n            });\n            console.log(\"[Subtitles] Available subtitle info:\");\n            console.log(listOutput);\n            // Check if the output indicates any subtitles are available\n            const hasManualSubs = listOutput.includes(\"has no subtitles\") ? false : true;\n            const hasAutoSubs = listOutput.includes(\"has no automatic captions\") ? false : true;\n            console.log(`[Subtitles] Manual subtitles available: ${hasManualSubs}`);\n            console.log(`[Subtitles] Auto-generated subtitles available: ${hasAutoSubs}`);\n        } catch (infoError) {\n            console.warn(\"[Subtitles] Error checking subtitle availability:\", infoError);\n        // Continue anyway, as this is just informational\n        }\n        try {\n            // First try to get regular subtitles (manually created)\n            let subtitleFile = null;\n            const possibleExtensions = [\n                \".vtt\",\n                \".srt\"\n            ];\n            try {\n                console.log(\"[Subtitles] Trying to download regular subtitles first...\");\n                // Add verbosity for debugging\n                const ytDlpCommand = `yt-dlp --verbose --write-sub --sub-lang ${langPref} --skip-download --output \"${outputTemplate}\" https://www.youtube.com/watch?v=${videoId}`;\n                console.log(`[Subtitles] Running command: ${ytDlpCommand}`);\n                const { stdout, stderr } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(ytDlpCommand, {\n                    shell: true,\n                    timeout: 30000\n                } // Add a timeout of 30 seconds\n                );\n                console.log(\"[Subtitles] yt-dlp stdout:\", stdout);\n                if (stderr) console.warn(\"[Subtitles] yt-dlp stderr:\", stderr);\n                // Check if a subtitle file was created\n                for (const ext of possibleExtensions){\n                    const potentialFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}${ext}`);\n                    if (await exists(potentialFile)) {\n                        subtitleFile = potentialFile;\n                        console.log(\"[Subtitles] Successfully downloaded regular subtitles:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(potentialFile));\n                        break;\n                    }\n                }\n                // Also check for language-specific filename patterns\n                if (!subtitleFile) {\n                    for (const lang of languages){\n                        for (const ext of possibleExtensions){\n                            // Check patterns like: uniqueId-videoId.lang.ext or uniqueId-videoId.lang_type.ext\n                            const langFilePatterns = [\n                                path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.${lang}${ext}`),\n                                path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.${lang}_*${ext}`)\n                            ];\n                            for (const pattern of langFilePatterns){\n                                // Need to use glob pattern matching here\n                                const { stdout: globResult } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(`ls ${pattern} 2>/dev/null || echo ''`, {\n                                    shell: true\n                                });\n                                if (globResult && globResult.trim() !== \"\") {\n                                    const files = globResult.trim().split(\"\\n\");\n                                    if (files.length > 0 && files[0] !== \"\") {\n                                        subtitleFile = files[0];\n                                        console.log(\"[Subtitles] Found language-specific subtitle file:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(subtitleFile));\n                                        break;\n                                    }\n                                }\n                            }\n                            if (subtitleFile) break;\n                        }\n                        if (subtitleFile) break;\n                    }\n                }\n                if (subtitleFile) {\n                    // Verify file is not empty\n                    const stats = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.stat(subtitleFile);\n                    if (stats.size === 0) {\n                        console.warn(\"[Subtitles] Downloaded subtitle file is empty, will try auto-generated subtitles\");\n                        subtitleFile = null;\n                    } else {\n                        return subtitleFile;\n                    }\n                }\n                console.log(\"[Subtitles] No regular subtitles found, trying auto-generated...\");\n            } catch (error) {\n                console.warn(\"[Subtitles] Error downloading regular subtitles, trying auto-generated:\", error);\n            }\n            // If we reach here, no regular subtitles were found, try auto-generated\n            try {\n                // Add verbosity for debugging\n                const autoSubCommand = `yt-dlp --verbose --write-auto-sub --sub-lang ${langPref} --skip-download --output \"${outputTemplate}\" https://www.youtube.com/watch?v=${videoId}`;\n                console.log(`[Subtitles] Running command: ${autoSubCommand}`);\n                const { stdout, stderr } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(autoSubCommand, {\n                    shell: true,\n                    timeout: 30000\n                } // Add a timeout of 30 seconds\n                );\n                console.log(\"[Subtitles] yt-dlp auto-sub stdout:\", stdout);\n                if (stderr) console.warn(\"[Subtitles] yt-dlp auto-sub stderr:\", stderr);\n                // Find the generated subtitle file (vtt or srt)\n                for (const ext of possibleExtensions){\n                    const potentialFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}${ext}`);\n                    if (await exists(potentialFile)) {\n                        // Verify file is not empty\n                        const stats = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.stat(potentialFile);\n                        if (stats.size === 0) {\n                            console.warn(`[Subtitles] Auto-generated subtitle file ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(potentialFile)} is empty`);\n                            continue;\n                        }\n                        subtitleFile = potentialFile;\n                        console.log(\"[Subtitles] Found auto-generated subtitles file:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(subtitleFile));\n                        break;\n                    }\n                }\n                // Also check for language-specific auto-generated subtitles\n                if (!subtitleFile) {\n                    for (const lang of languages){\n                        for (const ext of possibleExtensions){\n                            // Check patterns like: uniqueId-videoId.lang.ext or uniqueId-videoId.lang_type.ext\n                            const langFilePatterns = [\n                                path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.${lang}${ext}`),\n                                path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.${lang}_*${ext}`)\n                            ];\n                            for (const pattern of langFilePatterns){\n                                // Need to use glob pattern matching here\n                                const { stdout: globResult } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(`ls ${pattern} 2>/dev/null || echo ''`, {\n                                    shell: true\n                                });\n                                if (globResult && globResult.trim() !== \"\") {\n                                    const files = globResult.trim().split(\"\\n\");\n                                    if (files.length > 0 && files[0] !== \"\") {\n                                        // Verify file is not empty\n                                        const stats = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.stat(files[0]);\n                                        if (stats.size === 0) {\n                                            console.warn(`[Subtitles] Auto-generated subtitle file ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(files[0])} is empty`);\n                                            continue;\n                                        }\n                                        subtitleFile = files[0];\n                                        console.log(\"[Subtitles] Found language-specific auto-generated subtitle file:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(subtitleFile));\n                                        break;\n                                    }\n                                }\n                            }\n                            if (subtitleFile) break;\n                        }\n                        if (subtitleFile) break;\n                    }\n                }\n            } catch (error) {\n                console.error(\"[Subtitles] Error downloading auto-generated subtitles:\", error);\n            }\n            if (!subtitleFile) {\n                // Try one more time with different format selections\n                try {\n                    console.log(\"[Subtitles] Trying format-specific subtitle download as last resort...\");\n                    // Try different format options\n                    const formatOptions = [\n                        \"--write-subs\",\n                        \"--write-auto-subs\",\n                        \"--sub-format vtt\",\n                        \"--sub-format srt\"\n                    ];\n                    for (const format of formatOptions){\n                        for (const lang of languages){\n                            const lastResortCommand = `yt-dlp --verbose --sub-langs ${lang} ${format} --skip-download --output \"${outputTemplate}\" https://www.youtube.com/watch?v=${videoId}`;\n                            console.log(`[Subtitles] Running last resort command: ${lastResortCommand}`);\n                            try {\n                                const { stdout, stderr } = await (0,execa__WEBPACK_IMPORTED_MODULE_8__.execaCommand)(lastResortCommand, {\n                                    shell: true,\n                                    timeout: 30000\n                                });\n                                console.log(`[Subtitles] Last resort attempt for ${format} ${lang} stdout:`, stdout);\n                                if (stderr) console.warn(`[Subtitles] Last resort attempt stderr:`, stderr);\n                                // Check for files again\n                                for (const ext of possibleExtensions){\n                                    const potentialFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}${ext}`);\n                                    if (await exists(potentialFile)) {\n                                        // Verify file is not empty\n                                        const stats = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.stat(potentialFile);\n                                        if (stats.size === 0) {\n                                            console.warn(`[Subtitles] Last resort subtitle file ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(potentialFile)} is empty`);\n                                            continue;\n                                        }\n                                        subtitleFile = potentialFile;\n                                        console.log(\"[Subtitles] Found subtitles with last resort method:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(subtitleFile));\n                                        break;\n                                    }\n                                    // Check language variant\n                                    const langFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.${lang}${ext}`);\n                                    if (await exists(langFile)) {\n                                        // Verify file is not empty\n                                        const stats = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.stat(langFile);\n                                        if (stats.size === 0) {\n                                            console.warn(`[Subtitles] Last resort subtitle file ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(langFile)} is empty`);\n                                            continue;\n                                        }\n                                        subtitleFile = langFile;\n                                        console.log(\"[Subtitles] Found language-specific subtitles with last resort method:\", path__WEBPACK_IMPORTED_MODULE_1___default().basename(subtitleFile));\n                                        break;\n                                    }\n                                }\n                                if (subtitleFile) break;\n                            } catch (formatError) {\n                                console.warn(`[Subtitles] Format option ${format} failed:`, formatError);\n                            // Continue to next format\n                            }\n                        }\n                        if (subtitleFile) break;\n                    }\n                } catch (error) {\n                    console.error(\"[Subtitles] Last resort subtitle extraction failed:\", error);\n                }\n            }\n            if (!subtitleFile) {\n                console.error(\"[Subtitles] No subtitle file was created by yt-dlp (neither regular nor auto-generated)\");\n                return null;\n            }\n            return subtitleFile;\n        } catch (error) {\n            console.error(\"[Subtitles] Error downloading subtitles with yt-dlp:\", error);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"[Subtitles] Error downloading subtitles with yt-dlp:\", error);\n        return null;\n    }\n}\n/**\n * Downloads subtitles using ytdl-core\n * @param videoId YouTube video ID\n * @param languages Languages to try, in order of preference\n * @returns The path to the downloaded subtitle file or null if not available\n */ async function downloadWithYtdlCore(videoId, languages = [\n    \"pl\",\n    \"en\"\n]) {\n    console.log(`[Subtitles] Using ytdl-core to get subtitles for video ${videoId}`);\n    try {\n        // Get video info\n        const videoInfo = await ytdl_core__WEBPACK_IMPORTED_MODULE_6___default().getInfo(`https://www.youtube.com/watch?v=${videoId}`);\n        // Find caption tracks\n        const captionTracks = videoInfo.player_response.captions?.playerCaptionsTracklistRenderer?.captionTracks;\n        if (!captionTracks || captionTracks.length === 0) {\n            console.error(\"[Subtitles] No caption tracks found for video:\", videoId);\n            return null;\n        }\n        // Try to find caption in preferred languages\n        let selectedCaptionTrack = null;\n        for (const lang of languages){\n            selectedCaptionTrack = captionTracks.find((track)=>track.languageCode.toLowerCase() === lang.toLowerCase());\n            if (selectedCaptionTrack) {\n                console.log(`[Subtitles] Found caption track in language: ${lang}`);\n                break;\n            }\n        }\n        // If no preferred language found, take the first available\n        if (!selectedCaptionTrack) {\n            console.log(\"[Subtitles] No captions in preferred languages, using first available track\");\n            selectedCaptionTrack = captionTracks[0];\n        }\n        // Check if we have a baseUrl to download from\n        if (!selectedCaptionTrack.baseUrl) {\n            console.error(\"[Subtitles] No baseUrl found for caption track\");\n            return null;\n        }\n        // Create temp directory if it doesn't exist\n        const tempDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"temp\");\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(tempDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(tempDir, {\n                recursive: true\n            });\n        }\n        // Generate unique file name\n        const uniqueId = (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        const subtitleFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(tempDir, `${uniqueId}-${videoId}.xml`);\n        // Download the caption file\n        await new Promise((resolve, reject)=>{\n            https__WEBPACK_IMPORTED_MODULE_7___default().get(selectedCaptionTrack.baseUrl, async (response)=>{\n                if (response.statusCode !== 200) {\n                    reject(new Error(`HTTP Error: ${response.statusCode}`));\n                    return;\n                }\n                let data = \"\";\n                response.on(\"data\", (chunk)=>{\n                    data += chunk;\n                });\n                response.on(\"end\", async ()=>{\n                    try {\n                        await writeFile(subtitleFile, data, \"utf8\");\n                        resolve();\n                    } catch (err) {\n                        reject(err);\n                    }\n                });\n                response.on(\"error\", (err)=>{\n                    reject(err);\n                });\n            });\n        });\n        return subtitleFile;\n    } catch (error) {\n        // Check for specific error messages from ytdl-core that indicate signature issues\n        const errorMessage = error?.message || \"\";\n        if (errorMessage.includes(\"Could not extract signature deciphering functions\") || errorMessage.includes(\"Could not find player\") || errorMessage.includes(\"cipher\") || errorMessage.includes(\"decipher\")) {\n            console.error(\"[Subtitles] YouTube signature extraction failed. This video requires yt-dlp.\");\n            throw new Error(\"This video requires yt-dlp to extract subtitles. Please install yt-dlp to support this video.\");\n        }\n        console.error(\"[Subtitles] Error downloading subtitles with ytdl-core:\", error);\n        return null;\n    }\n}\n/**\n * Parses subtitle file content into plain text\n * @param filePath Path to the subtitle file\n * @returns Plain text from subtitles or null if parsing failed\n */ async function parseSubtitlesFile(filePath) {\n    try {\n        if (!filePath || !await exists(filePath)) {\n            console.error(\"[Subtitles] Invalid subtitle file path:\", filePath);\n            return null;\n        }\n        // Read the file content\n        const content = await readFile(filePath, \"utf8\");\n        const extension = path__WEBPACK_IMPORTED_MODULE_1___default().extname(filePath).toLowerCase();\n        console.log(`[Subtitles] Parsing subtitle file: ${path__WEBPACK_IMPORTED_MODULE_1___default().basename(filePath)} (${content.length} bytes)`);\n        // Log the first 1000 characters of raw subtitle content\n        console.log(`[Subtitles] Raw content (first 1000 chars):\\n${content.substring(0, 1000)}`);\n        let text = \"\";\n        let parseSuccess = false;\n        // Primary parsing approach\n        try {\n            if (extension === \".vtt\" || extension === \".srt\") {\n                // Use subtitle package for initial parsing attempt\n                const captions = subtitle__WEBPACK_IMPORTED_MODULE_4__.parseSync(content);\n                text = captions.map((item)=>item.text || \"\").filter(Boolean).join(\" \");\n                parseSuccess = text.length > 0;\n                if (parseSuccess) {\n                    console.log(`[Subtitles] Successfully parsed ${captions.length} captions with primary parser`);\n                } else {\n                    console.warn(\"[Subtitles] Primary parser returned empty text, will try fallback methods\");\n                }\n            } else if (extension === \".xml\") {\n                // Parse YouTube XML format\n                text = parseYouTubeXmlCaptions(content);\n                parseSuccess = text.length > 0;\n            } else {\n                console.error(\"[Subtitles] Unsupported subtitle format:\", extension);\n                return null;\n            }\n        } catch (parseError) {\n            console.warn(\"[Subtitles] Primary parsing failed:\", parseError);\n            // Log the first 500 chars of content for debugging\n            console.warn(\"[Subtitles] Content sample:\", content.substring(0, 500));\n        }\n        // Fallback parsing approach if primary method failed\n        if (!parseSuccess) {\n            console.log(\"[Subtitles] Attempting fallback parsing methods\");\n            try {\n                // Fallback 1: Manual line-by-line parsing for VTT/SRT\n                if (extension === \".vtt\" || extension === \".srt\") {\n                    console.log(\"[Subtitles] Trying manual line-by-line parsing\");\n                    // Simple manual parser that extracts text between timestamps\n                    const lines = content.split(\"\\n\");\n                    const textLines = [];\n                    // Look for lines that don't have timestamps and aren't numeric-only indices\n                    for(let i = 0; i < lines.length; i++){\n                        const line = lines[i].trim();\n                        // Skip empty lines, numeric-only lines (indices), and timestamp lines\n                        if (line && !/^\\d+$/.test(line) && // Skip indices\n                        !line.includes(\"-->\") && // Skip timestamps\n                        !line.startsWith(\"WEBVTT\") && // Skip headers\n                        !line.startsWith(\"NOTE\") && // Skip notes\n                        !line.startsWith(\"STYLE\") // Skip style info\n                        ) {\n                            textLines.push(line);\n                        }\n                    }\n                    text = textLines.join(\" \");\n                    parseSuccess = text.length > 0;\n                    if (parseSuccess) {\n                        console.log(`[Subtitles] Successfully extracted ${textLines.length} lines with manual parsing`);\n                    }\n                }\n                // If all parsing methods failed, log an error\n                if (!parseSuccess) {\n                    console.error(\"[Subtitles] All parsing methods failed for:\", filePath);\n                    throw new Error(\"Failed to parse subtitle content with all available methods\");\n                }\n            } catch (fallbackError) {\n                console.error(\"[Subtitles] Fallback parsing also failed:\", fallbackError);\n                return null;\n            }\n        }\n        // Clean up the text\n        // Remove HTML tags, extra whitespace, etc.\n        text = text.replace(/<[^>]*>/g, \"\") // Remove HTML tags\n        .replace(/\\s+/g, \" \") // Replace multiple spaces with a single space\n        .replace(/\\{.*?\\}/g, \"\") // Remove curly brace formatting (common in SRT)\n        .trim();\n        // Log the first 1000 characters of cleaned text\n        console.log(`[Subtitles] Cleaned text (first 1000 chars):\\n${text.substring(0, 1000)}`);\n        console.log(`[Subtitles] Final extracted text: ${text.length} characters`);\n        return text;\n    } catch (error) {\n        console.error(\"[Subtitles] Error parsing subtitle file:\", error);\n        return null;\n    } finally{\n        // Clean up the file regardless of success/failure\n        try {\n            await unlink(filePath);\n            console.log(\"[Subtitles] Deleted temporary file:\", filePath);\n        } catch (cleanupError) {\n            console.warn(\"[Subtitles] Error deleting temporary file:\", cleanupError);\n        }\n    }\n}\n/**\n * Parses YouTube XML captions format\n * @param content XML content as string\n * @returns Plain text from captions\n */ function parseYouTubeXmlCaptions(content) {\n    // Simple XML parsing to extract text from <text> elements\n    const textMatches = content.match(/<text[^>]*>(.*?)<\\/text>/g) || [];\n    const cleanedText = textMatches.map((match)=>{\n        // Extract content between tags\n        const text = match.replace(/<text[^>]*>(.*?)<\\/text>/g, \"$1\");\n        // Decode HTML entities\n        return text.replace(/&amp;/g, \"&\").replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\");\n    }).join(\" \");\n    return cleanedText;\n}\n/**\n * Downloads and parses subtitles from a YouTube video\n * @param videoId YouTube video ID\n * @param languages Languages to try, in order of preference\n * @returns Plain text from subtitles or null if unavailable\n */ async function getVideoSubtitles(videoId, languages = [\n    \"pl\",\n    \"en\"\n]) {\n    try {\n        // Input validation\n        if (!videoId || typeof videoId !== \"string\") {\n            console.error(\"[Subtitles] Invalid videoId:\", videoId);\n            throw new Error(\"Invalid YouTube video ID\");\n        }\n        // First check if yt-dlp is available to provide clearer error messages\n        const ytDlpAvailable = await isYtDlpAvailable().catch((error)=>{\n            console.error(\"[Subtitles] Error checking yt-dlp availability:\", error);\n            return false;\n        });\n        if (!ytDlpAvailable) {\n            const errorMsg = \"yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\\n\" + \"• macOS: brew install yt-dlp\\n\" + \"• Linux/macOS: pip install yt-dlp\\n\" + \"• Windows: pip install yt-dlp or choco install yt-dlp\";\n            console.error(\"[Subtitles] \" + errorMsg);\n            throw new Error(errorMsg);\n        }\n        // Download subtitles\n        console.log(`[Subtitles] Starting subtitle extraction for video: ${videoId}`);\n        const startTime = Date.now();\n        // Add timeout for subprocess calls\n        const downloadPromise = downloadSubtitles(videoId, languages);\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Subtitle download timeout after 30 seconds\")), 30000);\n        });\n        const subtitlePath = await Promise.race([\n            downloadPromise,\n            timeoutPromise\n        ]);\n        if (!subtitlePath) {\n            const errorMsg = `No subtitles available for video ${videoId}. Either the video doesn't have subtitles, or they couldn't be downloaded.`;\n            console.error(\"[Subtitles] \" + errorMsg);\n            return null;\n        }\n        // Verify file exists before attempting to parse\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(subtitlePath)) {\n            console.error(`[Subtitles] Subtitle file does not exist: ${subtitlePath}`);\n            throw new Error(`Subtitle file does not exist at ${subtitlePath}`);\n        }\n        // Parse the subtitle file with timeout\n        const parsePromise = parseSubtitlesFile(subtitlePath);\n        const parseTimeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>reject(new Error(\"Subtitle parsing timeout after 10 seconds\")), 10000);\n        });\n        const text = await Promise.race([\n            parsePromise,\n            parseTimeoutPromise\n        ]);\n        if (!text) {\n            const errorMsg = `Failed to parse subtitle file for video ${videoId}. The subtitle format may be unsupported or corrupted.`;\n            console.error(\"[Subtitles] \" + errorMsg);\n            return null;\n        }\n        const duration = Date.now() - startTime;\n        console.log(`[Subtitles] Successfully extracted subtitles (${text.length} chars) for video: ${videoId} in ${duration}ms`);\n        // Return a summary/sample for debugging\n        if (text.length > 500) {\n            console.log(\"[Subtitles] Text sample:\", text.substring(0, 500) + \"...\");\n        }\n        return text;\n    } catch (error) {\n        // Propagate the yt-dlp requirement error\n        if (error?.message?.includes(\"yt-dlp is required\")) {\n            console.error(\"[Subtitles] yt-dlp requirement error:\", error.message);\n            throw error;\n        }\n        // Handle timeout errors specifically\n        if (error?.message?.includes(\"timeout\")) {\n            console.error(\"[Subtitles] Operation timed out:\", error.message);\n            throw new Error(`Subtitle extraction timed out: ${error.message}`);\n        }\n        // Handle permission errors specifically\n        if (error?.message?.includes(\"permission denied\") || error?.message?.includes(\"EACCES\") || error?.message?.includes(\"Permission denied\")) {\n            console.error(\"[Subtitles] Permission error:\", error.message);\n            throw new Error(`Permission error during subtitle extraction: ${error.message}`);\n        }\n        // Create more informative error for the caller\n        let errorMsg = `Error extracting subtitles for video ${videoId}: ${error?.message || \"Unknown error\"}`;\n        // Add troubleshooting hints\n        if (error?.message?.includes(\"unavailable video\")) {\n            errorMsg += \"\\nThe video might be private, age-restricted, or requires login.\";\n        } else if (error?.message?.includes(\"permission\")) {\n            errorMsg += \"\\nCheck file system permissions in the temporary directory.\";\n        } else if (error?.message?.includes(\"network\")) {\n            errorMsg += \"\\nCheck your internet connection and try again.\";\n        }\n        console.error(\"[Subtitles] \" + errorMsg);\n        return null;\n    }\n}\n/**\n * Extracts subtitles from a YouTube video and returns the transcript text\n * Wrapper around getVideoSubtitles for the isolated video notes system\n * \n * @param videoId YouTube video ID\n * @returns The transcript text\n */ async function extractSubtitles(videoId) {\n    try {\n        // Use existing getVideoSubtitles function with default language preferences\n        const transcript = await getVideoSubtitles(videoId);\n        if (!transcript) {\n            throw new Error(\"No subtitles available for this video\");\n        }\n        return transcript;\n    } catch (error) {\n        // Log and re-throw to ensure error handling is consistent\n        console.error(`[Subtitles] Error extracting subtitles for video ${videoId}:`, error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/subtitles.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/youtube.ts":
/*!*********************************!*\
  !*** ./src/services/youtube.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractYouTubeId: () => (/* binding */ extractYouTubeId),\n/* harmony export */   getVideoInfo: () => (/* binding */ getVideoInfo),\n/* harmony export */   getVideoTranscript: () => (/* binding */ getVideoTranscript),\n/* harmony export */   isLikelyUrl: () => (/* reexport safe */ _youtube_validators__WEBPACK_IMPORTED_MODULE_0__.isLikelyUrl),\n/* harmony export */   isValidYouTubeId: () => (/* binding */ isValidYouTubeId),\n/* harmony export */   safeParseUrl: () => (/* binding */ safeParseUrl)\n/* harmony export */ });\n/* harmony import */ var _youtube_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./youtube/validators */ \"(rsc)/./src/services/youtube/validators.ts\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _subtitles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subtitles */ \"(rsc)/./src/services/subtitles.ts\");\n\n\n\n\n// Re-export the validators for backward compatibility\n\n// Promisify exec for async/await usage\nconst execAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)(child_process__WEBPACK_IMPORTED_MODULE_1__.exec);\n/**\n * Safely attempts to parse a URL string\n * @param urlString The URL string to parse\n * @returns URL object if successful, null if not\n */ function safeParseUrl(urlString) {\n    try {\n        // Add protocol if missing\n        let normalizedUrl = urlString.trim();\n        if (normalizedUrl.startsWith(\"//\")) {\n            normalizedUrl = `https:${normalizedUrl}`;\n        } else if (!normalizedUrl.startsWith(\"http://\") && !normalizedUrl.startsWith(\"https://\")) {\n            normalizedUrl = `https://${normalizedUrl}`;\n        }\n        return new URL(normalizedUrl);\n    } catch (error) {\n        console.warn(\"[YouTube] Failed to parse URL:\", error);\n        return null;\n    }\n}\n/**\n * Extracts a YouTube video ID from a URL\n * Supports various YouTube URL formats\n */ function extractYouTubeId(url) {\n    if (!url) return null;\n    // Clean the URL by trimming and handling mobile URLs\n    let cleanUrl = url.trim();\n    // Convert mobile youtube URLs to standard format\n    if (cleanUrl.includes(\"youtu.be/\")) {\n        cleanUrl = cleanUrl.replace(\"youtu.be/\", \"youtube.com/watch?v=\");\n    }\n    try {\n        // Try to parse as URL and extract from searchParams (standard youtube.com/watch?v=ID format)\n        const urlObj = new URL(cleanUrl);\n        // Handle youtube.com/watch?v=ID format\n        if (urlObj.hostname.includes(\"youtube.com\") && urlObj.pathname.includes(\"/watch\")) {\n            const videoId = urlObj.searchParams.get(\"v\");\n            if (videoId) return videoId;\n        }\n        // Handle youtube.com/embed/ID format\n        if (urlObj.hostname.includes(\"youtube\") && urlObj.pathname.includes(\"/embed/\")) {\n            const parts = urlObj.pathname.split(\"/\");\n            return parts[parts.indexOf(\"embed\") + 1] || null;\n        }\n        // Handle youtu.be/ID format (already converted to standard format above, but just in case)\n        if (urlObj.hostname === \"youtu.be\") {\n            return urlObj.pathname.substring(1) || null;\n        }\n        // Handle youtube.com/v/ID format\n        if (urlObj.hostname.includes(\"youtube\") && urlObj.pathname.includes(\"/v/\")) {\n            const parts = urlObj.pathname.split(\"/\");\n            return parts[parts.indexOf(\"v\") + 1] || null;\n        }\n    } catch (e) {\n        // If URL parsing fails, try regex-based extraction\n        console.error(\"URL parsing failed, trying regex fallback:\", e);\n    }\n    // Fallback to regex for cases where URL parsing fails\n    const patterns = [\n        /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/)([^&\\n?#]+)/,\n        /^([a-zA-Z0-9_-]{11})$/ // Direct video ID (11 characters)\n    ];\n    for (const pattern of patterns){\n        const match = cleanUrl.match(pattern);\n        if (match && match[1]) {\n            return match[1];\n        }\n    }\n    return null;\n}\n/**\n * Validates if a string is a valid YouTube video ID\n */ function isValidYouTubeId(id) {\n    if (!id) return false;\n    // YouTube IDs are typically 11 characters and contain only certain characters\n    const validPattern = /^[a-zA-Z0-9_-]{11}$/;\n    return validPattern.test(id);\n}\n/**\n * Gets information about a YouTube video\n */ async function getVideoInfo(videoId) {\n    if (!videoId) {\n        return {\n            videoId: \"\",\n            title: \"\",\n            thumbnailUrl: \"\",\n            error: \"No video ID provided\"\n        };\n    }\n    try {\n        // Use YouTube API to get video info\n        const apiKey = \"AIzaSyCvUahUwoVQyozpRphtVWE0ev0ha46wo0I\";\n        if (!apiKey) {\n            console.error(\"[YouTube Service] No YouTube API key configured\");\n            return {\n                videoId,\n                title: `YouTube Video (${videoId})`,\n                thumbnailUrl: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,\n                error: \"YouTube API key not configured - using fallback data\"\n            };\n        }\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`, {\n            next: {\n                revalidate: 3600\n            }\n        } // Cache for 1 hour\n        );\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"[YouTube Service] YouTube API error:\", errorData);\n            // Fall back to basic info using video ID\n            return {\n                videoId,\n                title: `YouTube Video (${videoId})`,\n                thumbnailUrl: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,\n                error: `YouTube API error: ${errorData.error?.message || response.statusText}`\n            };\n        }\n        const data = await response.json();\n        if (!data.items || data.items.length === 0) {\n            console.error(\"[YouTube Service] Video not found:\", videoId);\n            return {\n                videoId,\n                title: `Video Not Found (${videoId})`,\n                thumbnailUrl: \"\",\n                error: \"Video not found\"\n            };\n        }\n        const videoDetails = data.items[0].snippet;\n        return {\n            videoId,\n            title: videoDetails.title,\n            description: videoDetails.description,\n            thumbnailUrl: videoDetails.thumbnails?.high?.url || videoDetails.thumbnails?.default?.url || \"\",\n            channelTitle: videoDetails.channelTitle,\n            publishedAt: videoDetails.publishedAt\n        };\n    } catch (error) {\n        console.error(\"[YouTube Service] Error fetching video info:\", error);\n        // Fall back to basic info using video ID\n        return {\n            videoId,\n            title: `YouTube Video (${videoId})`,\n            thumbnailUrl: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,\n            error: `Error fetching video info: ${error.message}`\n        };\n    }\n}\n/**\n * Gets the transcript for a YouTube video\n * Wraps the subtitle extraction service to provide consistent error handling\n */ async function getVideoTranscript(videoId) {\n    if (!videoId) {\n        return {\n            transcript: \"\",\n            error: \"No video ID provided\"\n        };\n    }\n    try {\n        // Use the subtitles service to extract transcript\n        const transcript = await (0,_subtitles__WEBPACK_IMPORTED_MODULE_3__.extractSubtitles)(videoId);\n        if (!transcript || transcript.trim().length === 0) {\n            return {\n                transcript: \"\",\n                error: \"No subtitles available for this video\"\n            };\n        }\n        return {\n            transcript\n        };\n    } catch (error) {\n        console.error(\"[YouTube Service] Error extracting transcript:\", error);\n        // Provide specific error messages for common issues\n        if (error.message?.includes(\"yt-dlp is required\")) {\n            return {\n                transcript: \"\",\n                error: \"yt-dlp is required but not installed\"\n            };\n        }\n        if (error.message?.includes(\"subtitles are disabled\")) {\n            return {\n                transcript: \"\",\n                error: \"This video has disabled subtitles\"\n            };\n        }\n        if (error.message?.includes(\"not available\")) {\n            return {\n                transcript: \"\",\n                error: \"No subtitles available for this video\"\n            };\n        }\n        return {\n            transcript: \"\",\n            error: `Error extracting transcript: ${error.message}`\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/youtube.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/youtube/validators.ts":
/*!********************************************!*\
  !*** ./src/services/youtube/validators.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isLikelyUrl: () => (/* binding */ isLikelyUrl)\n/* harmony export */ });\n/**\n * Validators for YouTube-related functionality\n */ /**\n * Checks if a string is likely a URL\n * @param url The string to check\n * @returns boolean indicating if the string is a valid URL\n */ function isLikelyUrl(url) {\n    try {\n        new URL(url);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmljZXMveW91dHViZS92YWxpZGF0b3JzLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVEOzs7O0NBSUMsR0FDTSxTQUFTQSxZQUFZQyxHQUFXO0lBQ3JDLElBQUk7UUFDRixJQUFJQyxJQUFJRDtRQUNSLE9BQU87SUFDVCxFQUFFLE9BQU07UUFDTixPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2VkdXNjcmliZS8uL3NyYy9zZXJ2aWNlcy95b3V0dWJlL3ZhbGlkYXRvcnMudHM/ZmY2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZhbGlkYXRvcnMgZm9yIFlvdVR1YmUtcmVsYXRlZCBmdW5jdGlvbmFsaXR5XG4gKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgbGlrZWx5IGEgVVJMXG4gKiBAcGFyYW0gdXJsIFRoZSBzdHJpbmcgdG8gY2hlY2tcbiAqIEByZXR1cm5zIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgVVJMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xpa2VseVVybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59ICJdLCJuYW1lcyI6WyJpc0xpa2VseVVybCIsInVybCIsIlVSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/services/youtube/validators.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/splitTranscript.ts":
/*!**************************************!*\
  !*** ./src/utils/splitTranscript.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   estimateTokenCount: () => (/* binding */ estimateTokenCount),\n/* harmony export */   isChunkWithinTokenLimit: () => (/* binding */ isChunkWithinTokenLimit),\n/* harmony export */   splitTranscriptIntoChunks: () => (/* binding */ splitTranscriptIntoChunks)\n/* harmony export */ });\n/**\n * Represents a chunk of text with metadata\n */ /**\n * Splits a transcript into chunks based on word count\n * @param transcript The full transcript text to split\n * @param maxWords Maximum number of words per chunk (default: 800)\n * @returns Array of TranscriptChunk objects\n */ function splitTranscriptIntoChunks(transcript, maxWords = 800) {\n    // Split into words and filter out empty strings\n    const words = transcript.split(/\\s+/).filter((word)=>word.length > 0);\n    const chunks = [];\n    for(let i = 0; i < words.length; i += maxWords){\n        const startWord = i;\n        const endWord = Math.min(i + maxWords, words.length);\n        const chunkWords = words.slice(startWord, endWord);\n        chunks.push({\n            content: chunkWords.join(\" \"),\n            index: chunks.length,\n            wordCount: chunkWords.length,\n            startWord,\n            endWord\n        });\n    }\n    return chunks;\n}\n/**\n * Estimates the number of tokens in a text string\n * This is a rough estimate: ~4 characters per token on average\n * @param text The text to estimate tokens for\n * @returns Estimated number of tokens\n */ function estimateTokenCount(text) {\n    return Math.ceil(text.length / 4);\n}\n/**\n * Validates if a chunk is within safe token limits\n * @param chunk The chunk to validate\n * @param maxTokens Maximum allowed tokens (default: 3000)\n * @returns boolean indicating if chunk is within limits\n */ function isChunkWithinTokenLimit(chunk, maxTokens = 3000) {\n    return estimateTokenCount(chunk.content) <= maxTokens;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdXRpbHMvc3BsaXRUcmFuc2NyaXB0LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBb0JEOzs7OztDQUtDLEdBQ00sU0FBU0EsMEJBQ2RDLFVBQWtCLEVBQ2xCQyxXQUFtQixHQUFHO0lBRXRCLGdEQUFnRDtJQUNoRCxNQUFNQyxRQUFRRixXQUFXRyxLQUFLLENBQUMsT0FBT0MsTUFBTSxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxNQUFNLEdBQUc7SUFDbkUsTUFBTUMsU0FBNEIsRUFBRTtJQUVwQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sTUFBTUksTUFBTSxFQUFFRSxLQUFLUCxTQUFVO1FBQy9DLE1BQU1RLFlBQVlEO1FBQ2xCLE1BQU1FLFVBQVVDLEtBQUtDLEdBQUcsQ0FBQ0osSUFBSVAsVUFBVUMsTUFBTUksTUFBTTtRQUNuRCxNQUFNTyxhQUFhWCxNQUFNWSxLQUFLLENBQUNMLFdBQVdDO1FBRTFDSCxPQUFPUSxJQUFJLENBQUM7WUFDVkMsU0FBU0gsV0FBV0ksSUFBSSxDQUFDO1lBQ3pCQyxPQUFPWCxPQUFPRCxNQUFNO1lBQ3BCYSxXQUFXTixXQUFXUCxNQUFNO1lBQzVCRztZQUNBQztRQUNGO0lBQ0Y7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTYSxtQkFBbUJDLElBQVk7SUFDN0MsT0FBT1YsS0FBS1csSUFBSSxDQUFDRCxLQUFLZixNQUFNLEdBQUc7QUFDakM7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNpQix3QkFDZEMsS0FBc0IsRUFDdEJDLFlBQW9CLElBQUk7SUFFeEIsT0FBT0wsbUJBQW1CSSxNQUFNUixPQUFPLEtBQUtTO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vc3JjL3V0aWxzL3NwbGl0VHJhbnNjcmlwdC50cz9jZmVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIHRleHQgd2l0aCBtZXRhZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRDaHVuayB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgaW5kZXg6IG51bWJlcjtcbiAgd29yZENvdW50OiBudW1iZXI7XG4gIHN0YXJ0V29yZDogbnVtYmVyO1xuICBlbmRXb3JkOiBudW1iZXI7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGZhaWxlZCBjaHVuayBwcm9jZXNzaW5nIGF0dGVtcHRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGYWlsZWRDaHVuayB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHJlYXNvbjogc3RyaW5nO1xuICBhdHRlbXB0czogbnVtYmVyO1xuICBzdGFydFdvcmQ6IG51bWJlcjtcbiAgZW5kV29yZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhIHRyYW5zY3JpcHQgaW50byBjaHVua3MgYmFzZWQgb24gd29yZCBjb3VudFxuICogQHBhcmFtIHRyYW5zY3JpcHQgVGhlIGZ1bGwgdHJhbnNjcmlwdCB0ZXh0IHRvIHNwbGl0XG4gKiBAcGFyYW0gbWF4V29yZHMgTWF4aW11bSBudW1iZXIgb2Ygd29yZHMgcGVyIGNodW5rIChkZWZhdWx0OiA4MDApXG4gKiBAcmV0dXJucyBBcnJheSBvZiBUcmFuc2NyaXB0Q2h1bmsgb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRUcmFuc2NyaXB0SW50b0NodW5rcyhcbiAgdHJhbnNjcmlwdDogc3RyaW5nLFxuICBtYXhXb3JkczogbnVtYmVyID0gODAwXG4pOiBUcmFuc2NyaXB0Q2h1bmtbXSB7XG4gIC8vIFNwbGl0IGludG8gd29yZHMgYW5kIGZpbHRlciBvdXQgZW1wdHkgc3RyaW5nc1xuICBjb25zdCB3b3JkcyA9IHRyYW5zY3JpcHQuc3BsaXQoL1xccysvKS5maWx0ZXIod29yZCA9PiB3b3JkLmxlbmd0aCA+IDApO1xuICBjb25zdCBjaHVua3M6IFRyYW5zY3JpcHRDaHVua1tdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkgKz0gbWF4V29yZHMpIHtcbiAgICBjb25zdCBzdGFydFdvcmQgPSBpO1xuICAgIGNvbnN0IGVuZFdvcmQgPSBNYXRoLm1pbihpICsgbWF4V29yZHMsIHdvcmRzLmxlbmd0aCk7XG4gICAgY29uc3QgY2h1bmtXb3JkcyA9IHdvcmRzLnNsaWNlKHN0YXJ0V29yZCwgZW5kV29yZCk7XG4gICAgXG4gICAgY2h1bmtzLnB1c2goe1xuICAgICAgY29udGVudDogY2h1bmtXb3Jkcy5qb2luKCcgJyksXG4gICAgICBpbmRleDogY2h1bmtzLmxlbmd0aCxcbiAgICAgIHdvcmRDb3VudDogY2h1bmtXb3Jkcy5sZW5ndGgsXG4gICAgICBzdGFydFdvcmQsXG4gICAgICBlbmRXb3JkXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY2h1bmtzO1xufVxuXG4vKipcbiAqIEVzdGltYXRlcyB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiBhIHRleHQgc3RyaW5nXG4gKiBUaGlzIGlzIGEgcm91Z2ggZXN0aW1hdGU6IH40IGNoYXJhY3RlcnMgcGVyIHRva2VuIG9uIGF2ZXJhZ2VcbiAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIGVzdGltYXRlIHRva2VucyBmb3JcbiAqIEByZXR1cm5zIEVzdGltYXRlZCBudW1iZXIgb2YgdG9rZW5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc3RpbWF0ZVRva2VuQ291bnQodGV4dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguY2VpbCh0ZXh0Lmxlbmd0aCAvIDQpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBpZiBhIGNodW5rIGlzIHdpdGhpbiBzYWZlIHRva2VuIGxpbWl0c1xuICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byB2YWxpZGF0ZVxuICogQHBhcmFtIG1heFRva2VucyBNYXhpbXVtIGFsbG93ZWQgdG9rZW5zIChkZWZhdWx0OiAzMDAwKVxuICogQHJldHVybnMgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNodW5rIGlzIHdpdGhpbiBsaW1pdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2h1bmtXaXRoaW5Ub2tlbkxpbWl0KFxuICBjaHVuazogVHJhbnNjcmlwdENodW5rLFxuICBtYXhUb2tlbnM6IG51bWJlciA9IDMwMDBcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gZXN0aW1hdGVUb2tlbkNvdW50KGNodW5rLmNvbnRlbnQpIDw9IG1heFRva2Vucztcbn0gIl0sIm5hbWVzIjpbInNwbGl0VHJhbnNjcmlwdEludG9DaHVua3MiLCJ0cmFuc2NyaXB0IiwibWF4V29yZHMiLCJ3b3JkcyIsInNwbGl0IiwiZmlsdGVyIiwid29yZCIsImxlbmd0aCIsImNodW5rcyIsImkiLCJzdGFydFdvcmQiLCJlbmRXb3JkIiwiTWF0aCIsIm1pbiIsImNodW5rV29yZHMiLCJzbGljZSIsInB1c2giLCJjb250ZW50Iiwiam9pbiIsImluZGV4Iiwid29yZENvdW50IiwiZXN0aW1hdGVUb2tlbkNvdW50IiwidGV4dCIsImNlaWwiLCJpc0NodW5rV2l0aGluVG9rZW5MaW1pdCIsImNodW5rIiwibWF4VG9rZW5zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/splitTranscript.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/web-streams-polyfill","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/sax","vendor-chunks/isexe","vendor-chunks/execa","vendor-chunks/readable-stream","vendor-chunks/split2","vendor-chunks/duplexer2","vendor-chunks/ytdl-core","vendor-chunks/get-stream","vendor-chunks/cross-spawn","vendor-chunks/m3u8stream","vendor-chunks/human-signals","vendor-chunks/@sec-ant","vendor-chunks/unicorn-magic","vendor-chunks/signal-exit","vendor-chunks/npm-run-path","vendor-chunks/subtitle","vendor-chunks/multipipe","vendor-chunks/inherits","vendor-chunks/yoctocolors","vendor-chunks/strip-final-newline","vendor-chunks/pretty-ms","vendor-chunks/parse-ms","vendor-chunks/is-unicode-supported","vendor-chunks/is-stream","vendor-chunks/is-plain-obj","vendor-chunks/figures","vendor-chunks/@sindresorhus","vendor-chunks/which","vendor-chunks/util-deprecate","vendor-chunks/string_decoder","vendor-chunks/shebang-regex","vendor-chunks/shebang-command","vendor-chunks/safe-buffer","vendor-chunks/process","vendor-chunks/process-nextick-args","vendor-chunks/path-key","vendor-chunks/miniget","vendor-chunks/core-util-is"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo-notes%2Froute&page=%2Fapi%2Fvideo-notes%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo-notes%2Froute.ts&appDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe%2Fsrc%2Fapp&pageExtensions=js&pageExtensions=jsx&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=%2FUsers%2Fjanjedrach%2FCursor%2Feduscribe&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();