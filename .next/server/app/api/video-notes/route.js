"use strict";(()=>{var e={};e.id=2625,e.ids=[2625],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{e.exports=require("buffer")},61282:e=>{e.exports=require("child_process")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},92048:e=>{e.exports=require("fs")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},98216:e=>{e.exports=require("net")},55315:e=>{e.exports=require("path")},68621:e=>{e.exports=require("punycode")},86624:e=>{e.exports=require("querystring")},76162:e=>{e.exports=require("stream")},74026:e=>{e.exports=require("string_decoder")},95346:e=>{e.exports=require("timers")},82452:e=>{e.exports=require("tls")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},41520:e=>{e.exports=require("vm")},6162:e=>{e.exports=require("worker_threads")},71568:e=>{e.exports=require("zlib")},72254:e=>{e.exports=require("node:buffer")},17718:e=>{e.exports=require("node:child_process")},15673:e=>{e.exports=require("node:events")},87561:e=>{e.exports=require("node:fs")},70612:e=>{e.exports=require("node:os")},49411:e=>{e.exports=require("node:path")},97742:e=>{e.exports=require("node:process")},84492:e=>{e.exports=require("node:stream")},76402:e=>{e.exports=require("node:stream/promises")},72477:e=>{e.exports=require("node:stream/web")},76915:e=>{e.exports=require("node:string_decoder")},99397:e=>{e.exports=require("node:timers/promises")},25997:e=>{e.exports=require("node:tty")},41041:e=>{e.exports=require("node:url")},47261:e=>{e.exports=require("node:util")},83858:e=>{e.exports=require("node:v8")},45216:(e,r,o)=>{o.r(r),o.d(r,{originalPathname:()=>q,patchFetch:()=>b,requestAsyncStorage:()=>v,routeModule:()=>x,serverHooks:()=>V,staticGenerationAsyncStorage:()=>P});var t={};o.r(t),o.d(t,{DELETE:()=>N,GET:()=>f,POST:()=>I,dynamic:()=>A});var s=o(49303),i=o(88716),a=o(60670),n=o(87070),c=o(23517),d=o(73185),l=o(51215),u=o(58026),g=o(82227);let p="https://xhljckmlzdshxibnqsbj.supabase.co",h="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function m(e){try{let r=(0,c.eI)(p,h),{data:o}=await r.from("user_subscriptions").select("plan_id").eq("user_id",e).eq("status","active").single(),t=o?.plan_id;if("student"===t||"pro"===t)return{planId:t};return{planId:"free"}}catch(e){return console.warn("[Video Notes API] Could not fetch subscription:",e),{planId:"free"}}}async function I(e){console.log("[Video Notes API] Request received: POST");try{console.log("[Video Notes API] Authenticating request");let r=e.headers.get("authorization");if(!r||!r.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let o=r.replace("Bearer ",""),t=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${o}`}}}),{data:{user:s},error:i}=await t.auth.getUser(o);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`),console.log("[Video Notes API] Checking usage limits");let a=await (0,u.PH)(s.id,o,"video");if(!a.canGenerate)return console.log(`[Video Notes API] Generation limit reached: ${a.reason}`),n.NextResponse.json({success:!1,error:"Generation limit reached",message:a.reason||"You have reached your monthly note generation limit",usage:a.usage,limits:a.limits},{status:429});if(!a.canSave)return console.log(`[Video Notes API] Storage limit reached: ${a.reason}`),n.NextResponse.json({success:!1,error:"Storage limit reached",message:a.reason||"You have reached your saved notes limit",usage:a.usage,limits:a.limits},{status:429});console.log(`[Video Notes API] Usage check passed - can generate: ${a.canGenerate}, can save: ${a.canSave}`);let I=await m(s.id),f=await (0,g.GV)(s.id,I.planId,"video",async()=>{let{url:r,title:i}=await e.json();if(!r)return console.error("[Video Notes API] Missing URL parameter"),{success:!1,error:"Missing URL",message:"Please provide a YouTube URL"};console.log(`[Video Notes API] Processing URL: ${r}`);let a=(0,d.jx)(r);if(!a||!(0,d.cc)(a))return console.error("[Video Notes API] Invalid YouTube URL:",r),{success:!1,error:"Invalid YouTube URL",message:"The provided URL is not a valid YouTube video URL"};console.log(`[Video Notes API] Valid YouTube ID: ${a}`);try{let{data:e,error:r}=await t.from("video_notes").select("id, video_id").eq("video_id",a).eq("user_id",s.id).single();if(e&&!r)return console.log(`[Video Notes API] Notes already exist for video: ${a}`),{success:!1,error:"Duplicate note",message:"Notes for this video already exist",noteId:e.id}}catch(e){console.error("[Video Notes API] Error checking for existing notes:",e)}console.log("[Video Notes API] Fetching video information");let n=await (0,d.$p)(a);if(!n||n.error)return console.error("[Video Notes API] Failed to get video info:",n?.error||"Unknown error"),{success:!1,error:"Video info error",message:n?.error||"Failed to retrieve video information"};console.log(`[Video Notes API] Video info retrieved: "${n.title}"`),console.log("[Video Notes API] Fetching video transcript");let c=await (0,d.C$)(a);if(!c||c.error)return console.error("[Video Notes API] Transcript error:",c?.error||"Unknown error"),{success:!1,error:"Transcript error",message:c?.error||"Failed to extract transcript from the video"};if(!c.transcript||0===c.transcript.trim().length)return console.error("[Video Notes API] Empty transcript"),{success:!1,error:"Empty transcript",message:"The video does not have any extractable content for notes"};console.log(`[Video Notes API] Transcript retrieved (${c.transcript.length} chars)`),console.log("[Video Notes API] Generating notes from transcript");let g=await (0,l.L)({transcript:c.transcript,videoTitle:n.title});if(!g.content)return console.error("[Video Notes API] AI note generation failed:",g.error),{success:!1,error:"Note generation failed",message:g.error||"Failed to generate notes from the transcript"};console.log(`[Video Notes API] Successfully generated notes (${g.content.length} chars)`);let p=`video_${Date.now()}`,h={id:p,user_id:s.id,video_url:r,video_id:a,title:i||n.title,thumbnail_url:n.thumbnailUrl,content:g.content,summary:g.summary,quiz:g.quiz,created_at:new Date().toISOString()};console.log(`[Video Notes API] Created note with ID: ${p}`),console.log("[Video Notes API] Note data structure:",Object.keys(h).join(", ")),console.log("[Video Notes API] Storing note in Supabase video_notes table");try{try{let{error:e}=await t.from("video_notes").select("count").limit(1);if(e)return console.error("[Video Notes API] Database connection check failed:",e),{success:!1,error:"Database connection error",message:"Could not connect to the database. Please try again later.",details:{code:e.code,message:e.message}}}catch(e){console.error("[Video Notes API] Database ping exception:",e)}let{data:e,error:r}=await t.from("video_notes").insert(h).select().single();if(r){if(console.error("[Video Notes API] Database storage error:",r),console.error("[Video Notes API] Database error details:",{code:r.code,message:r.message,details:r.details,hint:r.hint}),"23505"===r.code)return{success:!1,error:"Duplicate record",message:"Notes for this video already exist in the database",details:{code:r.code,message:r.message}};if(r.code?.startsWith("22")||r.code?.startsWith("23"))return{success:!1,error:"Invalid data format",message:"The note data could not be stored due to validation errors",details:{code:r.code,message:r.message}};if("42P01"===r.code)return{success:!1,error:"Schema error",message:"The video_notes table does not exist. Please run the database initialization.",details:{code:r.code,message:r.message}};return{success:!1,error:"Database error",message:"Failed to store the notes in the database",details:{code:r.code,message:r.message}}}console.log(`[Video Notes API] Successfully stored note in database with ID: ${e?.id||p}`),console.log("[Video Notes API] Incrementing usage counters");try{await (0,u.iS)(s.id,o,"video"),console.log("[Video Notes API] Usage tracking completed")}catch(e){console.error("[Video Notes API] Usage tracking failed (note still created):",e)}console.log("[Video Notes API] Refreshing saved notes count");try{await (0,u.u6)(s.id,o),console.log("[Video Notes API] Saved notes count refreshed")}catch(e){console.error("[Video Notes API] Saved notes count refresh failed (note still created):",e)}return{success:!0,data:e}}catch(e){return console.error("[Video Notes API] Unexpected database error:",e),{success:!1,error:"Database exception",message:e?.message||"An unexpected error occurred while storing notes",details:e}}});return n.NextResponse.json(f)}catch(e){return console.error("[Video Notes API] Critical error:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred on the server",details:e.message},{status:500})}}async function f(e){console.log("[Video Notes API] Request received: GET");try{let r=e.headers.get("authorization");if(!r||!r.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let o=r.replace("Bearer ",""),t=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${o}`}}}),{data:{user:s},error:i}=await t.auth.getUser(o);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`);let{data:a,error:d}=await t.from("video_notes").select("*").eq("user_id",s.id).order("created_at",{ascending:!1});if(d)return console.error("[Video Notes API] Database fetch error:",d),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to fetch video notes from the database",details:{code:d.code,message:d.message}},{status:500});return console.log(`[Video Notes API] Successfully fetched ${a.length} video notes`),n.NextResponse.json({success:!0,data:a})}catch(e){return console.error("[Video Notes API] Error fetching video notes:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while fetching video notes",details:e.message},{status:500})}}async function N(e){console.log("[Video Notes API] Request received: DELETE");try{let r=e.headers.get("authorization");if(!r||!r.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let o=r.replace("Bearer ",""),t=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${o}`}}}),{data:{user:s},error:i}=await t.auth.getUser(o);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`);let a=e.nextUrl.searchParams.get("id");if(!a)return console.error("[Video Notes API] Note ID missing"),n.NextResponse.json({success:!1,error:"Missing note ID",message:"Note ID is required for deletion"},{status:400});console.log(`[Video Notes API] Deleting note with ID: ${a}`);let{data:d,error:l}=await t.from("video_notes").delete().eq("id",a).eq("user_id",s.id).select();if(l)return console.error("[Video Notes API] Database delete error:",l),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to delete the note from the database",details:{code:l.code,message:l.message}},{status:500});if(!d||0===d.length)return console.error(`[Video Notes API] Note not found or access denied: ${a}`),n.NextResponse.json({success:!1,error:"Note not found",message:"The note was not found or you do not have permission to delete it"},{status:404});console.log(`[Video Notes API] Successfully deleted note: ${a}`);try{await (0,u.u6)(s.id,o),console.log("[Video Notes API] Saved notes count refreshed after deletion")}catch(e){console.error("[Video Notes API] Saved notes count refresh failed after deletion:",e)}return n.NextResponse.json({success:!0,message:"Note deleted successfully",data:d[0]})}catch(e){return console.error("[Video Notes API] Error deleting video note:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while deleting the note",details:e.message},{status:500})}}let A="force-dynamic",x=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/video-notes/route",pathname:"/api/video-notes",filename:"route",bundlePath:"app/api/video-notes/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/video-notes/route.ts",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:v,staticGenerationAsyncStorage:P,serverHooks:V}=x,q="/api/video-notes/route";function b(){return(0,a.patchFetch)({serverHooks:V,staticGenerationAsyncStorage:P})}}};var r=require("../../../webpack-runtime.js");r.C(e);var o=e=>r(r.s=e),t=r.X(0,[9276,5972,3517,4769,5605,5074,5288,8285,1724,2086],()=>o(45216));module.exports=t})();