"use strict";(()=>{var e={};e.id=2625,e.ids=[2625],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},27790:e=>{e.exports=require("assert")},78893:e=>{e.exports=require("buffer")},61282:e=>{e.exports=require("child_process")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},92048:e=>{e.exports=require("fs")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},98216:e=>{e.exports=require("net")},19801:e=>{e.exports=require("os")},55315:e=>{e.exports=require("path")},68621:e=>{e.exports=require("punycode")},86624:e=>{e.exports=require("querystring")},76162:e=>{e.exports=require("stream")},74026:e=>{e.exports=require("string_decoder")},95346:e=>{e.exports=require("timers")},82452:e=>{e.exports=require("tls")},74175:e=>{e.exports=require("tty")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},41520:e=>{e.exports=require("vm")},6162:e=>{e.exports=require("worker_threads")},71568:e=>{e.exports=require("zlib")},87561:e=>{e.exports=require("node:fs")},84492:e=>{e.exports=require("node:stream")},72477:e=>{e.exports=require("node:stream/web")},45216:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>P,patchFetch:()=>V,requestAsyncStorage:()=>N,routeModule:()=>x,serverHooks:()=>y,staticGenerationAsyncStorage:()=>A});var o={};r.r(o),r.d(o,{DELETE:()=>b,GET:()=>v,POST:()=>f,dynamic:()=>I});var s=r(49303),i=r(88716),a=r(60670),n=r(87070),c=r(23517),l=r(73185),u=r(51215),d=r(58026),g=r(82227);let p="https://xhljckmlzdshxibnqsbj.supabase.co",h="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function m(e){try{let t=(0,c.eI)(p,h),{data:r}=await t.from("user_subscriptions").select("plan_id").eq("user_id",e).eq("status","active").single(),o=r?.plan_id;if("student"===o||"pro"===o)return{planId:o};return{planId:"free"}}catch(e){return console.warn("[Video Notes API] Could not fetch subscription:",e),{planId:"free"}}}async function f(e){console.log("[Video Notes API] Request received: POST");try{console.log("[Video Notes API] Authenticating request");let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let r=t.replace("Bearer ",""),o=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${r}`}}}),{data:{user:s},error:i}=await o.auth.getUser(r);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`),console.log("[Video Notes API] Checking usage limits");let a=await (0,d.PH)(s.id,r,"video");if(!a.canGenerate)return console.log(`[Video Notes API] Generation limit reached: ${a.reason}`),n.NextResponse.json({success:!1,error:"Generation limit reached",message:a.reason||"You have reached your monthly note generation limit",usage:a.usage,limits:a.limits},{status:429});if(!a.canSave)return console.log(`[Video Notes API] Storage limit reached: ${a.reason}`),n.NextResponse.json({success:!1,error:"Storage limit reached",message:a.reason||"You have reached your saved notes limit",usage:a.usage,limits:a.limits},{status:429});console.log(`[Video Notes API] Usage check passed - can generate: ${a.canGenerate}, can save: ${a.canSave}`);let f=await m(s.id),v=await (0,g.GV)(s.id,f.planId,"video",async()=>{let{url:t,title:i}=await e.json();if(!t)return console.error("[Video Notes API] Missing URL parameter"),{success:!1,error:"Missing URL",message:"Please provide a YouTube URL"};console.log(`[Video Notes API] Processing URL: ${t}`);let a=(0,l.jx)(t);if(!a||!(0,l.cc)(a))return console.error("[Video Notes API] Invalid YouTube URL:",t),{success:!1,error:"Invalid YouTube URL",message:"The provided URL is not a valid YouTube video URL"};console.log(`[Video Notes API] Valid YouTube ID: ${a}`);try{let{data:e,error:t}=await o.from("video_notes").select("id, video_id").eq("video_id",a).eq("user_id",s.id).single();if(e&&!t)return console.log(`[Video Notes API] Notes already exist for video: ${a}`),{success:!1,error:"Duplicate note",message:"Notes for this video already exist",noteId:e.id}}catch(e){console.error("[Video Notes API] Error checking for existing notes:",e)}console.log("[Video Notes API] Fetching video information");let n=await (0,l.$p)(a);if(!n||n.error)return console.error("[Video Notes API] Failed to get video info:",n?.error||"Unknown error"),{success:!1,error:"Video info error",message:n?.error||"Failed to retrieve video information"};console.log(`[Video Notes API] Video info retrieved: "${n.title}"`),console.log("[Video Notes API] Fetching video transcript");let c=await (0,l.C$)(a);if(!c||c.error)return console.error("[Video Notes API] Transcript error:",c?.error||"Unknown error"),{success:!1,error:"Transcript error",message:c?.error||"Failed to extract transcript from the video"};if(!c.transcript||0===c.transcript.trim().length)return console.error("[Video Notes API] Empty transcript"),{success:!1,error:"Empty transcript",message:"The video does not have any extractable content for notes"};console.log(`[Video Notes API] Transcript retrieved (${c.transcript.length} chars)`),console.log("[Video Notes API] Generating notes from transcript");let g=await (0,u.L)({transcript:c.transcript,videoTitle:n.title});if(!g.content)return console.error("[Video Notes API] AI note generation failed:",g.error),{success:!1,error:"Note generation failed",message:g.error||"Failed to generate notes from the transcript"};console.log(`[Video Notes API] Successfully generated notes (${g.content.length} chars)`);let p=`video_${Date.now()}`,h={id:p,user_id:s.id,video_url:t,video_id:a,title:i||n.title,thumbnail_url:n.thumbnailUrl,content:g.content,summary:g.summary,quiz:g.quiz,created_at:new Date().toISOString()};console.log(`[Video Notes API] Created note with ID: ${p}`),console.log("[Video Notes API] Note data structure:",Object.keys(h).join(", ")),console.log("[Video Notes API] Storing note in Supabase video_notes table");try{try{let{error:e}=await o.from("video_notes").select("count").limit(1);if(e)return console.error("[Video Notes API] Database connection check failed:",e),{success:!1,error:"Database connection error",message:"Could not connect to the database. Please try again later.",details:{code:e.code,message:e.message}}}catch(e){console.error("[Video Notes API] Database ping exception:",e)}let{data:e,error:t}=await o.from("video_notes").insert(h).select().single();if(t){if(console.error("[Video Notes API] Database storage error:",t),console.error("[Video Notes API] Database error details:",{code:t.code,message:t.message,details:t.details,hint:t.hint}),"23505"===t.code)return{success:!1,error:"Duplicate record",message:"Notes for this video already exist in the database",details:{code:t.code,message:t.message}};if(t.code?.startsWith("22")||t.code?.startsWith("23"))return{success:!1,error:"Invalid data format",message:"The note data could not be stored due to validation errors",details:{code:t.code,message:t.message}};if("42P01"===t.code)return{success:!1,error:"Schema error",message:"The video_notes table does not exist. Please run the database initialization.",details:{code:t.code,message:t.message}};return{success:!1,error:"Database error",message:"Failed to store the notes in the database",details:{code:t.code,message:t.message}}}console.log(`[Video Notes API] Successfully stored note in database with ID: ${e?.id||p}`),console.log("[Video Notes API] Incrementing usage counters");try{await (0,d.iS)(s.id,r,"video"),console.log("[Video Notes API] Usage tracking completed")}catch(e){console.error("[Video Notes API] Usage tracking failed (note still created):",e)}console.log("[Video Notes API] Refreshing saved notes count");try{await (0,d.u6)(s.id,r),console.log("[Video Notes API] Saved notes count refreshed")}catch(e){console.error("[Video Notes API] Saved notes count refresh failed (note still created):",e)}return{success:!0,data:e}}catch(e){return console.error("[Video Notes API] Unexpected database error:",e),{success:!1,error:"Database exception",message:e?.message||"An unexpected error occurred while storing notes",details:e}}});return n.NextResponse.json(v)}catch(e){return console.error("[Video Notes API] Critical error:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred on the server",details:e.message},{status:500})}}async function v(e){console.log("[Video Notes API] Request received: GET");try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let r=t.replace("Bearer ",""),o=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${r}`}}}),{data:{user:s},error:i}=await o.auth.getUser(r);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`);let{data:a,error:l}=await o.from("video_notes").select("*").eq("user_id",s.id).order("created_at",{ascending:!1});if(l)return console.error("[Video Notes API] Database fetch error:",l),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to fetch video notes from the database",details:{code:l.code,message:l.message}},{status:500});return console.log(`[Video Notes API] Successfully fetched ${a.length} video notes`),n.NextResponse.json({success:!0,data:a})}catch(e){return console.error("[Video Notes API] Error fetching video notes:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while fetching video notes",details:e.message},{status:500})}}async function b(e){console.log("[Video Notes API] Request received: DELETE");try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return console.error("[Video Notes API] Authentication missing"),n.NextResponse.json({success:!1,error:"Authentication required",message:"Valid Bearer token is required"},{status:401});let r=t.replace("Bearer ",""),o=(0,c.eI)(p,h,{global:{headers:{Authorization:`Bearer ${r}`}}}),{data:{user:s},error:i}=await o.auth.getUser(r);if(i||!s)return console.error("[Video Notes API] Authentication failed:",i?.message),n.NextResponse.json({success:!1,error:"Authentication failed",message:i?.message||"Invalid authentication token"},{status:401});console.log(`[Video Notes API] User authenticated: ${s.id}`);let a=e.nextUrl.searchParams.get("id");if(!a)return console.error("[Video Notes API] Note ID missing"),n.NextResponse.json({success:!1,error:"Missing note ID",message:"Note ID is required for deletion"},{status:400});console.log(`[Video Notes API] Deleting note with ID: ${a}`);let{data:l,error:u}=await o.from("video_notes").delete().eq("id",a).eq("user_id",s.id).select();if(u)return console.error("[Video Notes API] Database delete error:",u),n.NextResponse.json({success:!1,error:"Database error",message:"Failed to delete the note from the database",details:{code:u.code,message:u.message}},{status:500});if(!l||0===l.length)return console.error(`[Video Notes API] Note not found or access denied: ${a}`),n.NextResponse.json({success:!1,error:"Note not found",message:"The note was not found or you do not have permission to delete it"},{status:404});console.log(`[Video Notes API] Successfully deleted note: ${a}`);try{await (0,d.u6)(s.id,r),console.log("[Video Notes API] Saved notes count refreshed after deletion")}catch(e){console.error("[Video Notes API] Saved notes count refresh failed after deletion:",e)}return n.NextResponse.json({success:!0,message:"Note deleted successfully",data:l[0]})}catch(e){return console.error("[Video Notes API] Error deleting video note:",e),n.NextResponse.json({success:!1,error:"Server error",message:"An unexpected error occurred while deleting the note",details:e.message},{status:500})}}let I="force-dynamic",x=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/video-notes/route",pathname:"/api/video-notes",filename:"route",bundlePath:"app/api/video-notes/route"},resolvedPagePath:"/Users/janjedrach/Cursor/eduscribe/src/app/api/video-notes/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:N,staticGenerationAsyncStorage:A,serverHooks:y}=x,P="/api/video-notes/route";function V(){return(0,a.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:A})}},71007:(e,t,r)=>{r.d(t,{Bm:()=>i,XH:()=>a});var o=r(25559),s=r(73185);async function i(e,t=["en","pl","es","fr","de"]){try{let r=e;if(e.includes("youtube.com")||e.includes("youtu.be")){let t=(0,s.jx)(e);if(!t)return{transcript:"",error:"Invalid YouTube URL format"};r=t}if(!(0,s.cc)(r))return{transcript:"",error:"Invalid YouTube video ID"};console.log(`[YouTubeTranscript] Extracting transcript for video: ${r}`);let i=null;for(let e of t)try{console.log(`[YouTubeTranscript] Trying language: ${e}`);let t=await o.Z.getTranscript(r,{lang:e,country:"US"});if(t&&t.length>0){let r=t.map(e=>({text:e.text||"",start:e.offset||0,duration:e.duration||0})),o=r.map(e=>e.text.trim()).filter(e=>e.length>0).join(" ").replace(/\s+/g," ").trim();if(o.length>0)return console.log(`[YouTubeTranscript] Successfully extracted transcript in ${e} (${o.length} characters)`),{transcript:o,segments:r,language:e}}}catch(t){console.warn(`[YouTubeTranscript] Failed to get transcript in ${e}:`,t.message),i=t;continue}try{console.log("[YouTubeTranscript] Trying to get transcript without language specification...");let e=await o.Z.getTranscript(r);if(e&&e.length>0){let t=e.map(e=>({text:e.text||"",start:e.offset||0,duration:e.duration||0})),r=t.map(e=>e.text.trim()).filter(e=>e.length>0).join(" ").replace(/\s+/g," ").trim();if(r.length>0)return console.log(`[YouTubeTranscript] Successfully extracted transcript without language spec (${r.length} characters)`),{transcript:r,segments:t,language:"auto"}}}catch(e){console.warn("[YouTubeTranscript] Failed to get transcript without language spec:",e.message),i=e}return{transcript:"",error:function(e){if(!e)return"No transcript available for this video";let t=e.message?.toLowerCase()||"";return t.includes("transcript not available")?"No transcript available for this video":t.includes("video unavailable")?"Video is unavailable or private":t.includes("disabled")?"Subtitles have been disabled for this video":t.includes("not found")?"Video not found":t.includes("private")?"Video is private":t.includes("region")?"Video not available in this region":"No transcript available for this video"}(i)}}catch(e){return console.error("[YouTubeTranscript] Unexpected error:",e),{transcript:"",error:`Transcript extraction failed: ${e.message}`}}}async function a(e){try{console.log(`[YouTubeTranscript] Attempting fallback extraction for ${e}`);let t=await Promise.all([r.e(5074),r.e(1947)]).then(r.t.bind(r,71947,23)),o=await t.default.getInfo(`https://www.youtube.com/watch?v=${e}`),s=o.player_response?.captions?.playerCaptionsTracklistRenderer?.captionTracks;if(!s||0===s.length)return{transcript:"",error:"No captions available"};let i=s[0];if(i.baseUrl){let e=await fetch(i.baseUrl),t=await e.text(),r=function(e){try{let t=e.match(/<text[^>]*>(.*?)<\/text>/g);if(!t)return"";return t.map(e=>e.replace(/<text[^>]*>/,"").replace(/<\/text>/,"").replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&nbsp;/g," ").trim()).filter(e=>e.length>0).join(" ").replace(/\s+/g," ").trim()}catch(e){return console.error("[YouTubeTranscript] Error parsing caption XML:",e),""}}(t);if(r&&r.length>0)return console.log(`[YouTubeTranscript] Fallback extraction successful (${r.length} characters)`),{transcript:r,language:String(i.languageCode||"unknown")}}return{transcript:"",error:"Could not extract captions from video"}}catch(e){return console.error("[YouTubeTranscript] Fallback extraction failed:",e),{transcript:"",error:`Fallback extraction failed: ${e.message}`}}}},73185:(e,t,r)=>{r.d(t,{$p:()=>c,C$:()=>l,cc:()=>n,jx:()=>a});var o=r(61282),s=r(21764),i=r(71007);function a(e){if(!e)return null;let t=e.trim();t.includes("youtu.be/")&&(t=t.replace("youtu.be/","youtube.com/watch?v="));try{let e=new URL(t);if(e.hostname.includes("youtube.com")&&e.pathname.includes("/watch")){let t=e.searchParams.get("v");if(t)return t}if(e.hostname.includes("youtube")&&e.pathname.includes("/embed/")){let t=e.pathname.split("/");return t[t.indexOf("embed")+1]||null}if("youtu.be"===e.hostname)return e.pathname.substring(1)||null;if(e.hostname.includes("youtube")&&e.pathname.includes("/v/")){let t=e.pathname.split("/");return t[t.indexOf("v")+1]||null}}catch(e){console.error("URL parsing failed, trying regex fallback:",e)}for(let e of[/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,/^([a-zA-Z0-9_-]{11})$/]){let r=t.match(e);if(r&&r[1])return r[1]}return null}function n(e){return!!e&&/^[a-zA-Z0-9_-]{11}$/.test(e)}async function c(e){if(!e)return{videoId:"",title:"",thumbnailUrl:"",error:"No video ID provided"};try{let t="AIzaSyCvUahUwoVQyozpRphtVWE0ev0ha46wo0I";if(!t)return console.error("[YouTube Service] No YouTube API key configured"),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:"YouTube API key not configured - using fallback data"};let r=await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${e}&key=${t}`,{next:{revalidate:3600}});if(!r.ok){let t=await r.json();return console.error("[YouTube Service] YouTube API error:",t),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:`YouTube API error: ${t.error?.message||r.statusText}`}}let o=await r.json();if(!o.items||0===o.items.length)return console.error("[YouTube Service] Video not found:",e),{videoId:e,title:`Video Not Found (${e})`,thumbnailUrl:"",error:"Video not found"};let s=o.items[0].snippet;return{videoId:e,title:s.title,description:s.description,thumbnailUrl:s.thumbnails?.high?.url||s.thumbnails?.default?.url||"",channelTitle:s.channelTitle,publishedAt:s.publishedAt}}catch(t){return console.error("[YouTube Service] Error fetching video info:",t),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:`Error fetching video info: ${t.message}`}}}async function l(e){if(!e)return{transcript:"",error:"No video ID provided"};try{console.log(`[YouTube Service] Extracting transcript for video: ${e}`);let t=await (0,i.Bm)(e);if(t.error)return console.warn(`[YouTube Service] Transcript extraction failed: ${t.error}`),{transcript:"",error:t.error};if(!t.transcript||0===t.transcript.trim().length)return{transcript:"",error:"No transcript content available for this video"};return console.log(`[YouTube Service] Successfully extracted transcript (${t.transcript.length} characters)`),{transcript:t.transcript}}catch(e){return console.error("[YouTube Service] Error extracting transcript:",e),{transcript:"",error:`Error extracting transcript: ${e.message}`}}}(0,s.promisify)(o.exec)}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[9276,5972,3517,2749,4769,5605,5559,8285,1724],()=>r(45216));module.exports=o})();