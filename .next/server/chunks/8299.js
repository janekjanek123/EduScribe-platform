"use strict";exports.id=8299,exports.ids=[8299],exports.modules={48299:(e,t,l)=>{l.d(t,{getVideoSubtitles:()=>h});var o=l(92048),s=l.n(o),i=l(55315),r=l.n(i),n=l(23534),a=l(21764),u=l(84770),c=l(2365),b=l(73185);l(71947),l(35240);let d=(0,a.promisify)(s().readFile),g=((0,a.promisify)(s().writeFile),(0,a.promisify)(s().unlink)),m=(0,a.promisify)(s().exists);async function f(){try{try{return await (0,n.cF)("which yt-dlp",{shell:!0}),!0}catch{return await (0,n.cF)("yt-dlp --version",{shell:!0}),!0}}catch(e){return!1}}async function p(e,t=["pl","en"]){if(!(0,b.cc)(e))return console.error("[Subtitles] Invalid video ID:",e),null;if(await f())return w(e,t);throw console.error("[Subtitles] yt-dlp is not installed. Cannot download subtitles reliably."),Error("yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\n• macOS: brew install yt-dlp\n• Linux/macOS: pip install yt-dlp\n• Windows: pip install yt-dlp or choco install yt-dlp")}async function w(e,t=["pl","en"]){let l=r().join(process.cwd(),"temp");try{if(s().existsSync(l))try{let e=r().join(l,`test-${Date.now()}.txt`);s().writeFileSync(e,"test",{mode:420}),s().unlinkSync(e),console.log(`[Subtitles] Verified write access to temp directory: ${l}`)}catch(e){throw console.error(`[Subtitles] No write access to temp directory: ${l}`,e),Error(`Permission denied: Cannot write to temporary directory: ${e.message}`)}else try{s().mkdirSync(l,{recursive:!0,mode:493}),console.log(`[Subtitles] Created temporary directory: ${l}`)}catch(e){throw console.error(`[Subtitles] Failed to create temporary directory: ${l}`,e),Error(`Permission denied: Could not create temporary directory: ${e.message}`)}let o=(0,u.randomUUID)(),i=r().join(l,`${o}-%(id)s.%(ext)s`),a=t.join(",");console.log(`[Subtitles] Downloading subtitles for video ${e} in languages: ${a}`);try{console.log("[Subtitles] Checking available subtitle tracks...");let{stdout:t}=await (0,n.cF)(`yt-dlp --list-subs https://www.youtube.com/watch?v=${e}`,{shell:!0,timeout:2e4});console.log("[Subtitles] Available subtitle info:"),console.log(t);let l=!t.includes("has no subtitles"),o=!t.includes("has no automatic captions");console.log(`[Subtitles] Manual subtitles available: ${l}`),console.log(`[Subtitles] Auto-generated subtitles available: ${o}`)}catch(e){console.warn("[Subtitles] Error checking subtitle availability:",e)}try{let u=null,c=[".vtt",".srt"];try{console.log("[Subtitles] Trying to download regular subtitles first...");let b=`yt-dlp --verbose --write-sub --sub-lang ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running command: ${b}`);let{stdout:d,stderr:g}=await (0,n.cF)(b,{shell:!0,timeout:3e4});for(let t of(console.log("[Subtitles] yt-dlp stdout:",d),g&&console.warn("[Subtitles] yt-dlp stderr:",g),c)){let s=r().join(l,`${o}-${e}${t}`);if(await m(s)){u=s,console.log("[Subtitles] Successfully downloaded regular subtitles:",r().basename(s));break}}if(!u)for(let s of t){for(let t of c){for(let i of[r().join(l,`${o}-${e}.${s}${t}`),r().join(l,`${o}-${e}.${s}_*${t}`)]){let{stdout:e}=await (0,n.cF)(`ls ${i} 2>/dev/null || echo ''`,{shell:!0});if(e&&""!==e.trim()){let t=e.trim().split("\n");if(t.length>0&&""!==t[0]){u=t[0],console.log("[Subtitles] Found language-specific subtitle file:",r().basename(u));break}}}if(u)break}if(u)break}if(u){let e=await s().promises.stat(u);if(0!==e.size)return u;console.warn("[Subtitles] Downloaded subtitle file is empty, will try auto-generated subtitles"),u=null}console.log("[Subtitles] No regular subtitles found, trying auto-generated...")}catch(e){console.warn("[Subtitles] Error downloading regular subtitles, trying auto-generated:",e)}try{let b=`yt-dlp --verbose --write-auto-sub --sub-lang ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running command: ${b}`);let{stdout:d,stderr:g}=await (0,n.cF)(b,{shell:!0,timeout:3e4});for(let t of(console.log("[Subtitles] yt-dlp auto-sub stdout:",d),g&&console.warn("[Subtitles] yt-dlp auto-sub stderr:",g),c)){let i=r().join(l,`${o}-${e}${t}`);if(await m(i)){let e=await s().promises.stat(i);if(0===e.size){console.warn(`[Subtitles] Auto-generated subtitle file ${r().basename(i)} is empty`);continue}u=i,console.log("[Subtitles] Found auto-generated subtitles file:",r().basename(u));break}}if(!u)for(let i of t){for(let t of c){for(let a of[r().join(l,`${o}-${e}.${i}${t}`),r().join(l,`${o}-${e}.${i}_*${t}`)]){let{stdout:e}=await (0,n.cF)(`ls ${a} 2>/dev/null || echo ''`,{shell:!0});if(e&&""!==e.trim()){let t=e.trim().split("\n");if(t.length>0&&""!==t[0]){let e=await s().promises.stat(t[0]);if(0===e.size){console.warn(`[Subtitles] Auto-generated subtitle file ${r().basename(t[0])} is empty`);continue}u=t[0],console.log("[Subtitles] Found language-specific auto-generated subtitle file:",r().basename(u));break}}}if(u)break}if(u)break}}catch(e){console.error("[Subtitles] Error downloading auto-generated subtitles:",e)}if(!u)try{for(let a of(console.log("[Subtitles] Trying format-specific subtitle download as last resort..."),["--write-subs","--write-auto-subs","--sub-format vtt","--sub-format srt"])){for(let b of t){let t=`yt-dlp --verbose --sub-langs ${b} ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running last resort command: ${t}`);try{let{stdout:i,stderr:d}=await (0,n.cF)(t,{shell:!0,timeout:3e4});for(let t of(console.log(`[Subtitles] Last resort attempt for ${a} ${b} stdout:`,i),d&&console.warn("[Subtitles] Last resort attempt stderr:",d),c)){let i=r().join(l,`${o}-${e}${t}`);if(await m(i)){let e=await s().promises.stat(i);if(0===e.size){console.warn(`[Subtitles] Last resort subtitle file ${r().basename(i)} is empty`);continue}u=i,console.log("[Subtitles] Found subtitles with last resort method:",r().basename(u));break}let n=r().join(l,`${o}-${e}.${b}${t}`);if(await m(n)){let e=await s().promises.stat(n);if(0===e.size){console.warn(`[Subtitles] Last resort subtitle file ${r().basename(n)} is empty`);continue}u=n,console.log("[Subtitles] Found language-specific subtitles with last resort method:",r().basename(u));break}}if(u)break}catch(e){console.warn(`[Subtitles] Format option ${a} failed:`,e)}}if(u)break}}catch(e){console.error("[Subtitles] Last resort subtitle extraction failed:",e)}if(!u)return console.error("[Subtitles] No subtitle file was created by yt-dlp (neither regular nor auto-generated)"),null;return u}catch(e){return console.error("[Subtitles] Error downloading subtitles with yt-dlp:",e),null}}catch(e){return console.error("[Subtitles] Error downloading subtitles with yt-dlp:",e),null}}async function y(e){try{if(!e||!await m(e))return console.error("[Subtitles] Invalid subtitle file path:",e),null;let t=await d(e,"utf8"),l=r().extname(e).toLowerCase();console.log(`[Subtitles] Parsing subtitle file: ${r().basename(e)} (${t.length} bytes)`),console.log(`[Subtitles] Raw content (first 1000 chars):
${t.substring(0,1e3)}`);let o="",s=!1;try{if(".vtt"===l||".srt"===l){let e=c.qg(t);(s=(o=e.map(e=>e.text||"").filter(Boolean).join(" ")).length>0)?console.log(`[Subtitles] Successfully parsed ${e.length} captions with primary parser`):console.warn("[Subtitles] Primary parser returned empty text, will try fallback methods")}else{if(".xml"!==l)return console.error("[Subtitles] Unsupported subtitle format:",l),null;s=(o=(t.match(/<text[^>]*>(.*?)<\/text>/g)||[]).map(e=>e.replace(/<text[^>]*>(.*?)<\/text>/g,"$1").replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'")).join(" ")).length>0}}catch(e){console.warn("[Subtitles] Primary parsing failed:",e),console.warn("[Subtitles] Content sample:",t.substring(0,500))}if(!s){console.log("[Subtitles] Attempting fallback parsing methods");try{if(".vtt"===l||".srt"===l){console.log("[Subtitles] Trying manual line-by-line parsing");let e=t.split("\n"),l=[];for(let t=0;t<e.length;t++){let o=e[t].trim();!o||/^\d+$/.test(o)||o.includes("-->")||o.startsWith("WEBVTT")||o.startsWith("NOTE")||o.startsWith("STYLE")||l.push(o)}(s=(o=l.join(" ")).length>0)&&console.log(`[Subtitles] Successfully extracted ${l.length} lines with manual parsing`)}if(!s)throw console.error("[Subtitles] All parsing methods failed for:",e),Error("Failed to parse subtitle content with all available methods")}catch(e){return console.error("[Subtitles] Fallback parsing also failed:",e),null}}return o=o.replace(/<[^>]*>/g,"").replace(/\s+/g," ").replace(/\{.*?\}/g,"").trim(),console.log(`[Subtitles] Cleaned text (first 1000 chars):
${o.substring(0,1e3)}`),console.log(`[Subtitles] Final extracted text: ${o.length} characters`),o}catch(e){return console.error("[Subtitles] Error parsing subtitle file:",e),null}finally{try{await g(e),console.log("[Subtitles] Deleted temporary file:",e)}catch(e){console.warn("[Subtitles] Error deleting temporary file:",e)}}}async function h(e,t=["pl","en"]){try{if(!e||"string"!=typeof e)throw console.error("[Subtitles] Invalid videoId:",e),Error("Invalid YouTube video ID");if(!await f().catch(e=>(console.error("[Subtitles] Error checking yt-dlp availability:",e),!1))){let e="yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\n• macOS: brew install yt-dlp\n• Linux/macOS: pip install yt-dlp\n• Windows: pip install yt-dlp or choco install yt-dlp";throw console.error("[Subtitles] "+e),Error(e)}console.log(`[Subtitles] Starting subtitle extraction for video: ${e}`);let l=Date.now(),o=p(e,t),i=new Promise((e,t)=>{setTimeout(()=>t(Error("Subtitle download timeout after 30 seconds")),3e4)}),r=await Promise.race([o,i]);if(!r){let t=`No subtitles available for video ${e}. Either the video doesn't have subtitles, or they couldn't be downloaded.`;return console.error("[Subtitles] "+t),null}if(!s().existsSync(r))throw console.error(`[Subtitles] Subtitle file does not exist: ${r}`),Error(`Subtitle file does not exist at ${r}`);let n=y(r),a=new Promise((e,t)=>{setTimeout(()=>t(Error("Subtitle parsing timeout after 10 seconds")),1e4)}),u=await Promise.race([n,a]);if(!u){let t=`Failed to parse subtitle file for video ${e}. The subtitle format may be unsupported or corrupted.`;return console.error("[Subtitles] "+t),null}let c=Date.now()-l;return console.log(`[Subtitles] Successfully extracted subtitles (${u.length} chars) for video: ${e} in ${c}ms`),u.length>500&&console.log("[Subtitles] Text sample:",u.substring(0,500)+"..."),u}catch(l){if(l?.message?.includes("yt-dlp is required"))throw console.error("[Subtitles] yt-dlp requirement error:",l.message),l;if(l?.message?.includes("timeout"))throw console.error("[Subtitles] Operation timed out:",l.message),Error(`Subtitle extraction timed out: ${l.message}`);if(l?.message?.includes("permission denied")||l?.message?.includes("EACCES")||l?.message?.includes("Permission denied"))throw console.error("[Subtitles] Permission error:",l.message),Error(`Permission error during subtitle extraction: ${l.message}`);let t=`Error extracting subtitles for video ${e}: ${l?.message||"Unknown error"}`;return l?.message?.includes("unavailable video")?t+="\nThe video might be private, age-restricted, or requires login.":l?.message?.includes("permission")?t+="\nCheck file system permissions in the temporary directory.":l?.message?.includes("network")&&(t+="\nCheck your internet connection and try again."),console.error("[Subtitles] "+t),null}}}};