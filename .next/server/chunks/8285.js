exports.id=8285,exports.ids=[8285],exports.modules={58359:()=>{},93739:()=>{},58026:(e,t,r)=>{"use strict";r.d(t,{PH:()=>i,iS:()=>a,qk:()=>u,u6:()=>c});var o=r(23517);let n="https://xhljckmlzdshxibnqsbj.supabase.co",s="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhobGpja21semRzaHhpYm5xc2JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDIwNzIsImV4cCI6MjA2MzQxODA3Mn0.UuU3QBxwY3-DsSpXB-UiKarjgZWiFAFIzFbgUqacmIA";async function i(e,t,r="text"){try{let r;let i=(0,o.eI)(n,s,{global:{headers:{Authorization:`Bearer ${t}`}}});console.log("[Subscription] Checking usage limits for user:",e);let{data:a,error:c}=await i.from("user_subscriptions").select(`
        plan_id,
        billing_cycle,
        status,
        current_period_end,
        subscription_plans (
          name,
          display_name,
          features,
          limits,
          price_monthly,
          price_yearly
        )
      `).eq("user_id",e).eq("status","active").single(),u=new Date().toISOString().slice(0,7),{data:l,error:_}=await i.from("user_usage").select("*").eq("user_id",e).eq("month_year",u).single(),d={notes_per_month:2,max_saved_notes:3,max_text_length:5e3},p=l||{notes_generated:0,video_notes_count:0,file_notes_count:0,text_notes_count:0,total_saved_notes:0,month_year:u};if(!l){console.log("[Subscription] Creating usage record for current month:",u);let{error:t}=await i.from("user_usage").insert({user_id:e,month_year:u,notes_generated:0,video_notes_count:0,file_notes_count:0,text_notes_count:0,total_saved_notes:0,updated_at:new Date().toISOString()});t&&console.error("[Subscription] Warning: Could not create usage record:",t)}if(!a||c){console.log("[Subscription] No active subscription found, attempting to create free subscription"),c&&console.error("[Subscription] Subscription query error:",c);let{error:t}=await i.from("user_subscriptions").insert({user_id:e,plan_id:"free",billing_cycle:"monthly",status:"active",current_period_start:new Date().toISOString(),current_period_end:new Date(Date.now()+2592e6).toISOString(),updated_at:new Date().toISOString()}).select();t?console.error("[Subscription] Could not create free subscription:",t):console.log("[Subscription] Created free subscription for user");let r=p.notes_generated<d.notes_per_month,o=p.total_saved_notes<d.max_saved_notes;return{canGenerate:r,canSave:o,reason:r?o?void 0:`Storage limit reached (${d.max_saved_notes} saved notes maximum)`:`Monthly limit reached (${d.notes_per_month} notes per month)`,usage:p,limits:d}}let g=a.subscription_plans;if(!g){console.error("[Subscription] Plan data not found for subscription:",a);let e=p.notes_generated<d.notes_per_month,t=p.total_saved_notes<d.max_saved_notes;return{canGenerate:e,canSave:t,reason:"Plan data not found - using free plan limits",usage:p,limits:d}}console.log("[Subscription] Found subscription:",{planId:a.plan_id,planLimits:g.limits,currentUsage:p});let m=g.limits.notes_per_month,S=-1===m||p.notes_generated<m,h=p.total_saved_notes<g.limits.max_saved_notes;return S||-1===m?h||(r=`Storage limit reached (${g.limits.max_saved_notes} saved notes maximum)`):r=`Monthly limit reached (${m} notes per month)`,{canGenerate:S,canSave:h,reason:r,usage:p,limits:g.limits}}catch(e){return console.error("[Subscription] Error checking usage limits:",e),{canGenerate:!1,canSave:!1,reason:"Error checking subscription limits. Please try again.",usage:{notes_generated:999,video_notes_count:0,file_notes_count:0,text_notes_count:0,total_saved_notes:999,month_year:new Date().toISOString().slice(0,7)},limits:{notes_per_month:2,max_saved_notes:3,max_text_length:5e3}}}}async function a(e,t,r="text"){try{let i=(0,o.eI)(n,s,{global:{headers:{Authorization:`Bearer ${t}`}}}),a=new Date().toISOString().slice(0,7);console.log("[Subscription] Incrementing usage for user:",e,"type:",r);let{data:c,error:u}=await i.from("user_usage").select("*").eq("user_id",e).eq("month_year",a).single();if(u&&"PGRST116"!==u.code)return console.error("[Subscription] Error fetching current usage:",u),!1;let l={notes_generated:(c?.notes_generated||0)+1,updated_at:new Date().toISOString()};if("video"===r?l.video_notes_count=(c?.video_notes_count||0)+1:"file"===r?l.file_notes_count=(c?.file_notes_count||0)+1:"text"===r&&(l.text_notes_count=(c?.text_notes_count||0)+1),c){let{error:t}=await i.from("user_usage").update(l).eq("user_id",e).eq("month_year",a);if(t)return console.error("[Subscription] Error updating usage:",t),!1}else{let t={user_id:e,month_year:a,notes_generated:1,video_notes_count:"video"===r?1:0,file_notes_count:"file"===r?1:0,text_notes_count:"text"===r?1:0,total_saved_notes:0,created_at:new Date().toISOString(),updated_at:new Date().toISOString()},{error:o}=await i.from("user_usage").insert(t);if(o)return console.error("[Subscription] Error creating usage record:",o),!1}return console.log("[Subscription] Successfully incremented usage"),!0}catch(e){return console.error("[Subscription] Error incrementing usage:",e),!1}}async function c(e,t){try{let r=(0,o.eI)(n,s,{global:{headers:{Authorization:`Bearer ${t}`}}});console.log("[Subscription] Refreshing saved notes count for user:",e);let[i,a,c,u]=await Promise.all([r.from("video_notes").select("id",{count:"exact",head:!0}).eq("user_id",e),r.from("file_notes").select("id",{count:"exact",head:!0}).eq("user_id",e),r.from("text_notes").select("id",{count:"exact",head:!0}).eq("user_id",e),r.from("video_upload_notes").select("id",{count:"exact",head:!0}).eq("user_id",e).then(e=>e,e=>(console.warn("[Subscription] video_upload_notes table might not exist:",e.message),{count:0}))]),l=i.count||0,_=a.count||0,d=c.count||0,p=u.count||0,g=l+_+d+p;console.log("[Subscription] Note counts:",{video:l,file:_,text:d,video_upload:p,total:g});let m=new Date().toISOString().slice(0,7),{error:S}=await r.from("user_usage").upsert({user_id:e,month_year:m,total_saved_notes:g,updated_at:new Date().toISOString()},{onConflict:"user_id,month_year"});if(S)return console.error("[Subscription] Error updating saved notes count:",S),!1;return console.log("[Subscription] Successfully refreshed saved notes count to:",g),!0}catch(e){return console.error("[Subscription] Error refreshing saved notes count:",e),!1}}async function u(e,t,r,i,a){let c=(0,o.eI)(n,s,{global:{headers:{Authorization:`Bearer ${t}`}}});try{let t=new Date,o=new Date;"yearly"===i?o.setFullYear(o.getFullYear()+1):o.setMonth(o.getMonth()+1);let n={user_id:e,plan_id:r,billing_cycle:i,status:"active",current_period_start:t.toISOString(),current_period_end:o.toISOString(),cancel_at_period_end:!1,stripe_subscription_id:a?.stripeSubscriptionId||null,stripe_customer_id:a?.stripeCustomerId||null,updated_at:new Date().toISOString()},{data:s,error:u}=await c.from("user_subscriptions").upsert(n,{onConflict:"user_id"}).select(`
        id,
        plan_id,
        billing_cycle,
        status,
        current_period_end,
        subscription_plans (
          name,
          display_name,
          features,
          limits,
          price_monthly,
          price_yearly
        )
      `).single();if(u)throw console.error("[Subscription] Error assigning subscription:",u),Error("Failed to assign subscription");if(!s||!s.subscription_plans)throw Error("Failed to retrieve subscription details");let l=new Date().toISOString().slice(0,7),{error:_}=await c.from("user_usage").upsert({user_id:e,month_year:l,notes_generated:0,video_notes_count:0,file_notes_count:0,text_notes_count:0,total_saved_notes:0,updated_at:new Date().toISOString()},{onConflict:"user_id,month_year",ignoreDuplicates:!0});_&&console.error("[Subscription] Warning: Failed to initialize usage tracking:",_);let d=s.subscription_plans;return{subscription_id:s.id,plan_id:s.plan_id,plan_name:d.name,plan_display_name:d.display_name,billing_cycle:s.billing_cycle,status:s.status,current_period_end:s.current_period_end,features:d.features,limits:d.limits,price_monthly:d.price_monthly,price_yearly:d.price_yearly}}catch(e){throw console.error("[Subscription] Error in assignUserSubscription:",e),e}}}};