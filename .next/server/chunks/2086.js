"use strict";exports.id=2086,exports.ids=[2086],exports.modules={48299:(e,t,r)=>{r.d(t,{ez:()=>S,getVideoSubtitles:()=>w});var o=r(92048),l=r.n(o),i=r(55315),s=r.n(i),n=r(23534),a=r(21764),u=r(84770),c=r(2365),d=r(73185);r(71947),r(35240);let b=(0,a.promisify)(l().readFile),m=((0,a.promisify)(l().writeFile),(0,a.promisify)(l().unlink)),f=(0,a.promisify)(l().exists);async function p(){try{try{return await (0,n.cF)("which yt-dlp",{shell:!0}),!0}catch{return await (0,n.cF)("yt-dlp --version",{shell:!0}),!0}}catch(e){return!1}}async function g(e,t=["pl","en"]){if(!(0,d.cc)(e))return console.error("[Subtitles] Invalid video ID:",e),null;if(await p())return h(e,t);throw console.error("[Subtitles] yt-dlp is not installed. Cannot download subtitles reliably."),Error("yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\n• macOS: brew install yt-dlp\n• Linux/macOS: pip install yt-dlp\n• Windows: pip install yt-dlp or choco install yt-dlp")}async function h(e,t=["pl","en"]){let r=s().join(process.cwd(),"temp");try{if(l().existsSync(r))try{let e=s().join(r,`test-${Date.now()}.txt`);l().writeFileSync(e,"test",{mode:420}),l().unlinkSync(e),console.log(`[Subtitles] Verified write access to temp directory: ${r}`)}catch(e){throw console.error(`[Subtitles] No write access to temp directory: ${r}`,e),Error(`Permission denied: Cannot write to temporary directory: ${e.message}`)}else try{l().mkdirSync(r,{recursive:!0,mode:493}),console.log(`[Subtitles] Created temporary directory: ${r}`)}catch(e){throw console.error(`[Subtitles] Failed to create temporary directory: ${r}`,e),Error(`Permission denied: Could not create temporary directory: ${e.message}`)}let o=(0,u.randomUUID)(),i=s().join(r,`${o}-%(id)s.%(ext)s`),a=t.join(",");console.log(`[Subtitles] Downloading subtitles for video ${e} in languages: ${a}`);try{console.log("[Subtitles] Checking available subtitle tracks...");let{stdout:t}=await (0,n.cF)(`yt-dlp --list-subs https://www.youtube.com/watch?v=${e}`,{shell:!0,timeout:2e4});console.log("[Subtitles] Available subtitle info:"),console.log(t);let r=!t.includes("has no subtitles"),o=!t.includes("has no automatic captions");console.log(`[Subtitles] Manual subtitles available: ${r}`),console.log(`[Subtitles] Auto-generated subtitles available: ${o}`)}catch(e){console.warn("[Subtitles] Error checking subtitle availability:",e)}try{let u=null,c=[".vtt",".srt"];try{console.log("[Subtitles] Trying to download regular subtitles first...");let d=`yt-dlp --verbose --write-sub --sub-lang ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running command: ${d}`);let{stdout:b,stderr:m}=await (0,n.cF)(d,{shell:!0,timeout:3e4});for(let t of(console.log("[Subtitles] yt-dlp stdout:",b),m&&console.warn("[Subtitles] yt-dlp stderr:",m),c)){let l=s().join(r,`${o}-${e}${t}`);if(await f(l)){u=l,console.log("[Subtitles] Successfully downloaded regular subtitles:",s().basename(l));break}}if(!u)for(let l of t){for(let t of c){for(let i of[s().join(r,`${o}-${e}.${l}${t}`),s().join(r,`${o}-${e}.${l}_*${t}`)]){let{stdout:e}=await (0,n.cF)(`ls ${i} 2>/dev/null || echo ''`,{shell:!0});if(e&&""!==e.trim()){let t=e.trim().split("\n");if(t.length>0&&""!==t[0]){u=t[0],console.log("[Subtitles] Found language-specific subtitle file:",s().basename(u));break}}}if(u)break}if(u)break}if(u){let e=await l().promises.stat(u);if(0!==e.size)return u;console.warn("[Subtitles] Downloaded subtitle file is empty, will try auto-generated subtitles"),u=null}console.log("[Subtitles] No regular subtitles found, trying auto-generated...")}catch(e){console.warn("[Subtitles] Error downloading regular subtitles, trying auto-generated:",e)}try{let d=`yt-dlp --verbose --write-auto-sub --sub-lang ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running command: ${d}`);let{stdout:b,stderr:m}=await (0,n.cF)(d,{shell:!0,timeout:3e4});for(let t of(console.log("[Subtitles] yt-dlp auto-sub stdout:",b),m&&console.warn("[Subtitles] yt-dlp auto-sub stderr:",m),c)){let i=s().join(r,`${o}-${e}${t}`);if(await f(i)){let e=await l().promises.stat(i);if(0===e.size){console.warn(`[Subtitles] Auto-generated subtitle file ${s().basename(i)} is empty`);continue}u=i,console.log("[Subtitles] Found auto-generated subtitles file:",s().basename(u));break}}if(!u)for(let i of t){for(let t of c){for(let a of[s().join(r,`${o}-${e}.${i}${t}`),s().join(r,`${o}-${e}.${i}_*${t}`)]){let{stdout:e}=await (0,n.cF)(`ls ${a} 2>/dev/null || echo ''`,{shell:!0});if(e&&""!==e.trim()){let t=e.trim().split("\n");if(t.length>0&&""!==t[0]){let e=await l().promises.stat(t[0]);if(0===e.size){console.warn(`[Subtitles] Auto-generated subtitle file ${s().basename(t[0])} is empty`);continue}u=t[0],console.log("[Subtitles] Found language-specific auto-generated subtitle file:",s().basename(u));break}}}if(u)break}if(u)break}}catch(e){console.error("[Subtitles] Error downloading auto-generated subtitles:",e)}if(!u)try{for(let a of(console.log("[Subtitles] Trying format-specific subtitle download as last resort..."),["--write-subs","--write-auto-subs","--sub-format vtt","--sub-format srt"])){for(let d of t){let t=`yt-dlp --verbose --sub-langs ${d} ${a} --skip-download --output "${i}" https://www.youtube.com/watch?v=${e}`;console.log(`[Subtitles] Running last resort command: ${t}`);try{let{stdout:i,stderr:b}=await (0,n.cF)(t,{shell:!0,timeout:3e4});for(let t of(console.log(`[Subtitles] Last resort attempt for ${a} ${d} stdout:`,i),b&&console.warn("[Subtitles] Last resort attempt stderr:",b),c)){let i=s().join(r,`${o}-${e}${t}`);if(await f(i)){let e=await l().promises.stat(i);if(0===e.size){console.warn(`[Subtitles] Last resort subtitle file ${s().basename(i)} is empty`);continue}u=i,console.log("[Subtitles] Found subtitles with last resort method:",s().basename(u));break}let n=s().join(r,`${o}-${e}.${d}${t}`);if(await f(n)){let e=await l().promises.stat(n);if(0===e.size){console.warn(`[Subtitles] Last resort subtitle file ${s().basename(n)} is empty`);continue}u=n,console.log("[Subtitles] Found language-specific subtitles with last resort method:",s().basename(u));break}}if(u)break}catch(e){console.warn(`[Subtitles] Format option ${a} failed:`,e)}}if(u)break}}catch(e){console.error("[Subtitles] Last resort subtitle extraction failed:",e)}if(!u)return console.error("[Subtitles] No subtitle file was created by yt-dlp (neither regular nor auto-generated)"),null;return u}catch(e){return console.error("[Subtitles] Error downloading subtitles with yt-dlp:",e),null}}catch(e){return console.error("[Subtitles] Error downloading subtitles with yt-dlp:",e),null}}async function y(e){try{if(!e||!await f(e))return console.error("[Subtitles] Invalid subtitle file path:",e),null;let t=await b(e,"utf8"),r=s().extname(e).toLowerCase();console.log(`[Subtitles] Parsing subtitle file: ${s().basename(e)} (${t.length} bytes)`),console.log(`[Subtitles] Raw content (first 1000 chars):
${t.substring(0,1e3)}`);let o="",l=!1;try{if(".vtt"===r||".srt"===r){let e=c.qg(t);(l=(o=e.map(e=>e.text||"").filter(Boolean).join(" ")).length>0)?console.log(`[Subtitles] Successfully parsed ${e.length} captions with primary parser`):console.warn("[Subtitles] Primary parser returned empty text, will try fallback methods")}else{if(".xml"!==r)return console.error("[Subtitles] Unsupported subtitle format:",r),null;l=(o=(t.match(/<text[^>]*>(.*?)<\/text>/g)||[]).map(e=>e.replace(/<text[^>]*>(.*?)<\/text>/g,"$1").replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#39;/g,"'")).join(" ")).length>0}}catch(e){console.warn("[Subtitles] Primary parsing failed:",e),console.warn("[Subtitles] Content sample:",t.substring(0,500))}if(!l){console.log("[Subtitles] Attempting fallback parsing methods");try{if(".vtt"===r||".srt"===r){console.log("[Subtitles] Trying manual line-by-line parsing");let e=t.split("\n"),r=[];for(let t=0;t<e.length;t++){let o=e[t].trim();!o||/^\d+$/.test(o)||o.includes("-->")||o.startsWith("WEBVTT")||o.startsWith("NOTE")||o.startsWith("STYLE")||r.push(o)}(l=(o=r.join(" ")).length>0)&&console.log(`[Subtitles] Successfully extracted ${r.length} lines with manual parsing`)}if(!l)throw console.error("[Subtitles] All parsing methods failed for:",e),Error("Failed to parse subtitle content with all available methods")}catch(e){return console.error("[Subtitles] Fallback parsing also failed:",e),null}}return o=o.replace(/<[^>]*>/g,"").replace(/\s+/g," ").replace(/\{.*?\}/g,"").trim(),console.log(`[Subtitles] Cleaned text (first 1000 chars):
${o.substring(0,1e3)}`),console.log(`[Subtitles] Final extracted text: ${o.length} characters`),o}catch(e){return console.error("[Subtitles] Error parsing subtitle file:",e),null}finally{try{await m(e),console.log("[Subtitles] Deleted temporary file:",e)}catch(e){console.warn("[Subtitles] Error deleting temporary file:",e)}}}async function w(e,t=["pl","en"]){try{if(!e||"string"!=typeof e)throw console.error("[Subtitles] Invalid videoId:",e),Error("Invalid YouTube video ID");if(!await p().catch(e=>(console.error("[Subtitles] Error checking yt-dlp availability:",e),!1))){let e="yt-dlp is required for reliable subtitle extraction. Please install yt-dlp on your system:\n• macOS: brew install yt-dlp\n• Linux/macOS: pip install yt-dlp\n• Windows: pip install yt-dlp or choco install yt-dlp";throw console.error("[Subtitles] "+e),Error(e)}console.log(`[Subtitles] Starting subtitle extraction for video: ${e}`);let r=Date.now(),o=g(e,t),i=new Promise((e,t)=>{setTimeout(()=>t(Error("Subtitle download timeout after 30 seconds")),3e4)}),s=await Promise.race([o,i]);if(!s){let t=`No subtitles available for video ${e}. Either the video doesn't have subtitles, or they couldn't be downloaded.`;return console.error("[Subtitles] "+t),null}if(!l().existsSync(s))throw console.error(`[Subtitles] Subtitle file does not exist: ${s}`),Error(`Subtitle file does not exist at ${s}`);let n=y(s),a=new Promise((e,t)=>{setTimeout(()=>t(Error("Subtitle parsing timeout after 10 seconds")),1e4)}),u=await Promise.race([n,a]);if(!u){let t=`Failed to parse subtitle file for video ${e}. The subtitle format may be unsupported or corrupted.`;return console.error("[Subtitles] "+t),null}let c=Date.now()-r;return console.log(`[Subtitles] Successfully extracted subtitles (${u.length} chars) for video: ${e} in ${c}ms`),u.length>500&&console.log("[Subtitles] Text sample:",u.substring(0,500)+"..."),u}catch(r){if(r?.message?.includes("yt-dlp is required"))throw console.error("[Subtitles] yt-dlp requirement error:",r.message),r;if(r?.message?.includes("timeout"))throw console.error("[Subtitles] Operation timed out:",r.message),Error(`Subtitle extraction timed out: ${r.message}`);if(r?.message?.includes("permission denied")||r?.message?.includes("EACCES")||r?.message?.includes("Permission denied"))throw console.error("[Subtitles] Permission error:",r.message),Error(`Permission error during subtitle extraction: ${r.message}`);let t=`Error extracting subtitles for video ${e}: ${r?.message||"Unknown error"}`;return r?.message?.includes("unavailable video")?t+="\nThe video might be private, age-restricted, or requires login.":r?.message?.includes("permission")?t+="\nCheck file system permissions in the temporary directory.":r?.message?.includes("network")&&(t+="\nCheck your internet connection and try again."),console.error("[Subtitles] "+t),null}}async function S(e){try{let t=await w(e);if(!t)throw Error("No subtitles available for this video");return t}catch(t){throw console.error(`[Subtitles] Error extracting subtitles for video ${e}:`,t),t}}},73185:(e,t,r)=>{r.d(t,{$p:()=>a,C$:()=>u,cc:()=>n,jx:()=>s});var o=r(61282),l=r(21764),i=r(48299);function s(e){if(!e)return null;let t=e.trim();t.includes("youtu.be/")&&(t=t.replace("youtu.be/","youtube.com/watch?v="));try{let e=new URL(t);if(e.hostname.includes("youtube.com")&&e.pathname.includes("/watch")){let t=e.searchParams.get("v");if(t)return t}if(e.hostname.includes("youtube")&&e.pathname.includes("/embed/")){let t=e.pathname.split("/");return t[t.indexOf("embed")+1]||null}if("youtu.be"===e.hostname)return e.pathname.substring(1)||null;if(e.hostname.includes("youtube")&&e.pathname.includes("/v/")){let t=e.pathname.split("/");return t[t.indexOf("v")+1]||null}}catch(e){console.error("URL parsing failed, trying regex fallback:",e)}for(let e of[/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,/^([a-zA-Z0-9_-]{11})$/]){let r=t.match(e);if(r&&r[1])return r[1]}return null}function n(e){return!!e&&/^[a-zA-Z0-9_-]{11}$/.test(e)}async function a(e){if(!e)return{videoId:"",title:"",thumbnailUrl:"",error:"No video ID provided"};try{let t="AIzaSyCvUahUwoVQyozpRphtVWE0ev0ha46wo0I";if(!t)return console.error("[YouTube Service] No YouTube API key configured"),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:"YouTube API key not configured - using fallback data"};let r=await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${e}&key=${t}`,{next:{revalidate:3600}});if(!r.ok){let t=await r.json();return console.error("[YouTube Service] YouTube API error:",t),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:`YouTube API error: ${t.error?.message||r.statusText}`}}let o=await r.json();if(!o.items||0===o.items.length)return console.error("[YouTube Service] Video not found:",e),{videoId:e,title:`Video Not Found (${e})`,thumbnailUrl:"",error:"Video not found"};let l=o.items[0].snippet;return{videoId:e,title:l.title,description:l.description,thumbnailUrl:l.thumbnails?.high?.url||l.thumbnails?.default?.url||"",channelTitle:l.channelTitle,publishedAt:l.publishedAt}}catch(t){return console.error("[YouTube Service] Error fetching video info:",t),{videoId:e,title:`YouTube Video (${e})`,thumbnailUrl:`https://img.youtube.com/vi/${e}/hqdefault.jpg`,error:`Error fetching video info: ${t.message}`}}}async function u(e){if(!e)return{transcript:"",error:"No video ID provided"};try{let t=await (0,i.ez)(e);if(!t||0===t.trim().length)return{transcript:"",error:"No subtitles available for this video"};return{transcript:t}}catch(e){if(console.error("[YouTube Service] Error extracting transcript:",e),e.message?.includes("yt-dlp is required"))return{transcript:"",error:"yt-dlp is required but not installed"};if(e.message?.includes("subtitles are disabled"))return{transcript:"",error:"This video has disabled subtitles"};if(e.message?.includes("not available"))return{transcript:"",error:"No subtitles available for this video"};return{transcript:"",error:`Error extracting transcript: ${e.message}`}}}(0,l.promisify)(o.exec)}};