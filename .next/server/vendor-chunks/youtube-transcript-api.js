"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/youtube-transcript-api";
exports.ids = ["vendor-chunks/youtube-transcript-api"];
exports.modules = {

/***/ "(rsc)/./node_modules/youtube-transcript-api/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/youtube-transcript-api/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TranscriptAPI)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\r\n\r\nclass TranscriptAPI {\r\n  /**\r\n   * Retrieves the transcript of a particular video.\r\n   * @param {string} id - The YouTube video ID\r\n   * @param {string} [langCode] - ISO 639-1 language code\r\n   * @param {object} [config] - Request configurations for the Axios HTTP client.\r\n   */\r\n  static async getTranscript(id, langCode, config = {}) {\r\n    const url = new URL('https://www.youtube.com/watch');\r\n    url.searchParams.set('v', id);\r\n    try {\r\n      const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('https://tactiq-apps-prod.tactiq.io/transcript', {\r\n          langCode: langCode || 'en',\r\n          videoUrl: url\r\n        }, config);\r\n\r\n      return response.data.captions.map(({ dur, ...rest }) => ({\r\n        ...rest,\r\n        duration: dur\r\n      }));\r\n    } catch (e) {\r\n      if (e.status == 406) throw new Error('invalid video ID');\r\n      else if (e.status == 503) throw new Error('video unavailable or captions disabled');\r\n      else throw e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if a video with the specified ID exists on YouTube.\r\n   * @param {string} id - The YouTube video ID\r\n   * @param {object} [config] - Request configurations for the Axios HTTP client.\r\n   */\r\n  static async validateID(id, config = {}) {\r\n    const url = new URL('https://video.google.com/timedtext');\r\n    url.searchParams.set('type', 'track');\r\n    url.searchParams.set('v', id);\r\n    url.searchParams.set('id', 0);\r\n    url.searchParams.set('lang', 'en');\r\n    \r\n    try {\r\n      await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, config);\r\n      return !0;\r\n    } catch (_) {\r\n      return !1;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveW91dHViZS10cmFuc2NyaXB0LWFwaS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkNBQUs7QUFDbEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDJDQUEyQyxjQUFjO0FBQ3pEO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2Q0FBSztBQUNqQjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL3lvdXR1YmUtdHJhbnNjcmlwdC1hcGkvc3JjL2luZGV4LmpzPzQxZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuY2xhc3MgVHJhbnNjcmlwdEFQSSB7XHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIHRoZSB0cmFuc2NyaXB0IG9mIGEgcGFydGljdWxhciB2aWRlby5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgWW91VHViZSB2aWRlbyBJRFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ0NvZGVdIC0gSVNPIDYzOS0xIGxhbmd1YWdlIGNvZGVcclxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NvbmZpZ10gLSBSZXF1ZXN0IGNvbmZpZ3VyYXRpb25zIGZvciB0aGUgQXhpb3MgSFRUUCBjbGllbnQuXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGdldFRyYW5zY3JpcHQoaWQsIGxhbmdDb2RlLCBjb25maWcgPSB7fSkge1xyXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCgnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2gnKTtcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd2JywgaWQpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KCdodHRwczovL3RhY3RpcS1hcHBzLXByb2QudGFjdGlxLmlvL3RyYW5zY3JpcHQnLCB7XHJcbiAgICAgICAgICBsYW5nQ29kZTogbGFuZ0NvZGUgfHwgJ2VuJyxcclxuICAgICAgICAgIHZpZGVvVXJsOiB1cmxcclxuICAgICAgICB9LCBjb25maWcpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuY2FwdGlvbnMubWFwKCh7IGR1ciwgLi4ucmVzdCB9KSA9PiAoe1xyXG4gICAgICAgIC4uLnJlc3QsXHJcbiAgICAgICAgZHVyYXRpb246IGR1clxyXG4gICAgICB9KSk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlLnN0YXR1cyA9PSA0MDYpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB2aWRlbyBJRCcpO1xyXG4gICAgICBlbHNlIGlmIChlLnN0YXR1cyA9PSA1MDMpIHRocm93IG5ldyBFcnJvcigndmlkZW8gdW5hdmFpbGFibGUgb3IgY2FwdGlvbnMgZGlzYWJsZWQnKTtcclxuICAgICAgZWxzZSB0aHJvdyBlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIGEgdmlkZW8gd2l0aCB0aGUgc3BlY2lmaWVkIElEIGV4aXN0cyBvbiBZb3VUdWJlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBZb3VUdWJlIHZpZGVvIElEXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IFtjb25maWddIC0gUmVxdWVzdCBjb25maWd1cmF0aW9ucyBmb3IgdGhlIEF4aW9zIEhUVFAgY2xpZW50LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyB2YWxpZGF0ZUlEKGlkLCBjb25maWcgPSB7fSkge1xyXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCgnaHR0cHM6Ly92aWRlby5nb29nbGUuY29tL3RpbWVkdGV4dCcpO1xyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3R5cGUnLCAndHJhY2snKTtcclxuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd2JywgaWQpO1xyXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2lkJywgMCk7XHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnbGFuZycsICdlbicpO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBheGlvcy5nZXQodXJsLCBjb25maWcpO1xyXG4gICAgICByZXR1cm4gITA7XHJcbiAgICB9IGNhdGNoIChfKSB7XHJcbiAgICAgIHJldHVybiAhMTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFRyYW5zY3JpcHRBUEkgYXMgZGVmYXVsdCB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/youtube-transcript-api/src/index.js\n");

/***/ })

};
;