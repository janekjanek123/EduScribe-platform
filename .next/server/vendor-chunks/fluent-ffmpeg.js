/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fluent-ffmpeg";
exports.ids = ["vendor-chunks/fluent-ffmpeg"];
exports.modules = {

/***/ "(rsc)/./node_modules/fluent-ffmpeg/index.js":
/*!*********************************************!*\
  !*** ./node_modules/fluent-ffmpeg/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/fluent-ffmpeg */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwSEFBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZHVzY3JpYmUvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9pbmRleC5qcz8yZWUzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvZmx1ZW50LWZmbXBlZycpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/capabilities.js":
/*!********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/capabilities.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/lib/async.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n/*\n *! Capability helpers\n */\n\nvar avCodecRegexp = /^\\s*([D ])([E ])([VAS])([S ])([D ])([T ]) ([^ ]+) +(.*)$/;\nvar ffCodecRegexp = /^\\s*([D\\.])([E\\.])([VAS])([I\\.])([L\\.])([S\\.]) ([^ ]+) +(.*)$/;\nvar ffEncodersRegexp = /\\(encoders:([^\\)]+)\\)/;\nvar ffDecodersRegexp = /\\(decoders:([^\\)]+)\\)/;\nvar encodersRegexp = /^\\s*([VAS\\.])([F\\.])([S\\.])([X\\.])([B\\.])([D\\.]) ([^ ]+) +(.*)$/;\nvar formatRegexp = /^\\s*([D ])([E ])\\s+([^ ]+)\\s+(.*)$/;\nvar lineBreakRegexp = /\\r\\n|\\r|\\n/;\nvar filterRegexp = /^(?: [T\\.][S\\.][C\\.] )?([^ ]+) +(AA?|VV?|\\|)->(AA?|VV?|\\|) +(.*)$/;\n\nvar cache = {};\n\nmodule.exports = function(proto) {\n  /**\n   * Manually define the ffmpeg binary full path.\n   *\n   * @method FfmpegCommand#setFfmpegPath\n   *\n   * @param {String} ffmpegPath The full path to the ffmpeg binary.\n   * @return FfmpegCommand\n   */\n  proto.setFfmpegPath = function(ffmpegPath) {\n    cache.ffmpegPath = ffmpegPath;\n    return this;\n  };\n\n  /**\n   * Manually define the ffprobe binary full path.\n   *\n   * @method FfmpegCommand#setFfprobePath\n   *\n   * @param {String} ffprobePath The full path to the ffprobe binary.\n   * @return FfmpegCommand\n   */\n  proto.setFfprobePath = function(ffprobePath) {\n    cache.ffprobePath = ffprobePath;\n    return this;\n  };\n\n  /**\n   * Manually define the flvtool2/flvmeta binary full path.\n   *\n   * @method FfmpegCommand#setFlvtoolPath\n   *\n   * @param {String} flvtool The full path to the flvtool2 or flvmeta binary.\n   * @return FfmpegCommand\n   */\n  proto.setFlvtoolPath = function(flvtool) {\n    cache.flvtoolPath = flvtool;\n    return this;\n  };\n\n  /**\n   * Forget executable paths\n   *\n   * (only used for testing purposes)\n   *\n   * @method FfmpegCommand#_forgetPaths\n   * @private\n   */\n  proto._forgetPaths = function() {\n    delete cache.ffmpegPath;\n    delete cache.ffprobePath;\n    delete cache.flvtoolPath;\n  };\n\n  /**\n   * Check for ffmpeg availability\n   *\n   * If the FFMPEG_PATH environment variable is set, try to use it.\n   * If it is unset or incorrect, try to find ffmpeg in the PATH instead.\n   *\n   * @method FfmpegCommand#_getFfmpegPath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  proto._getFfmpegPath = function(callback) {\n    if ('ffmpegPath' in cache) {\n      return callback(null, cache.ffmpegPath);\n    }\n\n    async.waterfall([\n      // Try FFMPEG_PATH\n      function(cb) {\n        if (process.env.FFMPEG_PATH) {\n          fs.exists(process.env.FFMPEG_PATH, function(exists) {\n            if (exists) {\n              cb(null, process.env.FFMPEG_PATH);\n            } else {\n              cb(null, '');\n            }\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search in the PATH\n      function(ffmpeg, cb) {\n        if (ffmpeg.length) {\n          return cb(null, ffmpeg);\n        }\n\n        utils.which('ffmpeg', function(err, ffmpeg) {\n          cb(err, ffmpeg);\n        });\n      }\n    ], function(err, ffmpeg) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.ffmpegPath = (ffmpeg || ''));\n      }\n    });\n  };\n\n\n  /**\n   * Check for ffprobe availability\n   *\n   * If the FFPROBE_PATH environment variable is set, try to use it.\n   * If it is unset or incorrect, try to find ffprobe in the PATH instead.\n   * If this still fails, try to find ffprobe in the same directory as ffmpeg.\n   *\n   * @method FfmpegCommand#_getFfprobePath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  proto._getFfprobePath = function(callback) {\n    var self = this;\n\n    if ('ffprobePath' in cache) {\n      return callback(null, cache.ffprobePath);\n    }\n\n    async.waterfall([\n      // Try FFPROBE_PATH\n      function(cb) {\n        if (process.env.FFPROBE_PATH) {\n          fs.exists(process.env.FFPROBE_PATH, function(exists) {\n            cb(null, exists ? process.env.FFPROBE_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search in the PATH\n      function(ffprobe, cb) {\n        if (ffprobe.length) {\n          return cb(null, ffprobe);\n        }\n\n        utils.which('ffprobe', function(err, ffprobe) {\n          cb(err, ffprobe);\n        });\n      },\n\n      // Search in the same directory as ffmpeg\n      function(ffprobe, cb) {\n        if (ffprobe.length) {\n          return cb(null, ffprobe);\n        }\n\n        self._getFfmpegPath(function(err, ffmpeg) {\n          if (err) {\n            cb(err);\n          } else if (ffmpeg.length) {\n            var name = utils.isWindows ? 'ffprobe.exe' : 'ffprobe';\n            var ffprobe = path.join(path.dirname(ffmpeg), name);\n            fs.exists(ffprobe, function(exists) {\n              cb(null, exists ? ffprobe : '');\n            });\n          } else {\n            cb(null, '');\n          }\n        });\n      }\n    ], function(err, ffprobe) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.ffprobePath = (ffprobe || ''));\n      }\n    });\n  };\n\n\n  /**\n   * Check for flvtool2/flvmeta availability\n   *\n   * If the FLVTOOL2_PATH or FLVMETA_PATH environment variable are set, try to use them.\n   * If both are either unset or incorrect, try to find flvtool2 or flvmeta in the PATH instead.\n   *\n   * @method FfmpegCommand#_getFlvtoolPath\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n   proto._getFlvtoolPath = function(callback) {\n    if ('flvtoolPath' in cache) {\n      return callback(null, cache.flvtoolPath);\n    }\n\n    async.waterfall([\n      // Try FLVMETA_PATH\n      function(cb) {\n        if (process.env.FLVMETA_PATH) {\n          fs.exists(process.env.FLVMETA_PATH, function(exists) {\n            cb(null, exists ? process.env.FLVMETA_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Try FLVTOOL2_PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        if (process.env.FLVTOOL2_PATH) {\n          fs.exists(process.env.FLVTOOL2_PATH, function(exists) {\n            cb(null, exists ? process.env.FLVTOOL2_PATH : '');\n          });\n        } else {\n          cb(null, '');\n        }\n      },\n\n      // Search for flvmeta in the PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        utils.which('flvmeta', function(err, flvmeta) {\n          cb(err, flvmeta);\n        });\n      },\n\n      // Search for flvtool2 in the PATH\n      function(flvtool, cb) {\n        if (flvtool.length) {\n          return cb(null, flvtool);\n        }\n\n        utils.which('flvtool2', function(err, flvtool2) {\n          cb(err, flvtool2);\n        });\n      },\n    ], function(err, flvtool) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, cache.flvtoolPath = (flvtool || ''));\n      }\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableFilters}.\n   *\n   * @callback FfmpegCommand~filterCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} filters filter object with filter names as keys and the following\n   *   properties for each filter:\n   * @param {String} filters.description filter description\n   * @param {String} filters.input input type, one of 'audio', 'video' and 'none'\n   * @param {Boolean} filters.multipleInputs whether the filter supports multiple inputs\n   * @param {String} filters.output output type, one of 'audio', 'video' and 'none'\n   * @param {Boolean} filters.multipleOutputs whether the filter supports multiple outputs\n   */\n\n  /**\n   * Query ffmpeg for available filters\n   *\n   * @method FfmpegCommand#availableFilters\n   * @category Capabilities\n   * @aliases getAvailableFilters\n   *\n   * @param {FfmpegCommand~filterCallback} callback callback function\n   */\n  proto.availableFilters =\n  proto.getAvailableFilters = function(callback) {\n    if ('filters' in cache) {\n      return callback(null, cache.filters);\n    }\n\n    this._spawnFfmpeg(['-filters'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split('\\n');\n      var data = {};\n      var types = { A: 'audio', V: 'video', '|': 'none' };\n\n      lines.forEach(function(line) {\n        var match = line.match(filterRegexp);\n        if (match) {\n          data[match[1]] = {\n            description: match[4],\n            input: types[match[2].charAt(0)],\n            multipleInputs: match[2].length > 1,\n            output: types[match[3].charAt(0)],\n            multipleOutputs: match[3].length > 1\n          };\n        }\n      });\n\n      callback(null, cache.filters = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableCodecs}.\n   *\n   * @callback FfmpegCommand~codecCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} codecs codec object with codec names as keys and the following\n   *   properties for each codec (more properties may be available depending on the\n   *   ffmpeg version used):\n   * @param {String} codecs.description codec description\n   * @param {Boolean} codecs.canDecode whether the codec is able to decode streams\n   * @param {Boolean} codecs.canEncode whether the codec is able to encode streams\n   */\n\n  /**\n   * Query ffmpeg for available codecs\n   *\n   * @method FfmpegCommand#availableCodecs\n   * @category Capabilities\n   * @aliases getAvailableCodecs\n   *\n   * @param {FfmpegCommand~codecCallback} callback callback function\n   */\n  proto.availableCodecs =\n  proto.getAvailableCodecs = function(callback) {\n    if ('codecs' in cache) {\n      return callback(null, cache.codecs);\n    }\n\n    this._spawnFfmpeg(['-codecs'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(avCodecRegexp);\n        if (match && match[7] !== '=') {\n          data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],\n            description: match[8],\n            canDecode: match[1] === 'D',\n            canEncode: match[2] === 'E',\n            drawHorizBand: match[4] === 'S',\n            directRendering: match[5] === 'D',\n            weirdFrameTruncation: match[6] === 'T'\n          };\n        }\n\n        match = line.match(ffCodecRegexp);\n        if (match && match[7] !== '=') {\n          var codecData = data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],\n            description: match[8],\n            canDecode: match[1] === 'D',\n            canEncode: match[2] === 'E',\n            intraFrameOnly: match[4] === 'I',\n            isLossy: match[5] === 'L',\n            isLossless: match[6] === 'S'\n          };\n\n          var encoders = codecData.description.match(ffEncodersRegexp);\n          encoders = encoders ? encoders[1].trim().split(' ') : [];\n\n          var decoders = codecData.description.match(ffDecodersRegexp);\n          decoders = decoders ? decoders[1].trim().split(' ') : [];\n\n          if (encoders.length || decoders.length) {\n            var coderData = {};\n            utils.copy(codecData, coderData);\n            delete coderData.canEncode;\n            delete coderData.canDecode;\n\n            encoders.forEach(function(name) {\n              data[name] = {};\n              utils.copy(coderData, data[name]);\n              data[name].canEncode = true;\n            });\n\n            decoders.forEach(function(name) {\n              if (name in data) {\n                data[name].canDecode = true;\n              } else {\n                data[name] = {};\n                utils.copy(coderData, data[name]);\n                data[name].canDecode = true;\n              }\n            });\n          }\n        }\n      });\n\n      callback(null, cache.codecs = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableEncoders}.\n   *\n   * @callback FfmpegCommand~encodersCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} encoders encoders object with encoder names as keys and the following\n   *   properties for each encoder:\n   * @param {String} encoders.description codec description\n   * @param {Boolean} encoders.type \"audio\", \"video\" or \"subtitle\"\n   * @param {Boolean} encoders.frameMT whether the encoder is able to do frame-level multithreading\n   * @param {Boolean} encoders.sliceMT whether the encoder is able to do slice-level multithreading\n   * @param {Boolean} encoders.experimental whether the encoder is experimental\n   * @param {Boolean} encoders.drawHorizBand whether the encoder supports draw_horiz_band\n   * @param {Boolean} encoders.directRendering whether the encoder supports direct encoding method 1\n   */\n\n  /**\n   * Query ffmpeg for available encoders\n   *\n   * @method FfmpegCommand#availableEncoders\n   * @category Capabilities\n   * @aliases getAvailableEncoders\n   *\n   * @param {FfmpegCommand~encodersCallback} callback callback function\n   */\n  proto.availableEncoders =\n  proto.getAvailableEncoders = function(callback) {\n    if ('encoders' in cache) {\n      return callback(null, cache.encoders);\n    }\n\n    this._spawnFfmpeg(['-encoders'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(encodersRegexp);\n        if (match && match[7] !== '=') {\n          data[match[7]] = {\n            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[1]],\n            description: match[8],\n            frameMT: match[2] === 'F',\n            sliceMT: match[3] === 'S',\n            experimental: match[4] === 'X',\n            drawHorizBand: match[5] === 'B',\n            directRendering: match[6] === 'D'\n          };\n        }\n      });\n\n      callback(null, cache.encoders = data);\n    });\n  };\n\n\n  /**\n   * A callback passed to {@link FfmpegCommand#availableFormats}.\n   *\n   * @callback FfmpegCommand~formatCallback\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} formats format object with format names as keys and the following\n   *   properties for each format:\n   * @param {String} formats.description format description\n   * @param {Boolean} formats.canDemux whether the format is able to demux streams from an input file\n   * @param {Boolean} formats.canMux whether the format is able to mux streams into an output file\n   */\n\n  /**\n   * Query ffmpeg for available formats\n   *\n   * @method FfmpegCommand#availableFormats\n   * @category Capabilities\n   * @aliases getAvailableFormats\n   *\n   * @param {FfmpegCommand~formatCallback} callback callback function\n   */\n  proto.availableFormats =\n  proto.getAvailableFormats = function(callback) {\n    if ('formats' in cache) {\n      return callback(null, cache.formats);\n    }\n\n    // Run ffmpeg -formats\n    this._spawnFfmpeg(['-formats'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Parse output\n      var stdout = stdoutRing.get();\n      var lines = stdout.split(lineBreakRegexp);\n      var data = {};\n\n      lines.forEach(function(line) {\n        var match = line.match(formatRegexp);\n        if (match) {\n          match[3].split(',').forEach(function(format) {\n            if (!(format in data)) {\n              data[format] = {\n                description: match[4],\n                canDemux: false,\n                canMux: false\n              };\n            }\n\n            if (match[1] === 'D') {\n              data[format].canDemux = true;\n            }\n            if (match[2] === 'E') {\n              data[format].canMux = true;\n            }\n          });\n        }\n      });\n\n      callback(null, cache.formats = data);\n    });\n  };\n\n\n  /**\n   * Check capabilities before executing a command\n   *\n   * Checks whether all used codecs and formats are indeed available\n   *\n   * @method FfmpegCommand#_checkCapabilities\n   * @param {Function} callback callback with signature (err)\n   * @private\n   */\n  proto._checkCapabilities = function(callback) {\n    var self = this;\n    async.waterfall([\n      // Get available formats\n      function(cb) {\n        self.availableFormats(cb);\n      },\n\n      // Check whether specified formats are available\n      function(formats, cb) {\n        var unavailable;\n\n        // Output format(s)\n        unavailable = self._outputs\n          .reduce(function(fmts, output) {\n            var format = output.options.find('-f', 1);\n            if (format) {\n              if (!(format[0] in formats) || !(formats[format[0]].canMux)) {\n                fmts.push(format);\n              }\n            }\n\n            return fmts;\n          }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Output format ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Output formats ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        // Input format(s)\n        unavailable = self._inputs\n          .reduce(function(fmts, input) {\n            var format = input.options.find('-f', 1);\n            if (format) {\n              if (!(format[0] in formats) || !(formats[format[0]].canDemux)) {\n                fmts.push(format[0]);\n              }\n            }\n\n            return fmts;\n          }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Input format ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Input formats ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        cb();\n      },\n\n      // Get available codecs\n      function(cb) {\n        self.availableEncoders(cb);\n      },\n\n      // Check whether specified codecs are available and add strict experimental options if needed\n      function(encoders, cb) {\n        var unavailable;\n\n        // Audio codec(s)\n        unavailable = self._outputs.reduce(function(cdcs, output) {\n          var acodec = output.audio.find('-acodec', 1);\n          if (acodec && acodec[0] !== 'copy') {\n            if (!(acodec[0] in encoders) || encoders[acodec[0]].type !== 'audio') {\n              cdcs.push(acodec[0]);\n            }\n          }\n\n          return cdcs;\n        }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Audio codec ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Audio codecs ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        // Video codec(s)\n        unavailable = self._outputs.reduce(function(cdcs, output) {\n          var vcodec = output.video.find('-vcodec', 1);\n          if (vcodec && vcodec[0] !== 'copy') {\n            if (!(vcodec[0] in encoders) || encoders[vcodec[0]].type !== 'video') {\n              cdcs.push(vcodec[0]);\n            }\n          }\n\n          return cdcs;\n        }, []);\n\n        if (unavailable.length === 1) {\n          return cb(new Error('Video codec ' + unavailable[0] + ' is not available'));\n        } else if (unavailable.length > 1) {\n          return cb(new Error('Video codecs ' + unavailable.join(', ') + ' are not available'));\n        }\n\n        cb();\n      }\n    ], callback);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/capabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/ffprobe.js":
/*!***************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/ffprobe.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true, laxcomma:true*/\n\n\nvar spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\n\n\nfunction legacyTag(key) { return key.match(/^TAG:/); }\nfunction legacyDisposition(key) { return key.match(/^DISPOSITION:/); }\n\nfunction parseFfprobeOutput(out) {\n  var lines = out.split(/\\r\\n|\\r|\\n/);\n\n  lines = lines.filter(function (line) {\n    return line.length > 0;\n  });\n\n  var data = {\n    streams: [],\n    format: {},\n    chapters: []\n  };\n\n  function parseBlock(name) {\n    var data = {};\n\n    var line = lines.shift();\n    while (typeof line !== 'undefined') {\n      if (line.toLowerCase() == '[/'+name+']') {\n        return data;\n      } else if (line.match(/^\\[/)) {\n        line = lines.shift();\n        continue;\n      }\n\n      var kv = line.match(/^([^=]+)=(.*)$/);\n      if (kv) {\n        if (!(kv[1].match(/^TAG:/)) && kv[2].match(/^[0-9]+(\\.[0-9]+)?$/)) {\n          data[kv[1]] = Number(kv[2]);\n        } else {\n          data[kv[1]] = kv[2];\n        }\n      }\n\n      line = lines.shift();\n    }\n\n    return data;\n  }\n\n  var line = lines.shift();\n  while (typeof line !== 'undefined') {\n    if (line.match(/^\\[stream/i)) {\n      var stream = parseBlock('stream');\n      data.streams.push(stream);\n    } else if (line.match(/^\\[chapter/i)) {\n      var chapter = parseBlock('chapter');\n      data.chapters.push(chapter);\n    } else if (line.toLowerCase() === '[format]') {\n      data.format = parseBlock('format');\n    }\n\n    line = lines.shift();\n  }\n\n  return data;\n}\n\n\n\nmodule.exports = function(proto) {\n  /**\n   * A callback passed to the {@link FfmpegCommand#ffprobe} method.\n   *\n   * @callback FfmpegCommand~ffprobeCallback\n   *\n   * @param {Error|null} err error object or null if no error happened\n   * @param {Object} ffprobeData ffprobe output data; this object\n   *   has the same format as what the following command returns:\n   *\n   *     `ffprobe -print_format json -show_streams -show_format INPUTFILE`\n   * @param {Array} ffprobeData.streams stream information\n   * @param {Object} ffprobeData.format format information\n   */\n\n  /**\n   * Run ffprobe on last specified input\n   *\n   * @method FfmpegCommand#ffprobe\n   * @category Metadata\n   *\n   * @param {?Number} [index] 0-based index of input to probe (defaults to last input)\n   * @param {?String[]} [options] array of output options to return\n   * @param {FfmpegCommand~ffprobeCallback} callback callback function\n   *\n   */\n  proto.ffprobe = function() {\n    var input, index = null, options = [], callback;\n\n    // the last argument should be the callback\n    var callback = arguments[arguments.length - 1];\n\n    var ended = false\n    function handleCallback(err, data) {\n      if (!ended) {\n        ended = true;\n        callback(err, data);\n      }\n    };\n\n    // map the arguments to the correct variable names\n    switch (arguments.length) {\n      case 3:\n        index = arguments[0];\n        options = arguments[1];\n        break;\n      case 2:\n        if (typeof arguments[0] === 'number') {\n          index = arguments[0];\n        } else if (Array.isArray(arguments[0])) {\n          options = arguments[0];\n        }\n        break;\n    }\n\n\n    if (index === null) {\n      if (!this._currentInput) {\n        return handleCallback(new Error('No input specified'));\n      }\n\n      input = this._currentInput;\n    } else {\n      input = this._inputs[index];\n\n      if (!input) {\n        return handleCallback(new Error('Invalid input index'));\n      }\n    }\n\n    // Find ffprobe\n    this._getFfprobePath(function(err, path) {\n      if (err) {\n        return handleCallback(err);\n      } else if (!path) {\n        return handleCallback(new Error('Cannot find ffprobe'));\n      }\n\n      var stdout = '';\n      var stdoutClosed = false;\n      var stderr = '';\n      var stderrClosed = false;\n\n      // Spawn ffprobe\n      var src = input.isStream ? 'pipe:0' : input.source;\n      var ffprobe = spawn(path, ['-show_streams', '-show_format'].concat(options, src), {windowsHide: true});\n\n      if (input.isStream) {\n        // Skip errors on stdin. These get thrown when ffprobe is complete and\n        // there seems to be no way hook in and close stdin before it throws.\n        ffprobe.stdin.on('error', function(err) {\n          if (['ECONNRESET', 'EPIPE', 'EOF'].indexOf(err.code) >= 0) { return; }\n          handleCallback(err);\n        });\n\n        // Once ffprobe's input stream closes, we need no more data from the\n        // input\n        ffprobe.stdin.on('close', function() {\n            input.source.pause();\n            input.source.unpipe(ffprobe.stdin);\n        });\n\n        input.source.pipe(ffprobe.stdin);\n      }\n\n      ffprobe.on('error', callback);\n\n      // Ensure we wait for captured streams to end before calling callback\n      var exitError = null;\n      function handleExit(err) {\n        if (err) {\n          exitError = err;\n        }\n\n        if (processExited && stdoutClosed && stderrClosed) {\n          if (exitError) {\n            if (stderr) {\n              exitError.message += '\\n' + stderr;\n            }\n\n            return handleCallback(exitError);\n          }\n\n          // Process output\n          var data = parseFfprobeOutput(stdout);\n\n          // Handle legacy output with \"TAG:x\" and \"DISPOSITION:x\" keys\n          [data.format].concat(data.streams).forEach(function(target) {\n            if (target) {\n              var legacyTagKeys = Object.keys(target).filter(legacyTag);\n\n              if (legacyTagKeys.length) {\n                target.tags = target.tags || {};\n\n                legacyTagKeys.forEach(function(tagKey) {\n                  target.tags[tagKey.substr(4)] = target[tagKey];\n                  delete target[tagKey];\n                });\n              }\n\n              var legacyDispositionKeys = Object.keys(target).filter(legacyDisposition);\n\n              if (legacyDispositionKeys.length) {\n                target.disposition = target.disposition || {};\n\n                legacyDispositionKeys.forEach(function(dispositionKey) {\n                  target.disposition[dispositionKey.substr(12)] = target[dispositionKey];\n                  delete target[dispositionKey];\n                });\n              }\n            }\n          });\n\n          handleCallback(null, data);\n        }\n      }\n\n      // Handle ffprobe exit\n      var processExited = false;\n      ffprobe.on('exit', function(code, signal) {\n        processExited = true;\n\n        if (code) {\n          handleExit(new Error('ffprobe exited with code ' + code));\n        } else if (signal) {\n          handleExit(new Error('ffprobe was killed with signal ' + signal));\n        } else {\n          handleExit();\n        }\n      });\n\n      // Handle stdout/stderr streams\n      ffprobe.stdout.on('data', function(data) {\n        stdout += data;\n      });\n\n      ffprobe.stdout.on('close', function() {\n        stdoutClosed = true;\n        handleExit();\n      });\n\n      ffprobe.stderr.on('data', function(data) {\n        stderr += data;\n      });\n\n      ffprobe.stderr.on('close', function() {\n        stderrClosed = true;\n        handleExit();\n      });\n    });\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/ffprobe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js":
/*!*********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar path = __webpack_require__(/*! path */ \"path\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n\n\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n\n  EventEmitter.call(this);\n\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  }\n\n  // Add input if present\n  this._inputs = [];\n  if (options.source) {\n    this.input(options.source);\n  }\n\n  // Add target-less output for backwards compatibility\n  this._outputs = [];\n  this.output();\n\n  // Create argument lists\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    self[prop] = utils.args();\n  });\n\n  // Set default option values\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0;\n\n  // Save options\n  this.options = options;\n\n  // Setup logger\n  this.logger = options.logger || {\n    debug: function() {},\n    info: function() {},\n    warn: function() {},\n    error: function() {}\n  };\n}\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n\n\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\nFfmpegCommand.prototype.clone = function() {\n  var clone = new FfmpegCommand();\n  var self = this;\n\n  // Clone options and logger\n  clone.options = this.options;\n  clone.logger = this.logger;\n\n  // Clone inputs\n  clone._inputs = this._inputs.map(function(input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  });\n\n  // Create first output\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [\n      clone._currentOutput = {\n        flags: {}\n      }\n    ];\n\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  }\n\n  // Clone argument lists\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    clone[prop] = self[prop].clone();\n  });\n\n  return clone;\n};\n\n\n/* Add methods from options submodules */\n\n__webpack_require__(/*! ./options/inputs */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/inputs.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/audio */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/audio.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/video */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/video.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/videosize */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/videosize.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/output */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/output.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/custom */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/custom.js\")(FfmpegCommand.prototype);\n__webpack_require__(/*! ./options/misc */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/options/misc.js\")(FfmpegCommand.prototype);\n\n\n/* Add processor methods */\n\n__webpack_require__(/*! ./processor */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/processor.js\")(FfmpegCommand.prototype);\n\n\n/* Add capabilities methods */\n\n__webpack_require__(/*! ./capabilities */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/capabilities.js\")(FfmpegCommand.prototype);\n\nFfmpegCommand.setFfmpegPath = function(path) {\n  (new FfmpegCommand()).setFfmpegPath(path);\n};\n\nFfmpegCommand.setFfprobePath = function(path) {\n  (new FfmpegCommand()).setFfprobePath(path);\n};\n\nFfmpegCommand.setFlvtoolPath = function(path) {\n  (new FfmpegCommand()).setFlvtoolPath(path);\n};\n\nFfmpegCommand.availableFilters =\nFfmpegCommand.getAvailableFilters = function(callback) {\n  (new FfmpegCommand()).availableFilters(callback);\n};\n\nFfmpegCommand.availableCodecs =\nFfmpegCommand.getAvailableCodecs = function(callback) {\n  (new FfmpegCommand()).availableCodecs(callback);\n};\n\nFfmpegCommand.availableFormats =\nFfmpegCommand.getAvailableFormats = function(callback) {\n  (new FfmpegCommand()).availableFormats(callback);\n};\n\nFfmpegCommand.availableEncoders =\nFfmpegCommand.getAvailableEncoders = function(callback) {\n  (new FfmpegCommand()).availableEncoders(callback);\n};\n\n\n/* Add ffprobe methods */\n\n__webpack_require__(/*! ./ffprobe */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/ffprobe.js\")(FfmpegCommand.prototype);\n\nFfmpegCommand.ffprobe = function(file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n\n/* Add processing recipes */\n\n__webpack_require__(/*! ./recipes */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/recipes.js\")(FfmpegCommand.prototype);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvZmx1ZW50LWZmbXBlZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QixXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsbUJBQW1CLDBEQUE4Qjs7QUFFakQsWUFBWSxtQkFBTyxDQUFDLGdFQUFTO0FBQzdCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7O0FBR0E7O0FBRUEsbUJBQU8sQ0FBQyxrRkFBa0I7QUFDMUIsbUJBQU8sQ0FBQyxnRkFBaUI7QUFDekIsbUJBQU8sQ0FBQyxnRkFBaUI7QUFDekIsbUJBQU8sQ0FBQyx3RkFBcUI7QUFDN0IsbUJBQU8sQ0FBQyxrRkFBa0I7QUFDMUIsbUJBQU8sQ0FBQyxrRkFBa0I7QUFDMUIsbUJBQU8sQ0FBQyw4RUFBZ0I7OztBQUd4Qjs7QUFFQSxtQkFBTyxDQUFDLHdFQUFhOzs7QUFHckI7O0FBRUEsbUJBQU8sQ0FBQyw4RUFBZ0I7O0FBRXhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQSxtQkFBTyxDQUFDLG9FQUFXOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBTyxDQUFDLG9FQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbGliL2ZsdWVudC1mZm1wZWcuanM/ZjRlMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBub2RlOnRydWUqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIEFSR0xJU1RTID0gWydfZ2xvYmFsJywgJ19hdWRpbycsICdfYXVkaW9GaWx0ZXJzJywgJ192aWRlbycsICdfdmlkZW9GaWx0ZXJzJywgJ19zaXplRmlsdGVycycsICdfY29tcGxleEZpbHRlcnMnXTtcblxuXG4vKipcbiAqIENyZWF0ZSBhbiBmZm1wZWcgY29tbWFuZFxuICpcbiAqIENhbiBiZSBjYWxsZWQgd2l0aCBvciB3aXRob3V0IHRoZSAnbmV3JyBvcGVyYXRvciwgYW5kIHRoZSAnaW5wdXQnIHBhcmFtZXRlclxuICogbWF5IGJlIHNwZWNpZmllZCBhcyAnb3B0aW9ucy5zb3VyY2UnIGluc3RlYWQgKG9yIHBhc3NlZCBsYXRlciB3aXRoIHRoZVxuICogYWRkSW5wdXQgbWV0aG9kKS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfFJlYWRhYmxlU3RyZWFtfSBbaW5wdXRdIGlucHV0IGZpbGUgcGF0aCBvciByZWFkYWJsZSBzdHJlYW1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gY29tbWFuZCBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMubG9nZ2VyPTxubyBsb2dnaW5nPl0gbG9nZ2VyIG9iamVjdCB3aXRoICdlcnJvcicsICd3YXJuaW5nJywgJ2luZm8nIGFuZCAnZGVidWcnIG1ldGhvZHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5uaWNlbmVzcz0wXSBmZm1wZWcgcHJvY2VzcyBuaWNlbmVzcywgaWdub3JlZCBvbiBXaW5kb3dzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucHJpb3JpdHk9MF0gYWxpYXMgZm9yIGBuaWNlbmVzc2BcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5wcmVzZXRzPVwiZmx1ZW50LWZmbXBlZy9saWIvcHJlc2V0c1wiXSBkaXJlY3RvcnkgdG8gbG9hZCBwcmVzZXRzIGZyb21cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5wcmVzZXQ9XCJmbHVlbnQtZmZtcGVnL2xpYi9wcmVzZXRzXCJdIGFsaWFzIGZvciBgcHJlc2V0c2BcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5zdGRvdXRMaW5lcz0xMDBdIG1heGltdW0gbGluZXMgb2YgZmZtcGVnIG91dHB1dCB0byBrZWVwIGluIG1lbW9yeSwgdXNlIDAgZm9yIHVubGltaXRlZFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRpbWVvdXQ9PG5vIHRpbWVvdXQ+XSBmZm1wZWcgcHJvY2Vzc2luZyB0aW1lb3V0IGluIHNlY29uZHNcbiAqIEBwYXJhbSB7U3RyaW5nfFJlYWRhYmxlU3RyZWFtfSBbb3B0aW9ucy5zb3VyY2U9PG5vIGlucHV0Pl0gYWxpYXMgZm9yIHRoZSBgaW5wdXRgIHBhcmFtZXRlclxuICovXG5mdW5jdGlvbiBGZm1wZWdDb21tYW5kKGlucHV0LCBvcHRpb25zKSB7XG4gIC8vIE1ha2UgJ25ldycgb3B0aW9uYWxcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEZmbXBlZ0NvbW1hbmQpKSB7XG4gICAgcmV0dXJuIG5ldyBGZm1wZWdDb21tYW5kKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmICEoJ3JlYWRhYmxlJyBpbiBpbnB1dCkpIHtcbiAgICAvLyBPcHRpb25zIG9iamVjdCBwYXNzZWQgZGlyZWN0bHlcbiAgICBvcHRpb25zID0gaW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW5wdXQgcGFzc2VkIGZpcnN0XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5zb3VyY2UgPSBpbnB1dDtcbiAgfVxuXG4gIC8vIEFkZCBpbnB1dCBpZiBwcmVzZW50XG4gIHRoaXMuX2lucHV0cyA9IFtdO1xuICBpZiAob3B0aW9ucy5zb3VyY2UpIHtcbiAgICB0aGlzLmlucHV0KG9wdGlvbnMuc291cmNlKTtcbiAgfVxuXG4gIC8vIEFkZCB0YXJnZXQtbGVzcyBvdXRwdXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIHRoaXMuX291dHB1dHMgPSBbXTtcbiAgdGhpcy5vdXRwdXQoKTtcblxuICAvLyBDcmVhdGUgYXJndW1lbnQgbGlzdHNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBbJ19nbG9iYWwnLCAnX2NvbXBsZXhGaWx0ZXJzJ10uZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgc2VsZltwcm9wXSA9IHV0aWxzLmFyZ3MoKTtcbiAgfSk7XG5cbiAgLy8gU2V0IGRlZmF1bHQgb3B0aW9uIHZhbHVlc1xuICBvcHRpb25zLnN0ZG91dExpbmVzID0gJ3N0ZG91dExpbmVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGRvdXRMaW5lcyA6IDEwMDtcbiAgb3B0aW9ucy5wcmVzZXRzID0gb3B0aW9ucy5wcmVzZXRzIHx8IG9wdGlvbnMucHJlc2V0IHx8IHBhdGguam9pbihfX2Rpcm5hbWUsICdwcmVzZXRzJyk7XG4gIG9wdGlvbnMubmljZW5lc3MgPSBvcHRpb25zLm5pY2VuZXNzIHx8IG9wdGlvbnMucHJpb3JpdHkgfHwgMDtcblxuICAvLyBTYXZlIG9wdGlvbnNcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAvLyBTZXR1cCBsb2dnZXJcbiAgdGhpcy5sb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCB7XG4gICAgZGVidWc6IGZ1bmN0aW9uKCkge30sXG4gICAgaW5mbzogZnVuY3Rpb24oKSB7fSxcbiAgICB3YXJuOiBmdW5jdGlvbigpIHt9LFxuICAgIGVycm9yOiBmdW5jdGlvbigpIHt9XG4gIH07XG59XG51dGlsLmluaGVyaXRzKEZmbXBlZ0NvbW1hbmQsIEV2ZW50RW1pdHRlcik7XG5tb2R1bGUuZXhwb3J0cyA9IEZmbXBlZ0NvbW1hbmQ7XG5cblxuLyoqXG4gKiBDbG9uZSBhbiBmZm1wZWcgY29tbWFuZFxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHByb2Nlc3MgdGhlIHNhbWUgaW5wdXQgbXVsdGlwbGUgdGltZXMuXG4gKiBJdCByZXR1cm5zIGEgbmV3IEZmbXBlZ0NvbW1hbmQgaW5zdGFuY2Ugd2l0aCB0aGUgZXhhY3Qgc2FtZSBvcHRpb25zLlxuICpcbiAqIEFsbCBvcHRpb25zIHNldCBfYWZ0ZXJfIHRoZSBjbG9uZSgpIGNhbGwgd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluc3RhbmNlXG4gKiBpdCBoYXMgYmVlbiBjYWxsZWQgb24uXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIGNvbW1hbmQgPSBmZm1wZWcoJy9wYXRoL3RvL3NvdXJjZS5hdmknKVxuICogICAgIC5hdWRpb0NvZGVjKCdsaWJmYWFjJylcbiAqICAgICAudmlkZW9Db2RlYygnbGlieDI2NCcpXG4gKiAgICAgLmZvcm1hdCgnbXA0Jyk7XG4gKlxuICogICBjb21tYW5kLmNsb25lKClcbiAqICAgICAuc2l6ZSgnMzIweDIwMCcpXG4gKiAgICAgLnNhdmUoJy9wYXRoL3RvL291dHB1dC1zbWFsbC5tcDQnKTtcbiAqXG4gKiAgIGNvbW1hbmQuY2xvbmUoKVxuICogICAgIC5zaXplKCc2NDB4NDAwJylcbiAqICAgICAuc2F2ZSgnL3BhdGgvdG8vb3V0cHV0LW1lZGl1bS5tcDQnKTtcbiAqXG4gKiAgIGNvbW1hbmQuc2F2ZSgnL3BhdGgvdG8vb3V0cHV0LW9yaWdpbmFsLXNpemUubXA0Jyk7XG4gKlxuICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2Nsb25lXG4gKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAqL1xuRmZtcGVnQ29tbWFuZC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNsb25lID0gbmV3IEZmbXBlZ0NvbW1hbmQoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIENsb25lIG9wdGlvbnMgYW5kIGxvZ2dlclxuICBjbG9uZS5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICBjbG9uZS5sb2dnZXIgPSB0aGlzLmxvZ2dlcjtcblxuICAvLyBDbG9uZSBpbnB1dHNcbiAgY2xvbmUuX2lucHV0cyA9IHRoaXMuX2lucHV0cy5tYXAoZnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBpbnB1dC5zb3VyY2UsXG4gICAgICBvcHRpb25zOiBpbnB1dC5vcHRpb25zLmNsb25lKClcbiAgICB9O1xuICB9KTtcblxuICAvLyBDcmVhdGUgZmlyc3Qgb3V0cHV0XG4gIGlmICgndGFyZ2V0JyBpbiB0aGlzLl9vdXRwdXRzWzBdKSB7XG4gICAgLy8gV2UgaGF2ZSBvdXRwdXRzIHNldCwgZG9uJ3QgY2xvbmUgdGhlbSBhbmQgY3JlYXRlIGZpcnN0IG91dHB1dFxuICAgIGNsb25lLl9vdXRwdXRzID0gW107XG4gICAgY2xvbmUub3V0cHV0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gb3V0cHV0cyBzZXQsIGNsb25lIGZpcnN0IG91dHB1dCBvcHRpb25zXG4gICAgY2xvbmUuX291dHB1dHMgPSBbXG4gICAgICBjbG9uZS5fY3VycmVudE91dHB1dCA9IHtcbiAgICAgICAgZmxhZ3M6IHt9XG4gICAgICB9XG4gICAgXTtcblxuICAgIFsnYXVkaW8nLCAnYXVkaW9GaWx0ZXJzJywgJ3ZpZGVvJywgJ3ZpZGVvRmlsdGVycycsICdzaXplRmlsdGVycycsICdvcHRpb25zJ10uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIGNsb25lLl9jdXJyZW50T3V0cHV0W2tleV0gPSBzZWxmLl9jdXJyZW50T3V0cHV0W2tleV0uY2xvbmUoKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9jdXJyZW50T3V0cHV0LnNpemVEYXRhKSB7XG4gICAgICBjbG9uZS5fY3VycmVudE91dHB1dC5zaXplRGF0YSA9IHt9O1xuICAgICAgdXRpbHMuY29weSh0aGlzLl9jdXJyZW50T3V0cHV0LnNpemVEYXRhLCBjbG9uZS5fY3VycmVudE91dHB1dC5zaXplRGF0YSk7XG4gICAgfVxuXG4gICAgdXRpbHMuY29weSh0aGlzLl9jdXJyZW50T3V0cHV0LmZsYWdzLCBjbG9uZS5fY3VycmVudE91dHB1dC5mbGFncyk7XG4gIH1cblxuICAvLyBDbG9uZSBhcmd1bWVudCBsaXN0c1xuICBbJ19nbG9iYWwnLCAnX2NvbXBsZXhGaWx0ZXJzJ10uZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY2xvbmVbcHJvcF0gPSBzZWxmW3Byb3BdLmNsb25lKCk7XG4gIH0pO1xuXG4gIHJldHVybiBjbG9uZTtcbn07XG5cblxuLyogQWRkIG1ldGhvZHMgZnJvbSBvcHRpb25zIHN1Ym1vZHVsZXMgKi9cblxucmVxdWlyZSgnLi9vcHRpb25zL2lucHV0cycpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcbnJlcXVpcmUoJy4vb3B0aW9ucy9hdWRpbycpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcbnJlcXVpcmUoJy4vb3B0aW9ucy92aWRlbycpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcbnJlcXVpcmUoJy4vb3B0aW9ucy92aWRlb3NpemUnKShGZm1wZWdDb21tYW5kLnByb3RvdHlwZSk7XG5yZXF1aXJlKCcuL29wdGlvbnMvb3V0cHV0JykoRmZtcGVnQ29tbWFuZC5wcm90b3R5cGUpO1xucmVxdWlyZSgnLi9vcHRpb25zL2N1c3RvbScpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcbnJlcXVpcmUoJy4vb3B0aW9ucy9taXNjJykoRmZtcGVnQ29tbWFuZC5wcm90b3R5cGUpO1xuXG5cbi8qIEFkZCBwcm9jZXNzb3IgbWV0aG9kcyAqL1xuXG5yZXF1aXJlKCcuL3Byb2Nlc3NvcicpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcblxuXG4vKiBBZGQgY2FwYWJpbGl0aWVzIG1ldGhvZHMgKi9cblxucmVxdWlyZSgnLi9jYXBhYmlsaXRpZXMnKShGZm1wZWdDb21tYW5kLnByb3RvdHlwZSk7XG5cbkZmbXBlZ0NvbW1hbmQuc2V0RmZtcGVnUGF0aCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgKG5ldyBGZm1wZWdDb21tYW5kKCkpLnNldEZmbXBlZ1BhdGgocGF0aCk7XG59O1xuXG5GZm1wZWdDb21tYW5kLnNldEZmcHJvYmVQYXRoID0gZnVuY3Rpb24ocGF0aCkge1xuICAobmV3IEZmbXBlZ0NvbW1hbmQoKSkuc2V0RmZwcm9iZVBhdGgocGF0aCk7XG59O1xuXG5GZm1wZWdDb21tYW5kLnNldEZsdnRvb2xQYXRoID0gZnVuY3Rpb24ocGF0aCkge1xuICAobmV3IEZmbXBlZ0NvbW1hbmQoKSkuc2V0Rmx2dG9vbFBhdGgocGF0aCk7XG59O1xuXG5GZm1wZWdDb21tYW5kLmF2YWlsYWJsZUZpbHRlcnMgPVxuRmZtcGVnQ29tbWFuZC5nZXRBdmFpbGFibGVGaWx0ZXJzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgKG5ldyBGZm1wZWdDb21tYW5kKCkpLmF2YWlsYWJsZUZpbHRlcnMoY2FsbGJhY2spO1xufTtcblxuRmZtcGVnQ29tbWFuZC5hdmFpbGFibGVDb2RlY3MgPVxuRmZtcGVnQ29tbWFuZC5nZXRBdmFpbGFibGVDb2RlY3MgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAobmV3IEZmbXBlZ0NvbW1hbmQoKSkuYXZhaWxhYmxlQ29kZWNzKGNhbGxiYWNrKTtcbn07XG5cbkZmbXBlZ0NvbW1hbmQuYXZhaWxhYmxlRm9ybWF0cyA9XG5GZm1wZWdDb21tYW5kLmdldEF2YWlsYWJsZUZvcm1hdHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAobmV3IEZmbXBlZ0NvbW1hbmQoKSkuYXZhaWxhYmxlRm9ybWF0cyhjYWxsYmFjayk7XG59O1xuXG5GZm1wZWdDb21tYW5kLmF2YWlsYWJsZUVuY29kZXJzID1cbkZmbXBlZ0NvbW1hbmQuZ2V0QXZhaWxhYmxlRW5jb2RlcnMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAobmV3IEZmbXBlZ0NvbW1hbmQoKSkuYXZhaWxhYmxlRW5jb2RlcnMoY2FsbGJhY2spO1xufTtcblxuXG4vKiBBZGQgZmZwcm9iZSBtZXRob2RzICovXG5cbnJlcXVpcmUoJy4vZmZwcm9iZScpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcblxuRmZtcGVnQ29tbWFuZC5mZnByb2JlID0gZnVuY3Rpb24oZmlsZSkge1xuICB2YXIgaW5zdGFuY2UgPSBuZXcgRmZtcGVnQ29tbWFuZChmaWxlKTtcbiAgaW5zdGFuY2UuZmZwcm9iZS5hcHBseShpbnN0YW5jZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG59O1xuXG4vKiBBZGQgcHJvY2Vzc2luZyByZWNpcGVzICovXG5cbnJlcXVpcmUoJy4vcmVjaXBlcycpKEZmbXBlZ0NvbW1hbmQucHJvdG90eXBlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/audio.js":
/*!*********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/audio.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n\n/*\n *! Audio-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio =\n  proto.noAudio = function() {\n    this._currentOutput.audio.clear();\n    this._currentOutput.audioFilters.clear();\n    this._currentOutput.audio('-an');\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n  proto.withAudioCodec =\n  proto.audioCodec = function(codec) {\n    this._currentOutput.audio('-acodec', codec);\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n  proto.withAudioBitrate =\n  proto.audioBitrate = function(bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n    return this;\n  };\n\n\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n  proto.withAudioChannels =\n  proto.audioChannels = function(channels) {\n    this._currentOutput.audio('-ac', channels);\n    return this;\n  };\n\n\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n  proto.withAudioFrequency =\n  proto.audioFrequency = function(freq) {\n    this._currentOutput.audio('-ar', freq);\n    return this;\n  };\n\n\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n  proto.withAudioQuality =\n  proto.audioQuality = function(quality) {\n    this._currentOutput.audio('-aq', quality);\n    return this;\n  };\n\n\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withAudioFilter =\n  proto.withAudioFilters =\n  proto.audioFilter =\n  proto.audioFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy9hdWRpby5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxpRUFBVTs7O0FBRzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDZCQUE2QjtBQUMxQztBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLHdCQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbGliL29wdGlvbnMvYXVkaW8uanM/M2UyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBub2RlOnRydWUqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5cbi8qXG4gKiEgQXVkaW8tcmVsYXRlZCBtZXRob2RzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwcm90bykge1xuICAvKipcbiAgICogRGlzYWJsZSBhdWRpbyBpbiB0aGUgb3V0cHV0XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNub0F1ZGlvXG4gICAqIEBjYXRlZ29yeSBBdWRpb1xuICAgKiBAYWxpYXNlcyB3aXRoTm9BdWRpb1xuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhOb0F1ZGlvID1cbiAgcHJvdG8ubm9BdWRpbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuYXVkaW8uY2xlYXIoKTtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LmF1ZGlvRmlsdGVycy5jbGVhcigpO1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuYXVkaW8oJy1hbicpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU3BlY2lmeSBhdWRpbyBjb2RlY1xuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjYXVkaW9Db2RlY1xuICAgKiBAY2F0ZWdvcnkgQXVkaW9cbiAgICogQGFsaWFzZXMgd2l0aEF1ZGlvQ29kZWNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvZGVjIGF1ZGlvIGNvZGVjIG5hbWVcbiAgICogQHJldHVybiBGZm1wZWdDb21tYW5kXG4gICAqL1xuICBwcm90by53aXRoQXVkaW9Db2RlYyA9XG4gIHByb3RvLmF1ZGlvQ29kZWMgPSBmdW5jdGlvbihjb2RlYykge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuYXVkaW8oJy1hY29kZWMnLCBjb2RlYyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGF1ZGlvIGJpdHJhdGVcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2F1ZGlvQml0cmF0ZVxuICAgKiBAY2F0ZWdvcnkgQXVkaW9cbiAgICogQGFsaWFzZXMgd2l0aEF1ZGlvQml0cmF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGJpdHJhdGUgYXVkaW8gYml0cmF0ZSBpbiBrYnBzICh3aXRoIGFuIG9wdGlvbmFsICdrJyBzdWZmaXgpXG4gICAqIEByZXR1cm4gRmZtcGVnQ29tbWFuZFxuICAgKi9cbiAgcHJvdG8ud2l0aEF1ZGlvQml0cmF0ZSA9XG4gIHByb3RvLmF1ZGlvQml0cmF0ZSA9IGZ1bmN0aW9uKGJpdHJhdGUpIHtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LmF1ZGlvKCctYjphJywgKCcnICsgYml0cmF0ZSkucmVwbGFjZSgvaz8kLywgJ2snKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU3BlY2lmeSBhdWRpbyBjaGFubmVsIGNvdW50XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNhdWRpb0NoYW5uZWxzXG4gICAqIEBjYXRlZ29yeSBBdWRpb1xuICAgKiBAYWxpYXNlcyB3aXRoQXVkaW9DaGFubmVsc1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbm5lbHMgY2hhbm5lbCBjb3VudFxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhBdWRpb0NoYW5uZWxzID1cbiAgcHJvdG8uYXVkaW9DaGFubmVscyA9IGZ1bmN0aW9uKGNoYW5uZWxzKSB7XG4gICAgdGhpcy5fY3VycmVudE91dHB1dC5hdWRpbygnLWFjJywgY2hhbm5lbHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgYXVkaW8gZnJlcXVlbmN5XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNhdWRpb0ZyZXF1ZW5jeVxuICAgKiBAY2F0ZWdvcnkgQXVkaW9cbiAgICogQGFsaWFzZXMgd2l0aEF1ZGlvRnJlcXVlbmN5XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmcmVxIGF1ZGlvIGZyZXF1ZW5jeSBpbiBIelxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhBdWRpb0ZyZXF1ZW5jeSA9XG4gIHByb3RvLmF1ZGlvRnJlcXVlbmN5ID0gZnVuY3Rpb24oZnJlcSkge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuYXVkaW8oJy1hcicsIGZyZXEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgYXVkaW8gcXVhbGl0eVxuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjYXVkaW9RdWFsaXR5XG4gICAqIEBjYXRlZ29yeSBBdWRpb1xuICAgKiBAYWxpYXNlcyB3aXRoQXVkaW9RdWFsaXR5XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBxdWFsaXR5IGF1ZGlvIHF1YWxpdHkgZmFjdG9yXG4gICAqIEByZXR1cm4gRmZtcGVnQ29tbWFuZFxuICAgKi9cbiAgcHJvdG8ud2l0aEF1ZGlvUXVhbGl0eSA9XG4gIHByb3RvLmF1ZGlvUXVhbGl0eSA9IGZ1bmN0aW9uKHF1YWxpdHkpIHtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LmF1ZGlvKCctYXEnLCBxdWFsaXR5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGN1c3RvbSBhdWRpbyBmaWx0ZXIocylcbiAgICpcbiAgICogQ2FuIGJlIGNhbGxlZCBib3RoIHdpdGggb25lIG9yIG1hbnkgZmlsdGVycywgb3IgYSBmaWx0ZXIgYXJyYXkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbW1hbmQuYXVkaW9GaWx0ZXJzKCdmaWx0ZXIxJyk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbW1hbmQuYXVkaW9GaWx0ZXJzKCdmaWx0ZXIxJywgJ2ZpbHRlcjI9cGFyYW0xPXZhbHVlMTpwYXJhbTI9dmFsdWUyJyk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbW1hbmQuYXVkaW9GaWx0ZXJzKFsnZmlsdGVyMScsICdmaWx0ZXIyJ10pO1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb21tYW5kLmF1ZGlvRmlsdGVycyhbXG4gICAqICAge1xuICAgKiAgICAgZmlsdGVyOiAnZmlsdGVyMSdcbiAgICogICB9LFxuICAgKiAgIHtcbiAgICogICAgIGZpbHRlcjogJ2ZpbHRlcjInLFxuICAgKiAgICAgb3B0aW9uczogJ3BhcmFtPXZhbHVlOnBhcmFtPXZhbHVlJ1xuICAgKiAgIH1cbiAgICogXSk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbW1hbmQuYXVkaW9GaWx0ZXJzKFxuICAgKiAgIHtcbiAgICogICAgIGZpbHRlcjogJ2ZpbHRlcjEnLFxuICAgKiAgICAgb3B0aW9uczogWyd2YWx1ZTEnLCAndmFsdWUyJ11cbiAgICogICB9LFxuICAgKiAgIHtcbiAgICogICAgIGZpbHRlcjogJ2ZpbHRlcjInLFxuICAgKiAgICAgb3B0aW9uczogeyBwYXJhbTE6ICd2YWx1ZTEnLCBwYXJhbTI6ICd2YWx1ZTInIH1cbiAgICogICB9XG4gICAqICk7XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNhdWRpb0ZpbHRlcnNcbiAgICogQGFsaWFzZXMgd2l0aEF1ZGlvRmlsdGVyLHdpdGhBdWRpb0ZpbHRlcnMsYXVkaW9GaWx0ZXJcbiAgICogQGNhdGVnb3J5IEF1ZGlvXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfFN0cmluZ1tdfE9iamVjdFtdfSBmaWx0ZXJzIGF1ZGlvIGZpbHRlciBzdHJpbmdzLCBzdHJpbmcgYXJyYXkgb3JcbiAgICogICBmaWx0ZXIgc3BlY2lmaWNhdGlvbiBhcnJheSwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZpbHRlcnMuZmlsdGVyIGZpbHRlciBuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfE9iamVjdH0gW2ZpbHRlcnMub3B0aW9uc10gZmlsdGVyIG9wdGlvbiBzdHJpbmcsIGFycmF5LCBvciBvYmplY3RcbiAgICogQHJldHVybiBGZm1wZWdDb21tYW5kXG4gICAqL1xuICBwcm90by53aXRoQXVkaW9GaWx0ZXIgPVxuICBwcm90by53aXRoQXVkaW9GaWx0ZXJzID1cbiAgcHJvdG8uYXVkaW9GaWx0ZXIgPVxuICBwcm90by5hdWRpb0ZpbHRlcnMgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBmaWx0ZXJzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXJzKSkge1xuICAgICAgZmlsdGVycyA9IFtmaWx0ZXJzXTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LmF1ZGlvRmlsdGVycyh1dGlscy5tYWtlRmlsdGVyU3RyaW5ncyhmaWx0ZXJzKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/audio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/custom.js":
/*!**********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/custom.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n\n/*\n *! Custom options methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add custom input option(s)\n   *\n   * When passing a single string or an array, each string containing two\n   * words is split (eg. inputOptions('-option value') is supported) for\n   * compatibility reasons.  This is not the case when passing more than\n   * one argument.\n   *\n   * @example\n   * command.inputOptions('option1');\n   *\n   * @example\n   * command.inputOptions('option1', 'option2');\n   *\n   * @example\n   * command.inputOptions(['option1', 'option2']);\n   *\n   * @method FfmpegCommand#inputOptions\n   * @category Custom options\n   * @aliases addInputOption,addInputOptions,withInputOption,withInputOptions,inputOption\n   *\n   * @param {...String} options option string(s) or string array\n   * @return FfmpegCommand\n   */\n  proto.addInputOption =\n  proto.addInputOptions =\n  proto.withInputOption =\n  proto.withInputOptions =\n  proto.inputOption =\n  proto.inputOptions = function(options) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    var doSplit = true;\n\n    if (arguments.length > 1) {\n      options = [].slice.call(arguments);\n      doSplit = false;\n    }\n\n    if (!Array.isArray(options)) {\n      options = [options];\n    }\n\n    this._currentInput.options(options.reduce(function(options, option) {\n      var split = String(option).split(' ');\n\n      if (doSplit && split.length === 2) {\n        options.push(split[0], split[1]);\n      } else {\n        options.push(option);\n      }\n\n      return options;\n    }, []));\n    return this;\n  };\n\n\n  /**\n   * Add custom output option(s)\n   *\n   * @example\n   * command.outputOptions('option1');\n   *\n   * @example\n   * command.outputOptions('option1', 'option2');\n   *\n   * @example\n   * command.outputOptions(['option1', 'option2']);\n   *\n   * @method FfmpegCommand#outputOptions\n   * @category Custom options\n   * @aliases addOutputOption,addOutputOptions,addOption,addOptions,withOutputOption,withOutputOptions,withOption,withOptions,outputOption\n   *\n   * @param {...String} options option string(s) or string array\n   * @return FfmpegCommand\n   */\n  proto.addOutputOption =\n  proto.addOutputOptions =\n  proto.addOption =\n  proto.addOptions =\n  proto.withOutputOption =\n  proto.withOutputOptions =\n  proto.withOption =\n  proto.withOptions =\n  proto.outputOption =\n  proto.outputOptions = function(options) {\n    var doSplit = true;\n\n    if (arguments.length > 1) {\n      options = [].slice.call(arguments);\n      doSplit = false;\n    }\n\n    if (!Array.isArray(options)) {\n      options = [options];\n    }\n\n    this._currentOutput.options(options.reduce(function(options, option) {\n      var split = String(option).split(' ');\n\n      if (doSplit && split.length === 2) {\n        options.push(split[0], split[1]);\n      } else {\n        options.push(option);\n      }\n\n      return options;\n    }, []));\n    return this;\n  };\n\n\n  /**\n   * Specify a complex filtergraph\n   *\n   * Calling this method will override any previously set filtergraph, but you can set\n   * as many filters as needed in one call.\n   *\n   * @example <caption>Overlay an image over a video (using a filtergraph string)</caption>\n   *   ffmpeg()\n   *     .input('video.avi')\n   *     .input('image.png')\n   *     .complexFilter('[0:v][1:v]overlay[out]', ['out']);\n   *\n   * @example <caption>Overlay an image over a video (using a filter array)</caption>\n   *   ffmpeg()\n   *     .input('video.avi')\n   *     .input('image.png')\n   *     .complexFilter([{\n   *       filter: 'overlay',\n   *       inputs: ['0:v', '1:v'],\n   *       outputs: ['out']\n   *     }], ['out']);\n   *\n   * @example <caption>Split video into RGB channels and output a 3x1 video with channels side to side</caption>\n   *  ffmpeg()\n   *    .input('video.avi')\n   *    .complexFilter([\n   *      // Duplicate video stream 3 times into streams a, b, and c\n   *      { filter: 'split', options: '3', outputs: ['a', 'b', 'c'] },\n   *\n   *      // Create stream 'red' by cancelling green and blue channels from stream 'a'\n   *      { filter: 'lutrgb', options: { g: 0, b: 0 }, inputs: 'a', outputs: 'red' },\n   *\n   *      // Create stream 'green' by cancelling red and blue channels from stream 'b'\n   *      { filter: 'lutrgb', options: { r: 0, b: 0 }, inputs: 'b', outputs: 'green' },\n   *\n   *      // Create stream 'blue' by cancelling red and green channels from stream 'c'\n   *      { filter: 'lutrgb', options: { r: 0, g: 0 }, inputs: 'c', outputs: 'blue' },\n   *\n   *      // Pad stream 'red' to 3x width, keeping the video on the left, and name output 'padded'\n   *      { filter: 'pad', options: { w: 'iw*3', h: 'ih' }, inputs: 'red', outputs: 'padded' },\n   *\n   *      // Overlay 'green' onto 'padded', moving it to the center, and name output 'redgreen'\n   *      { filter: 'overlay', options: { x: 'w', y: 0 }, inputs: ['padded', 'green'], outputs: 'redgreen'},\n   *\n   *      // Overlay 'blue' onto 'redgreen', moving it to the right\n   *      { filter: 'overlay', options: { x: '2*w', y: 0 }, inputs: ['redgreen', 'blue']},\n   *    ]);\n   *\n   * @method FfmpegCommand#complexFilter\n   * @category Custom options\n   * @aliases filterGraph\n   *\n   * @param {String|Array} spec filtergraph string or array of filter specification\n   *   objects, each having the following properties:\n   * @param {String} spec.filter filter name\n   * @param {String|Array} [spec.inputs] (array of) input stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically choosing the first unused matching streams\n   * @param {String|Array} [spec.outputs] (array of) output stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically assigning the output to the output file\n   * @param {Object|String|Array} [spec.options] filter options, can be omitted to not set any options\n   * @param {Array} [map] (array of) stream specifier(s) from the graph to include in\n   *   ffmpeg output, defaults to ffmpeg automatically choosing the first matching streams.\n   * @return FfmpegCommand\n   */\n  proto.filterGraph =\n  proto.complexFilter = function(spec, map) {\n    this._complexFilters.clear();\n\n    if (!Array.isArray(spec)) {\n      spec = [spec];\n    }\n\n    this._complexFilters('-filter_complex', utils.makeFilterStrings(spec).join(';'));\n\n    if (Array.isArray(map)) {\n      var self = this;\n      map.forEach(function(streamSpec) {\n        self._complexFilters('-map', streamSpec.replace(utils.streamRegexp, '[$1]'));\n      });\n    } else if (typeof map === 'string') {\n      this._complexFilters('-map', map.replace(utils.streamRegexp, '[$1]'));\n    }\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/custom.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/inputs.js":
/*!**********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/inputs.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n/*\n *! Input-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd =\n  proto.addInput =\n  proto.input = function(source) {\n    var isFile = false;\n    var isStream = false;\n\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !(source.readable)) {\n        throw new Error('Invalid input');\n      }\n\n      var hasInputStream = this._inputs.some(function(input) {\n        return input.isStream;\n      });\n\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n  proto.withInputFormat =\n  proto.inputFormat =\n  proto.fromFormat = function(format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n  proto.withInputFps =\n  proto.withInputFPS =\n  proto.withFpsInput =\n  proto.withFPSInput =\n  proto.inputFPS =\n  proto.inputFps =\n  proto.fpsInput =\n  proto.FPSInput = function(fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n  proto.nativeFramerate =\n  proto.withNativeFramerate =\n  proto.native = function() {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-re');\n    return this;\n  };\n\n\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.setStartTime =\n  proto.seekInput = function(seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-ss', seek);\n\n    return this;\n  };\n\n\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.loop = function(duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-loop', '1');\n\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy9pbnB1dHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsaUVBQVU7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDJDQUEyQyxHQUFHO0FBQzlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZHVzY3JpYmUvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy9pbnB1dHMuanM/ZjdkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBub2RlOnRydWUqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKlxuICohIElucHV0LXJlbGF0ZWQgbWV0aG9kc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgLyoqXG4gICAqIEFkZCBhbiBpbnB1dCB0byBjb21tYW5kXG4gICAqXG4gICAqIEFsc28gc3dpdGNoZXMgXCJjdXJyZW50IGlucHV0XCIsIHRoYXQgaXMgdGhlIGlucHV0IHRoYXQgd2lsbCBiZSBhZmZlY3RlZFxuICAgKiBieSBzdWJzZXF1ZW50IGlucHV0LXJlbGF0ZWQgbWV0aG9kcy5cbiAgICpcbiAgICogTm90ZTogb25seSBvbmUgc3RyZWFtIGlucHV0IGlzIHN1cHBvcnRlZCBmb3Igbm93LlxuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjaW5wdXRcbiAgICogQGNhdGVnb3J5IElucHV0XG4gICAqIEBhbGlhc2VzIG1lcmdlQWRkLGFkZElucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfFJlYWRhYmxlfSBzb3VyY2UgaW5wdXQgZmlsZSBwYXRoIG9yIHJlYWRhYmxlIHN0cmVhbVxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLm1lcmdlQWRkID1cbiAgcHJvdG8uYWRkSW5wdXQgPVxuICBwcm90by5pbnB1dCA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIHZhciBpc0ZpbGUgPSBmYWxzZTtcbiAgICB2YXIgaXNTdHJlYW0gPSBmYWxzZTtcblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCEoJ3JlYWRhYmxlJyBpbiBzb3VyY2UpIHx8ICEoc291cmNlLnJlYWRhYmxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhc0lucHV0U3RyZWFtID0gdGhpcy5faW5wdXRzLnNvbWUoZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LmlzU3RyZWFtO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChoYXNJbnB1dFN0cmVhbSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgb25lIGlucHV0IHN0cmVhbSBpcyBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgaXNTdHJlYW0gPSB0cnVlO1xuICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcm90b2NvbCA9IHNvdXJjZS5tYXRjaCgvXihbYS16XXsyLH0pOi9pKTtcbiAgICAgIGlzRmlsZSA9ICFwcm90b2NvbCB8fCBwcm90b2NvbFswXSA9PT0gJ2ZpbGUnO1xuICAgIH1cblxuICAgIHRoaXMuX2lucHV0cy5wdXNoKHRoaXMuX2N1cnJlbnRJbnB1dCA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgaXNGaWxlOiBpc0ZpbGUsXG4gICAgICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gICAgICBvcHRpb25zOiB1dGlscy5hcmdzKClcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgaW5wdXQgZm9ybWF0IGZvciB0aGUgbGFzdCBzcGVjaWZpZWQgaW5wdXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2lucHV0Rm9ybWF0XG4gICAqIEBjYXRlZ29yeSBJbnB1dFxuICAgKiBAYWxpYXNlcyB3aXRoSW5wdXRGb3JtYXQsZnJvbUZvcm1hdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IGlucHV0IGZvcm1hdFxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhJbnB1dEZvcm1hdCA9XG4gIHByb3RvLmlucHV0Rm9ybWF0ID1cbiAgcHJvdG8uZnJvbUZvcm1hdCA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIGlmICghdGhpcy5fY3VycmVudElucHV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGlucHV0IHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRJbnB1dC5vcHRpb25zKCctZicsIGZvcm1hdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU3BlY2lmeSBpbnB1dCBGUFMgZm9yIHRoZSBsYXN0IHNwZWNpZmllZCBpbnB1dFxuICAgKiAob25seSB2YWxpZCBmb3IgcmF3IHZpZGVvIGZvcm1hdHMpXG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNpbnB1dEZwc1xuICAgKiBAY2F0ZWdvcnkgSW5wdXRcbiAgICogQGFsaWFzZXMgd2l0aElucHV0RnBzLHdpdGhJbnB1dEZQUyx3aXRoRnBzSW5wdXQsd2l0aEZQU0lucHV0LGlucHV0RlBTLGlucHV0RnBzLGZwc0lucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmcHMgaW5wdXQgRlBTXG4gICAqIEByZXR1cm4gRmZtcGVnQ29tbWFuZFxuICAgKi9cbiAgcHJvdG8ud2l0aElucHV0RnBzID1cbiAgcHJvdG8ud2l0aElucHV0RlBTID1cbiAgcHJvdG8ud2l0aEZwc0lucHV0ID1cbiAgcHJvdG8ud2l0aEZQU0lucHV0ID1cbiAgcHJvdG8uaW5wdXRGUFMgPVxuICBwcm90by5pbnB1dEZwcyA9XG4gIHByb3RvLmZwc0lucHV0ID1cbiAgcHJvdG8uRlBTSW5wdXQgPSBmdW5jdGlvbihmcHMpIHtcbiAgICBpZiAoIXRoaXMuX2N1cnJlbnRJbnB1dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnB1dCBzcGVjaWZpZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50SW5wdXQub3B0aW9ucygnLXInLCBmcHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFVzZSBuYXRpdmUgZnJhbWVyYXRlIGZvciB0aGUgbGFzdCBzcGVjaWZpZWQgaW5wdXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI25hdGl2ZVxuICAgKiBAY2F0ZWdvcnkgSW5wdXRcbiAgICogQGFsaWFzZXMgbmF0aXZlRnJhbWVyYXRlLHdpdGhOYXRpdmVGcmFtZXJhdGVcbiAgICpcbiAgICogQHJldHVybiBGZm1tZWdDb21tYW5kXG4gICAqL1xuICBwcm90by5uYXRpdmVGcmFtZXJhdGUgPVxuICBwcm90by53aXRoTmF0aXZlRnJhbWVyYXRlID1cbiAgcHJvdG8ubmF0aXZlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLl9jdXJyZW50SW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXQgc3BlY2lmaWVkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudElucHV0Lm9wdGlvbnMoJy1yZScpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgaW5wdXQgc2VlayB0aW1lIGZvciB0aGUgbGFzdCBzcGVjaWZpZWQgaW5wdXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI3NlZWtJbnB1dFxuICAgKiBAY2F0ZWdvcnkgSW5wdXRcbiAgICogQGFsaWFzZXMgc2V0U3RhcnRUaW1lLHNlZWtUb1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHNlZWsgc2VlayB0aW1lIGluIHNlY29uZHMgb3IgYXMgYSAnW2hoOlttbTpdXXNzWy54eHhdJyBzdHJpbmdcbiAgICogQHJldHVybiBGZm1wZWdDb21tYW5kXG4gICAqL1xuICBwcm90by5zZXRTdGFydFRpbWUgPVxuICBwcm90by5zZWVrSW5wdXQgPSBmdW5jdGlvbihzZWVrKSB7XG4gICAgaWYgKCF0aGlzLl9jdXJyZW50SW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXQgc3BlY2lmaWVkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudElucHV0Lm9wdGlvbnMoJy1zcycsIHNlZWspO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogTG9vcCBvdmVyIHRoZSBsYXN0IHNwZWNpZmllZCBpbnB1dFxuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjbG9vcFxuICAgKiBAY2F0ZWdvcnkgSW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBbZHVyYXRpb25dIGxvb3AgZHVyYXRpb24gaW4gc2Vjb25kcyBvciBhcyBhICdbW2hoOl1tbTpdc3NbLnh4eF0nIHN0cmluZ1xuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLmxvb3AgPSBmdW5jdGlvbihkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5fY3VycmVudElucHV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGlucHV0IHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRJbnB1dC5vcHRpb25zKCctbG9vcCcsICcxJyk7XG5cbiAgICBpZiAodHlwZW9mIGR1cmF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5kdXJhdGlvbihkdXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/inputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/misc.js":
/*!********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/misc.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\n/*\n *! Miscellaneous methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Use preset\n   *\n   * @method FfmpegCommand#preset\n   * @category Miscellaneous\n   * @aliases usingPreset\n   *\n   * @param {String|Function} preset preset name or preset function\n   */\n  proto.usingPreset =\n  proto.preset = function(preset) {\n    if (typeof preset === 'function') {\n      preset(this);\n    } else {\n      try {\n        var modulePath = path.join(this.options.presets, preset);\n        var module = __webpack_require__(\"(rsc)/./node_modules/fluent-ffmpeg/lib/options sync recursive\")(modulePath);\n\n        if (typeof module.load === 'function') {\n          module.load(this);\n        } else {\n          throw new Error('preset ' + modulePath + ' has no load() function');\n        }\n      } catch (err) {\n        throw new Error('preset ' + modulePath + ' could not be loaded: ' + err.message);\n      }\n    }\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy9taXNjLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ2E7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLGtCQUFNOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHFCQUFxQixxRkFBUSxVQUFVLENBQUM7O0FBRXhDO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbGliL29wdGlvbnMvbWlzYy5qcz9jMTdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qanNoaW50IG5vZGU6dHJ1ZSovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vKlxuICohIE1pc2NlbGxhbmVvdXMgbWV0aG9kc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgLyoqXG4gICAqIFVzZSBwcmVzZXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI3ByZXNldFxuICAgKiBAY2F0ZWdvcnkgTWlzY2VsbGFuZW91c1xuICAgKiBAYWxpYXNlcyB1c2luZ1ByZXNldFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gcHJlc2V0IHByZXNldCBuYW1lIG9yIHByZXNldCBmdW5jdGlvblxuICAgKi9cbiAgcHJvdG8udXNpbmdQcmVzZXQgPVxuICBwcm90by5wcmVzZXQgPSBmdW5jdGlvbihwcmVzZXQpIHtcbiAgICBpZiAodHlwZW9mIHByZXNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJlc2V0KHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbW9kdWxlUGF0aCA9IHBhdGguam9pbih0aGlzLm9wdGlvbnMucHJlc2V0cywgcHJlc2V0KTtcbiAgICAgICAgdmFyIG1vZHVsZSA9IHJlcXVpcmUobW9kdWxlUGF0aCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUubG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG1vZHVsZS5sb2FkKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJlc2V0ICcgKyBtb2R1bGVQYXRoICsgJyBoYXMgbm8gbG9hZCgpIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXNldCAnICsgbW9kdWxlUGF0aCArICcgY291bGQgbm90IGJlIGxvYWRlZDogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/misc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/output.js":
/*!**********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/output.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n\n/*\n *! Output-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add output\n   *\n   * @method FfmpegCommand#output\n   * @category Output\n   * @aliases addOutput\n   *\n   * @param {String|Writable} target target file path or writable stream\n   * @param {Object} [pipeopts={}] pipe options (only applies to streams)\n   * @return FfmpegCommand\n   */\n  proto.addOutput =\n  proto.output = function(target, pipeopts) {\n    var isFile = false;\n\n    if (!target && this._currentOutput) {\n      // No target is only allowed when called from constructor\n      throw new Error('Invalid output');\n    }\n\n    if (target && typeof target !== 'string') {\n      if (!('writable' in target) || !(target.writable)) {\n        throw new Error('Invalid output');\n      }\n    } else if (typeof target === 'string') {\n      var protocol = target.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    if (target && !('target' in this._currentOutput)) {\n      // For backwards compatibility, set target for first output\n      this._currentOutput.target = target;\n      this._currentOutput.isFile = isFile;\n      this._currentOutput.pipeopts = pipeopts || {};\n    } else {\n      if (target && typeof target !== 'string') {\n        var hasOutputStream = this._outputs.some(function(output) {\n          return typeof output.target !== 'string';\n        });\n\n        if (hasOutputStream) {\n          throw new Error('Only one output stream is supported');\n        }\n      }\n\n      this._outputs.push(this._currentOutput = {\n        target: target,\n        isFile: isFile,\n        flags: {},\n        pipeopts: pipeopts || {}\n      });\n\n      var self = this;\n      ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n        self._currentOutput[key] = utils.args();\n      });\n\n      if (!target) {\n        // Call from constructor: remove target key\n        delete this._currentOutput.target;\n      }\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify output seek time\n   *\n   * @method FfmpegCommand#seek\n   * @category Input\n   * @aliases seekOutput\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.seekOutput =\n  proto.seek = function(seek) {\n    this._currentOutput.options('-ss', seek);\n    return this;\n  };\n\n\n  /**\n   * Set output duration\n   *\n   * @method FfmpegCommand#duration\n   * @category Output\n   * @aliases withDuration,setDuration\n   *\n   * @param {String|Number} duration duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.withDuration =\n  proto.setDuration =\n  proto.duration = function(duration) {\n    this._currentOutput.options('-t', duration);\n    return this;\n  };\n\n\n  /**\n   * Set output format\n   *\n   * @method FfmpegCommand#format\n   * @category Output\n   * @aliases toFormat,withOutputFormat,outputFormat\n   *\n   * @param {String} format output format name\n   * @return FfmpegCommand\n   */\n  proto.toFormat =\n  proto.withOutputFormat =\n  proto.outputFormat =\n  proto.format = function(format) {\n    this._currentOutput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Add stream mapping to output\n   *\n   * @method FfmpegCommand#map\n   * @category Output\n   *\n   * @param {String} spec stream specification string, with optional square brackets\n   * @return FfmpegCommand\n   */\n  proto.map = function(spec) {\n    this._currentOutput.options('-map', spec.replace(utils.streamRegexp, '[$1]'));\n    return this;\n  };\n\n\n  /**\n   * Run flvtool2/flvmeta on output\n   *\n   * @method FfmpegCommand#flvmeta\n   * @category Output\n   * @aliases updateFlvMetadata\n   *\n   * @return FfmpegCommand\n   */\n  proto.updateFlvMetadata =\n  proto.flvmeta = function() {\n    this._currentOutput.flags.flvmeta = true;\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy9vdXRwdXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsaUVBQVU7OztBQUc5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsUUFBUSxZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sMkNBQTJDLEdBQUc7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbGliL29wdGlvbnMvb3V0cHV0LmpzPzFiYWMiXSwic291cmNlc0NvbnRlbnQiOlsiLypqc2hpbnQgbm9kZTp0cnVlKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuXG4vKlxuICohIE91dHB1dC1yZWxhdGVkIG1ldGhvZHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHByb3RvKSB7XG4gIC8qKlxuICAgKiBBZGQgb3V0cHV0XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNvdXRwdXRcbiAgICogQGNhdGVnb3J5IE91dHB1dFxuICAgKiBAYWxpYXNlcyBhZGRPdXRwdXRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8V3JpdGFibGV9IHRhcmdldCB0YXJnZXQgZmlsZSBwYXRoIG9yIHdyaXRhYmxlIHN0cmVhbVxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BpcGVvcHRzPXt9XSBwaXBlIG9wdGlvbnMgKG9ubHkgYXBwbGllcyB0byBzdHJlYW1zKVxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLmFkZE91dHB1dCA9XG4gIHByb3RvLm91dHB1dCA9IGZ1bmN0aW9uKHRhcmdldCwgcGlwZW9wdHMpIHtcbiAgICB2YXIgaXNGaWxlID0gZmFsc2U7XG5cbiAgICBpZiAoIXRhcmdldCAmJiB0aGlzLl9jdXJyZW50T3V0cHV0KSB7XG4gICAgICAvLyBObyB0YXJnZXQgaXMgb25seSBhbGxvd2VkIHdoZW4gY2FsbGVkIGZyb20gY29uc3RydWN0b3JcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvdXRwdXQnKTtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoISgnd3JpdGFibGUnIGluIHRhcmdldCkgfHwgISh0YXJnZXQud3JpdGFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvdXRwdXQnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJvdG9jb2wgPSB0YXJnZXQubWF0Y2goL14oW2Etel17Mix9KTovaSk7XG4gICAgICBpc0ZpbGUgPSAhcHJvdG9jb2wgfHwgcHJvdG9jb2xbMF0gPT09ICdmaWxlJztcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ICYmICEoJ3RhcmdldCcgaW4gdGhpcy5fY3VycmVudE91dHB1dCkpIHtcbiAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgc2V0IHRhcmdldCBmb3IgZmlyc3Qgb3V0cHV0XG4gICAgICB0aGlzLl9jdXJyZW50T3V0cHV0LnRhcmdldCA9IHRhcmdldDtcbiAgICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuaXNGaWxlID0gaXNGaWxlO1xuICAgICAgdGhpcy5fY3VycmVudE91dHB1dC5waXBlb3B0cyA9IHBpcGVvcHRzIHx8IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBoYXNPdXRwdXRTdHJlYW0gPSB0aGlzLl9vdXRwdXRzLnNvbWUoZnVuY3Rpb24ob3V0cHV0KSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQudGFyZ2V0ICE9PSAnc3RyaW5nJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGhhc091dHB1dFN0cmVhbSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb3V0cHV0IHN0cmVhbSBpcyBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vdXRwdXRzLnB1c2godGhpcy5fY3VycmVudE91dHB1dCA9IHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgIGlzRmlsZTogaXNGaWxlLFxuICAgICAgICBmbGFnczoge30sXG4gICAgICAgIHBpcGVvcHRzOiBwaXBlb3B0cyB8fCB7fVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIFsnYXVkaW8nLCAnYXVkaW9GaWx0ZXJzJywgJ3ZpZGVvJywgJ3ZpZGVvRmlsdGVycycsICdzaXplRmlsdGVycycsICdvcHRpb25zJ10uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgc2VsZi5fY3VycmVudE91dHB1dFtrZXldID0gdXRpbHMuYXJncygpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIC8vIENhbGwgZnJvbSBjb25zdHJ1Y3RvcjogcmVtb3ZlIHRhcmdldCBrZXlcbiAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnJlbnRPdXRwdXQudGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgb3V0cHV0IHNlZWsgdGltZVxuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjc2Vla1xuICAgKiBAY2F0ZWdvcnkgSW5wdXRcbiAgICogQGFsaWFzZXMgc2Vla091dHB1dFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHNlZWsgc2VlayB0aW1lIGluIHNlY29uZHMgb3IgYXMgYSAnW2hoOlttbTpdXXNzWy54eHhdJyBzdHJpbmdcbiAgICogQHJldHVybiBGZm1wZWdDb21tYW5kXG4gICAqL1xuICBwcm90by5zZWVrT3V0cHV0ID1cbiAgcHJvdG8uc2VlayA9IGZ1bmN0aW9uKHNlZWspIHtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0Lm9wdGlvbnMoJy1zcycsIHNlZWspO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNldCBvdXRwdXQgZHVyYXRpb25cbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2R1cmF0aW9uXG4gICAqIEBjYXRlZ29yeSBPdXRwdXRcbiAgICogQGFsaWFzZXMgd2l0aER1cmF0aW9uLHNldER1cmF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kcyBvciBhcyBhICdbW2hoOl1tbTpdc3NbLnh4eF0nIHN0cmluZ1xuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhEdXJhdGlvbiA9XG4gIHByb3RvLnNldER1cmF0aW9uID1cbiAgcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbihkdXJhdGlvbikge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQub3B0aW9ucygnLXQnLCBkdXJhdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU2V0IG91dHB1dCBmb3JtYXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2Zvcm1hdFxuICAgKiBAY2F0ZWdvcnkgT3V0cHV0XG4gICAqIEBhbGlhc2VzIHRvRm9ybWF0LHdpdGhPdXRwdXRGb3JtYXQsb3V0cHV0Rm9ybWF0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgb3V0cHV0IGZvcm1hdCBuYW1lXG4gICAqIEByZXR1cm4gRmZtcGVnQ29tbWFuZFxuICAgKi9cbiAgcHJvdG8udG9Gb3JtYXQgPVxuICBwcm90by53aXRoT3V0cHV0Rm9ybWF0ID1cbiAgcHJvdG8ub3V0cHV0Rm9ybWF0ID1cbiAgcHJvdG8uZm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgdGhpcy5fY3VycmVudE91dHB1dC5vcHRpb25zKCctZicsIGZvcm1hdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogQWRkIHN0cmVhbSBtYXBwaW5nIHRvIG91dHB1dFxuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjbWFwXG4gICAqIEBjYXRlZ29yeSBPdXRwdXRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNwZWMgc3RyZWFtIHNwZWNpZmljYXRpb24gc3RyaW5nLCB3aXRoIG9wdGlvbmFsIHNxdWFyZSBicmFja2V0c1xuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLm1hcCA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0Lm9wdGlvbnMoJy1tYXAnLCBzcGVjLnJlcGxhY2UodXRpbHMuc3RyZWFtUmVnZXhwLCAnWyQxXScpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBSdW4gZmx2dG9vbDIvZmx2bWV0YSBvbiBvdXRwdXRcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI2Zsdm1ldGFcbiAgICogQGNhdGVnb3J5IE91dHB1dFxuICAgKiBAYWxpYXNlcyB1cGRhdGVGbHZNZXRhZGF0YVxuICAgKlxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLnVwZGF0ZUZsdk1ldGFkYXRhID1cbiAgcHJvdG8uZmx2bWV0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQuZmxhZ3MuZmx2bWV0YSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/output.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/video.js":
/*!*********************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/video.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n\n/*\n *! Video-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo =\n  proto.noVideo = function() {\n    this._currentOutput.video.clear();\n    this._currentOutput.videoFilters.clear();\n    this._currentOutput.video('-vn');\n\n    return this;\n  };\n\n\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n  proto.withVideoCodec =\n  proto.videoCodec = function(codec) {\n    this._currentOutput.video('-vcodec', codec);\n    return this;\n  };\n\n\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n  proto.withVideoBitrate =\n  proto.videoBitrate = function(bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n\n    this._currentOutput.video('-b:v', bitrate);\n    if (constant) {\n      this._currentOutput.video(\n        '-maxrate', bitrate,\n        '-minrate', bitrate,\n        '-bufsize', '3M'\n      );\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withVideoFilter =\n  proto.withVideoFilters =\n  proto.videoFilter =\n  proto.videoFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n\n\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n  proto.withOutputFps =\n  proto.withOutputFPS =\n  proto.withFpsOutput =\n  proto.withFPSOutput =\n  proto.withFps =\n  proto.withFPS =\n  proto.outputFPS =\n  proto.outputFps =\n  proto.fpsOutput =\n  proto.FPSOutput =\n  proto.fps =\n  proto.FPS = function(fps) {\n    this._currentOutput.video('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n  proto.takeFrames =\n  proto.withFrames =\n  proto.frames = function(frames) {\n    this._currentOutput.video('-vframes', frames);\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9saWIvb3B0aW9ucy92aWRlby5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxpRUFBVTs7O0FBRzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNkJBQTZCO0FBQzFDO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbGliL29wdGlvbnMvdmlkZW8uanM/ZDZkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBub2RlOnRydWUqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5cbi8qXG4gKiEgVmlkZW8tcmVsYXRlZCBtZXRob2RzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwcm90bykge1xuICAvKipcbiAgICogRGlzYWJsZSB2aWRlbyBpbiB0aGUgb3V0cHV0XG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCNub1ZpZGVvXG4gICAqIEBjYXRlZ29yeSBWaWRlb1xuICAgKiBAYWxpYXNlcyB3aXRoTm9WaWRlb1xuICAgKlxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhOb1ZpZGVvID1cbiAgcHJvdG8ubm9WaWRlbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQudmlkZW8uY2xlYXIoKTtcbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LnZpZGVvRmlsdGVycy5jbGVhcigpO1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQudmlkZW8oJy12bicpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU3BlY2lmeSB2aWRlbyBjb2RlY1xuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjdmlkZW9Db2RlY1xuICAgKiBAY2F0ZWdvcnkgVmlkZW9cbiAgICogQGFsaWFzZXMgd2l0aFZpZGVvQ29kZWNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvZGVjIHZpZGVvIGNvZGVjIG5hbWVcbiAgICogQHJldHVybiBGZm1wZWdDb21tYW5kXG4gICAqL1xuICBwcm90by53aXRoVmlkZW9Db2RlYyA9XG4gIHByb3RvLnZpZGVvQ29kZWMgPSBmdW5jdGlvbihjb2RlYykge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQudmlkZW8oJy12Y29kZWMnLCBjb2RlYyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogU3BlY2lmeSB2aWRlbyBiaXRyYXRlXG4gICAqXG4gICAqIEBtZXRob2QgRmZtcGVnQ29tbWFuZCN2aWRlb0JpdHJhdGVcbiAgICogQGNhdGVnb3J5IFZpZGVvXG4gICAqIEBhbGlhc2VzIHdpdGhWaWRlb0JpdHJhdGVcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBiaXRyYXRlIHZpZGVvIGJpdHJhdGUgaW4ga2JwcyAod2l0aCBhbiBvcHRpb25hbCAnaycgc3VmZml4KVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25zdGFudD1mYWxzZV0gZW5mb3JjZSBjb25zdGFudCBiaXRyYXRlXG4gICAqIEByZXR1cm4gRmZtcGVnQ29tbWFuZFxuICAgKi9cbiAgcHJvdG8ud2l0aFZpZGVvQml0cmF0ZSA9XG4gIHByb3RvLnZpZGVvQml0cmF0ZSA9IGZ1bmN0aW9uKGJpdHJhdGUsIGNvbnN0YW50KSB7XG4gICAgYml0cmF0ZSA9ICgnJyArIGJpdHJhdGUpLnJlcGxhY2UoL2s/JC8sICdrJyk7XG5cbiAgICB0aGlzLl9jdXJyZW50T3V0cHV0LnZpZGVvKCctYjp2JywgYml0cmF0ZSk7XG4gICAgaWYgKGNvbnN0YW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50T3V0cHV0LnZpZGVvKFxuICAgICAgICAnLW1heHJhdGUnLCBiaXRyYXRlLFxuICAgICAgICAnLW1pbnJhdGUnLCBiaXRyYXRlLFxuICAgICAgICAnLWJ1ZnNpemUnLCAnM00nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgY3VzdG9tIHZpZGVvIGZpbHRlcihzKVxuICAgKlxuICAgKiBDYW4gYmUgY2FsbGVkIGJvdGggd2l0aCBvbmUgb3IgbWFueSBmaWx0ZXJzLCBvciBhIGZpbHRlciBhcnJheS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29tbWFuZC52aWRlb0ZpbHRlcnMoJ2ZpbHRlcjEnKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29tbWFuZC52aWRlb0ZpbHRlcnMoJ2ZpbHRlcjEnLCAnZmlsdGVyMj1wYXJhbTE9dmFsdWUxOnBhcmFtMj12YWx1ZTInKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29tbWFuZC52aWRlb0ZpbHRlcnMoWydmaWx0ZXIxJywgJ2ZpbHRlcjInXSk7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbW1hbmQudmlkZW9GaWx0ZXJzKFtcbiAgICogICB7XG4gICAqICAgICBmaWx0ZXI6ICdmaWx0ZXIxJ1xuICAgKiAgIH0sXG4gICAqICAge1xuICAgKiAgICAgZmlsdGVyOiAnZmlsdGVyMicsXG4gICAqICAgICBvcHRpb25zOiAncGFyYW09dmFsdWU6cGFyYW09dmFsdWUnXG4gICAqICAgfVxuICAgKiBdKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29tbWFuZC52aWRlb0ZpbHRlcnMoXG4gICAqICAge1xuICAgKiAgICAgZmlsdGVyOiAnZmlsdGVyMScsXG4gICAqICAgICBvcHRpb25zOiBbJ3ZhbHVlMScsICd2YWx1ZTInXVxuICAgKiAgIH0sXG4gICAqICAge1xuICAgKiAgICAgZmlsdGVyOiAnZmlsdGVyMicsXG4gICAqICAgICBvcHRpb25zOiB7IHBhcmFtMTogJ3ZhbHVlMScsIHBhcmFtMjogJ3ZhbHVlMicgfVxuICAgKiAgIH1cbiAgICogKTtcbiAgICpcbiAgICogQG1ldGhvZCBGZm1wZWdDb21tYW5kI3ZpZGVvRmlsdGVyc1xuICAgKiBAY2F0ZWdvcnkgVmlkZW9cbiAgICogQGFsaWFzZXMgd2l0aFZpZGVvRmlsdGVyLHdpdGhWaWRlb0ZpbHRlcnMsdmlkZW9GaWx0ZXJcbiAgICpcbiAgICogQHBhcmFtIHsuLi5TdHJpbmd8U3RyaW5nW118T2JqZWN0W119IGZpbHRlcnMgdmlkZW8gZmlsdGVyIHN0cmluZ3MsIHN0cmluZyBhcnJheSBvclxuICAgKiAgIGZpbHRlciBzcGVjaWZpY2F0aW9uIGFycmF5LCBlYWNoIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsdGVycy5maWx0ZXIgZmlsdGVyIG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd8U3RyaW5nW118T2JqZWN0fSBbZmlsdGVycy5vcHRpb25zXSBmaWx0ZXIgb3B0aW9uIHN0cmluZywgYXJyYXksIG9yIG9iamVjdFxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhWaWRlb0ZpbHRlciA9XG4gIHByb3RvLndpdGhWaWRlb0ZpbHRlcnMgPVxuICBwcm90by52aWRlb0ZpbHRlciA9XG4gIHByb3RvLnZpZGVvRmlsdGVycyA9IGZ1bmN0aW9uKGZpbHRlcnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZpbHRlcnMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbHRlcnMpKSB7XG4gICAgICBmaWx0ZXJzID0gW2ZpbHRlcnNdO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQudmlkZW9GaWx0ZXJzKHV0aWxzLm1ha2VGaWx0ZXJTdHJpbmdzKGZpbHRlcnMpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgb3V0cHV0IEZQU1xuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjZnBzXG4gICAqIEBjYXRlZ29yeSBWaWRlb1xuICAgKiBAYWxpYXNlcyB3aXRoT3V0cHV0RnBzLHdpdGhPdXRwdXRGUFMsd2l0aEZwc091dHB1dCx3aXRoRlBTT3V0cHV0LHdpdGhGcHMsd2l0aEZQUyxvdXRwdXRGUFMsb3V0cHV0RnBzLGZwc091dHB1dCxGUFNPdXRwdXQsRlBTXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmcHMgb3V0cHV0IEZQU1xuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLndpdGhPdXRwdXRGcHMgPVxuICBwcm90by53aXRoT3V0cHV0RlBTID1cbiAgcHJvdG8ud2l0aEZwc091dHB1dCA9XG4gIHByb3RvLndpdGhGUFNPdXRwdXQgPVxuICBwcm90by53aXRoRnBzID1cbiAgcHJvdG8ud2l0aEZQUyA9XG4gIHByb3RvLm91dHB1dEZQUyA9XG4gIHByb3RvLm91dHB1dEZwcyA9XG4gIHByb3RvLmZwc091dHB1dCA9XG4gIHByb3RvLkZQU091dHB1dCA9XG4gIHByb3RvLmZwcyA9XG4gIHByb3RvLkZQUyA9IGZ1bmN0aW9uKGZwcykge1xuICAgIHRoaXMuX2N1cnJlbnRPdXRwdXQudmlkZW8oJy1yJywgZnBzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBPbmx5IHRyYW5zY29kZSBhIGNlcnRhaW4gbnVtYmVyIG9mIGZyYW1lc1xuICAgKlxuICAgKiBAbWV0aG9kIEZmbXBlZ0NvbW1hbmQjZnJhbWVzXG4gICAqIEBjYXRlZ29yeSBWaWRlb1xuICAgKiBAYWxpYXNlcyB0YWtlRnJhbWVzLHdpdGhGcmFtZXNcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGZyYW1lcyBmcmFtZSBjb3VudFxuICAgKiBAcmV0dXJuIEZmbXBlZ0NvbW1hbmRcbiAgICovXG4gIHByb3RvLnRha2VGcmFtZXMgPVxuICBwcm90by53aXRoRnJhbWVzID1cbiAgcHJvdG8uZnJhbWVzID0gZnVuY3Rpb24oZnJhbWVzKSB7XG4gICAgdGhpcy5fY3VycmVudE91dHB1dC52aWRlbygnLXZmcmFtZXMnLCBmcmFtZXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/video.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/options/videosize.js":
/*!*************************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/options/videosize.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("/*jshint node:true*/\n\n\n/*\n *! Size helpers\n */\n\n\n/**\n * Return filters to pad video to width*height,\n *\n * @param {Number} width output width\n * @param {Number} height output height\n * @param {Number} aspect video aspect ratio (without padding)\n * @param {Number} color padding color\n * @return scale/pad filters\n * @private\n */\nfunction getScalePadFilters(width, height, aspect, color) {\n  /*\n    let a be the input aspect ratio, A be the requested aspect ratio\n\n    if a > A, padding is done on top and bottom\n    if a < A, padding is done on left and right\n   */\n\n  return [\n    /*\n      In both cases, we first have to scale the input to match the requested size.\n      When using computed width/height, we truncate them to multiples of 2\n     */\n    {\n      filter: 'scale',\n      options: {\n        w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',\n        h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'\n      }\n    },\n\n    /*\n      Then we pad the scaled input to match the target size\n      (here iw and ih refer to the padding input, i.e the scaled output)\n     */\n\n    {\n      filter: 'pad',\n      options: {\n        w: width,\n        h: height,\n        x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',\n        y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',\n        color: color\n      }\n    }\n  ];\n}\n\n\n/**\n * Recompute size filters\n *\n * @param {Object} output\n * @param {String} key newly-added parameter name ('size', 'aspect' or 'pad')\n * @param {String} value newly-added parameter value\n * @return filter string array\n * @private\n */\nfunction createSizeFilters(output, key, value) {\n  // Store parameters\n  var data = output.sizeData = output.sizeData || {};\n  data[key] = value;\n\n  if (!('size' in data)) {\n    // No size requested, keep original size\n    return [];\n  }\n\n  // Try to match the different size string formats\n  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);\n  var fixedWidth = data.size.match(/([0-9]+)x\\?/);\n  var fixedHeight = data.size.match(/\\?x([0-9]+)/);\n  var percentRatio = data.size.match(/\\b([0-9]{1,3})%/);\n  var width, height, aspect;\n\n  if (percentRatio) {\n    var ratio = Number(percentRatio[1]) / 100;\n    return [{\n      filter: 'scale',\n      options: {\n        w: 'trunc(iw*' + ratio + '/2)*2',\n        h: 'trunc(ih*' + ratio + '/2)*2'\n      }\n    }];\n  } else if (fixedSize) {\n    // Round target size to multiples of 2\n    width = Math.round(Number(fixedSize[1]) / 2) * 2;\n    height = Math.round(Number(fixedSize[2]) / 2) * 2;\n\n    aspect = width / height;\n\n    if (data.pad) {\n      return getScalePadFilters(width, height, aspect, data.pad);\n    } else {\n      // No autopad requested, rescale to target size\n      return [{ filter: 'scale', options: { w: width, h: height }}];\n    }\n  } else if (fixedWidth || fixedHeight) {\n    if ('aspect' in data) {\n      // Specified aspect ratio\n      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);\n      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);\n\n      // Round to multiples of 2\n      width = Math.round(width / 2) * 2;\n      height = Math.round(height / 2) * 2;\n\n      if (data.pad) {\n        return getScalePadFilters(width, height, data.aspect, data.pad);\n      } else {\n        // No autopad requested, rescale to target size\n        return [{ filter: 'scale', options: { w: width, h: height }}];\n      }\n    } else {\n      // Keep input aspect ratio\n\n      if (fixedWidth) {\n        return [{\n          filter: 'scale',\n          options: {\n            w: Math.round(Number(fixedWidth[1]) / 2) * 2,\n            h: 'trunc(ow/a/2)*2'\n          }\n        }];\n      } else {\n        return [{\n          filter: 'scale',\n          options: {\n            w: 'trunc(oh*a/2)*2',\n            h: Math.round(Number(fixedHeight[1]) / 2) * 2\n          }\n        }];\n      }\n    }\n  } else {\n    throw new Error('Invalid size specified: ' + data.size);\n  }\n}\n\n\n/*\n *! Video size-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Keep display aspect ratio\n   *\n   * This method is useful when converting an input with non-square pixels to an output format\n   * that does not support non-square pixels.  It rescales the input so that the display aspect\n   * ratio is the same.\n   *\n   * @method FfmpegCommand#keepDAR\n   * @category Video size\n   * @aliases keepPixelAspect,keepDisplayAspect,keepDisplayAspectRatio\n   *\n   * @return FfmpegCommand\n   */\n  proto.keepPixelAspect = // Only for compatibility, this is not about keeping _pixel_ aspect ratio\n  proto.keepDisplayAspect =\n  proto.keepDisplayAspectRatio =\n  proto.keepDAR = function() {\n    return this.videoFilters([\n      {\n        filter: 'scale',\n        options: {\n          w: 'if(gt(sar,1),iw*sar,iw)',\n          h: 'if(lt(sar,1),ih/sar,ih)'\n        }\n      },\n      {\n        filter: 'setsar',\n        options: '1'\n      }\n    ]);\n  };\n\n\n  /**\n   * Set output size\n   *\n   * The 'size' parameter can have one of 4 forms:\n   * - 'X%': rescale to xx % of the original size\n   * - 'WxH': specify width and height\n   * - 'Wx?': specify width and compute height from input aspect ratio\n   * - '?xH': specify height and compute width from input aspect ratio\n   *\n   * Note: both dimensions will be truncated to multiples of 2.\n   *\n   * @method FfmpegCommand#size\n   * @category Video size\n   * @aliases withSize,setSize\n   *\n   * @param {String} size size string, eg. '33%', '320x240', '320x?', '?x240'\n   * @return FfmpegCommand\n   */\n  proto.withSize =\n  proto.setSize =\n  proto.size = function(size) {\n    var filters = createSizeFilters(this._currentOutput, 'size', size);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Set output aspect ratio\n   *\n   * @method FfmpegCommand#aspect\n   * @category Video size\n   * @aliases withAspect,withAspectRatio,setAspect,setAspectRatio,aspectRatio\n   *\n   * @param {String|Number} aspect aspect ratio (number or 'X:Y' string)\n   * @return FfmpegCommand\n   */\n  proto.withAspect =\n  proto.withAspectRatio =\n  proto.setAspect =\n  proto.setAspectRatio =\n  proto.aspect =\n  proto.aspectRatio = function(aspect) {\n    var a = Number(aspect);\n    if (isNaN(a)) {\n      var match = aspect.match(/^(\\d+):(\\d+)$/);\n      if (match) {\n        a = Number(match[1]) / Number(match[2]);\n      } else {\n        throw new Error('Invalid aspect ratio: ' + aspect);\n      }\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'aspect', a);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Enable auto-padding the output\n   *\n   * @method FfmpegCommand#autopad\n   * @category Video size\n   * @aliases applyAutopadding,applyAutoPadding,applyAutopad,applyAutoPad,withAutopadding,withAutoPadding,withAutopad,withAutoPad,autoPad\n   *\n   * @param {Boolean} [pad=true] enable/disable auto-padding\n   * @param {String} [color='black'] pad color\n   */\n  proto.applyAutopadding =\n  proto.applyAutoPadding =\n  proto.applyAutopad =\n  proto.applyAutoPad =\n  proto.withAutopadding =\n  proto.withAutoPadding =\n  proto.withAutopad =\n  proto.withAutoPad =\n  proto.autoPad =\n  proto.autopad = function(pad, color) {\n    // Allow autopad(color)\n    if (typeof pad === 'string') {\n      color = pad;\n      pad = true;\n    }\n\n    // Allow autopad() and autopad(undefined, color)\n    if (typeof pad === 'undefined') {\n      pad = true;\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'pad', pad ? color || 'black' : false);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/options/videosize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/processor.js":
/*!*****************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/processor.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/lib/async.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n/*\n *! Processor methods\n */\n\n\n/**\n * Run ffprobe asynchronously and store data in command\n *\n * @param {FfmpegCommand} command\n * @private\n */\nfunction runFfprobe(command) {\n  const inputProbeIndex = 0;\n  if (command._inputs[inputProbeIndex].isStream) {\n    // Don't probe input streams as this will consume them\n    return;\n  }\n  command.ffprobe(inputProbeIndex, function(err, data) {\n    command._ffprobeData = data;\n  });\n}\n\n\nmodule.exports = function(proto) {\n  /**\n   * Emitted just after ffmpeg has been spawned.\n   *\n   * @event FfmpegCommand#start\n   * @param {String} command ffmpeg command line\n   */\n\n  /**\n   * Emitted when ffmpeg reports progress information\n   *\n   * @event FfmpegCommand#progress\n   * @param {Object} progress progress object\n   * @param {Number} progress.frames number of frames transcoded\n   * @param {Number} progress.currentFps current processing speed in frames per second\n   * @param {Number} progress.currentKbps current output generation speed in kilobytes per second\n   * @param {Number} progress.targetSize current output file size\n   * @param {String} progress.timemark current video timemark\n   * @param {Number} [progress.percent] processing progress (may not be available depending on input)\n   */\n\n  /**\n   * Emitted when ffmpeg outputs to stderr\n   *\n   * @event FfmpegCommand#stderr\n   * @param {String} line stderr output line\n   */\n\n  /**\n   * Emitted when ffmpeg reports input codec data\n   *\n   * @event FfmpegCommand#codecData\n   * @param {Object} codecData codec data object\n   * @param {String} codecData.format input format name\n   * @param {String} codecData.audio input audio codec name\n   * @param {String} codecData.audio_details input audio codec parameters\n   * @param {String} codecData.video input video codec name\n   * @param {String} codecData.video_details input video codec parameters\n   */\n\n  /**\n   * Emitted when an error happens when preparing or running a command\n   *\n   * @event FfmpegCommand#error\n   * @param {Error} error error object, with optional properties 'inputStreamError' / 'outputStreamError' for errors on their respective streams\n   * @param {String|null} stdout ffmpeg stdout, unless outputting to a stream\n   * @param {String|null} stderr ffmpeg stderr\n   */\n\n  /**\n   * Emitted when a command finishes processing\n   *\n   * @event FfmpegCommand#end\n   * @param {Array|String|null} [filenames|stdout] generated filenames when taking screenshots, ffmpeg stdout when not outputting to a stream, null otherwise\n   * @param {String|null} stderr ffmpeg stderr\n   */\n\n\n  /**\n   * Spawn an ffmpeg process\n   *\n   * The 'options' argument may contain the following keys:\n   * - 'niceness': specify process niceness, ignored on Windows (default: 0)\n   * - `cwd`: change working directory\n   * - 'captureStdout': capture stdout and pass it to 'endCB' as its 2nd argument (default: false)\n   * - 'stdoutLines': override command limit (default: use command limit)\n   *\n   * The 'processCB' callback, if present, is called as soon as the process is created and\n   * receives a nodejs ChildProcess object.  It may not be called at all if an error happens\n   * before spawning the process.\n   *\n   * The 'endCB' callback is called either when an error occurs or when the ffmpeg process finishes.\n   *\n   * @method FfmpegCommand#_spawnFfmpeg\n   * @param {Array} args ffmpeg command line argument list\n   * @param {Object} [options] spawn options (see above)\n   * @param {Function} [processCB] callback called with process object and stdout/stderr ring buffers when process has been created\n   * @param {Function} endCB callback called with error (if applicable) and stdout/stderr ring buffers when process finished\n   * @private\n   */\n  proto._spawnFfmpeg = function(args, options, processCB, endCB) {\n    // Enable omitting options\n    if (typeof options === 'function') {\n      endCB = processCB;\n      processCB = options;\n      options = {};\n    }\n\n    // Enable omitting processCB\n    if (typeof endCB === 'undefined') {\n      endCB = processCB;\n      processCB = function() {};\n    }\n\n    var maxLines = 'stdoutLines' in options ? options.stdoutLines : this.options.stdoutLines;\n\n    // Find ffmpeg\n    this._getFfmpegPath(function(err, command) {\n      if (err) {\n        return endCB(err);\n      } else if (!command || command.length === 0) {\n        return endCB(new Error('Cannot find ffmpeg'));\n      }\n\n      // Apply niceness\n      if (options.niceness && options.niceness !== 0 && !utils.isWindows) {\n        args.unshift('-n', options.niceness, command);\n        command = 'nice';\n      }\n\n      var stdoutRing = utils.linesRing(maxLines);\n      var stdoutClosed = false;\n\n      var stderrRing = utils.linesRing(maxLines);\n      var stderrClosed = false;\n\n      // Spawn process\n      var ffmpegProc = spawn(command, args, options);\n\n      if (ffmpegProc.stderr) {\n        ffmpegProc.stderr.setEncoding('utf8');\n      }\n\n      ffmpegProc.on('error', function(err) {\n        endCB(err);\n      });\n\n      // Ensure we wait for captured streams to end before calling endCB\n      var exitError = null;\n      function handleExit(err) {\n        if (err) {\n          exitError = err;\n        }\n\n        if (processExited && (stdoutClosed || !options.captureStdout) && stderrClosed) {\n          endCB(exitError, stdoutRing, stderrRing);\n        }\n      }\n\n      // Handle process exit\n      var processExited = false;\n      ffmpegProc.on('exit', function(code, signal) {\n        processExited = true;\n\n        if (signal) {\n          handleExit(new Error('ffmpeg was killed with signal ' + signal));\n        } else if (code) {\n          handleExit(new Error('ffmpeg exited with code ' + code));\n        } else {\n          handleExit();\n        }\n      });\n\n      // Capture stdout if specified\n      if (options.captureStdout) {\n        ffmpegProc.stdout.on('data', function(data) {\n          stdoutRing.append(data);\n        });\n\n        ffmpegProc.stdout.on('close', function() {\n          stdoutRing.close();\n          stdoutClosed = true;\n          handleExit();\n        });\n      }\n\n      // Capture stderr if specified\n      ffmpegProc.stderr.on('data', function(data) {\n        stderrRing.append(data);\n      });\n\n      ffmpegProc.stderr.on('close', function() {\n        stderrRing.close();\n        stderrClosed = true;\n        handleExit();\n      });\n\n      // Call process callback\n      processCB(ffmpegProc, stdoutRing, stderrRing);\n    });\n  };\n\n\n  /**\n   * Build the argument list for an ffmpeg command\n   *\n   * @method FfmpegCommand#_getArguments\n   * @return argument list\n   * @private\n   */\n  proto._getArguments = function() {\n    var complexFilters = this._complexFilters.get();\n\n    var fileOutput = this._outputs.some(function(output) {\n      return output.isFile;\n    });\n\n    return [].concat(\n        // Inputs and input options\n        this._inputs.reduce(function(args, input) {\n          var source = (typeof input.source === 'string') ? input.source : 'pipe:0';\n\n          // For each input, add input options, then '-i <source>'\n          return args.concat(\n            input.options.get(),\n            ['-i', source]\n          );\n        }, []),\n\n        // Global options\n        this._global.get(),\n\n        // Overwrite if we have file outputs\n        fileOutput ? ['-y'] : [],\n\n        // Complex filters\n        complexFilters,\n\n        // Outputs, filters and output options\n        this._outputs.reduce(function(args, output) {\n          var sizeFilters = utils.makeFilterStrings(output.sizeFilters.get());\n          var audioFilters = output.audioFilters.get();\n          var videoFilters = output.videoFilters.get().concat(sizeFilters);\n          var outputArg;\n\n          if (!output.target) {\n            outputArg = [];\n          } else if (typeof output.target === 'string') {\n            outputArg = [output.target];\n          } else {\n            outputArg = ['pipe:1'];\n          }\n\n          return args.concat(\n            output.audio.get(),\n            audioFilters.length ? ['-filter:a', audioFilters.join(',')] : [],\n            output.video.get(),\n            videoFilters.length ? ['-filter:v', videoFilters.join(',')] : [],\n            output.options.get(),\n            outputArg\n          );\n        }, [])\n      );\n  };\n\n\n  /**\n   * Prepare execution of an ffmpeg command\n   *\n   * Checks prerequisites for the execution of the command (codec/format availability, flvtool...),\n   * then builds the argument list for ffmpeg and pass them to 'callback'.\n   *\n   * @method FfmpegCommand#_prepare\n   * @param {Function} callback callback with signature (err, args)\n   * @param {Boolean} [readMetadata=false] read metadata before processing\n   * @private\n   */\n  proto._prepare = function(callback, readMetadata) {\n    var self = this;\n\n    async.waterfall([\n      // Check codecs and formats\n      function(cb) {\n        self._checkCapabilities(cb);\n      },\n\n      // Read metadata if required\n      function(cb) {\n        if (!readMetadata) {\n          return cb();\n        }\n\n        self.ffprobe(0, function(err, data) {\n          if (!err) {\n            self._ffprobeData = data;\n          }\n\n          cb();\n        });\n      },\n\n      // Check for flvtool2/flvmeta if necessary\n      function(cb) {\n        var flvmeta = self._outputs.some(function(output) {\n          // Remove flvmeta flag on non-file output\n          if (output.flags.flvmeta && !output.isFile) {\n            self.logger.warn('Updating flv metadata is only supported for files');\n            output.flags.flvmeta = false;\n          }\n\n          return output.flags.flvmeta;\n        });\n\n        if (flvmeta) {\n          self._getFlvtoolPath(function(err) {\n            cb(err);\n          });\n        } else {\n          cb();\n        }\n      },\n\n      // Build argument list\n      function(cb) {\n        var args;\n        try {\n          args = self._getArguments();\n        } catch(e) {\n          return cb(e);\n        }\n\n        cb(null, args);\n      },\n\n      // Add \"-strict experimental\" option where needed\n      function(args, cb) {\n        self.availableEncoders(function(err, encoders) {\n          for (var i = 0; i < args.length; i++) {\n            if (args[i] === '-acodec' || args[i] === '-vcodec') {\n              i++;\n\n              if ((args[i] in encoders) && encoders[args[i]].experimental) {\n                args.splice(i + 1, 0, '-strict', 'experimental');\n                i += 2;\n              }\n            }\n          }\n\n          cb(null, args);\n        });\n      }\n    ], callback);\n\n    if (!readMetadata) {\n      // Read metadata as soon as 'progress' listeners are added\n\n      if (this.listeners('progress').length > 0) {\n        // Read metadata in parallel\n        runFfprobe(this);\n      } else {\n        // Read metadata as soon as the first 'progress' listener is added\n        this.once('newListener', function(event) {\n          if (event === 'progress') {\n            runFfprobe(this);\n          }\n        });\n      }\n    }\n  };\n\n\n  /**\n   * Run ffmpeg command\n   *\n   * @method FfmpegCommand#run\n   * @category Processing\n   * @aliases exec,execute\n   */\n  proto.exec =\n  proto.execute =\n  proto.run = function() {\n    var self = this;\n\n    // Check if at least one output is present\n    var outputPresent = this._outputs.some(function(output) {\n      return 'target' in output;\n    });\n\n    if (!outputPresent) {\n      throw new Error('No output specified');\n    }\n\n    // Get output stream if any\n    var outputStream = this._outputs.filter(function(output) {\n      return typeof output.target !== 'string';\n    })[0];\n\n    // Get input stream if any\n    var inputStream = this._inputs.filter(function(input) {\n      return typeof input.source !== 'string';\n    })[0];\n\n    // Ensure we send 'end' or 'error' only once\n    var ended = false;\n    function emitEnd(err, stdout, stderr) {\n      if (!ended) {\n        ended = true;\n\n        if (err) {\n          self.emit('error', err, stdout, stderr);\n        } else {\n          self.emit('end', stdout, stderr);\n        }\n      }\n    }\n\n    self._prepare(function(err, args) {\n      if (err) {\n        return emitEnd(err);\n      }\n\n      // Run ffmpeg\n      self._spawnFfmpeg(\n        args,\n        {\n          captureStdout: !outputStream,\n          niceness: self.options.niceness,\n          cwd: self.options.cwd,\n          windowsHide: true\n        }, \n\n        function processCB(ffmpegProc, stdoutRing, stderrRing) {\n          self.ffmpegProc = ffmpegProc;\n          self.emit('start', 'ffmpeg ' + args.join(' '));\n\n          // Pipe input stream if any\n          if (inputStream) {\n            inputStream.source.on('error', function(err) {\n              var reportingErr = new Error('Input stream error: ' + err.message);\n              reportingErr.inputStreamError = err;\n              emitEnd(reportingErr);\n              ffmpegProc.kill();\n            });\n\n            inputStream.source.resume();\n            inputStream.source.pipe(ffmpegProc.stdin);\n\n            // Set stdin error handler on ffmpeg (prevents nodejs catching the error, but\n            // ffmpeg will fail anyway, so no need to actually handle anything)\n            ffmpegProc.stdin.on('error', function() {});\n          }\n\n          // Setup timeout if requested\n          if (self.options.timeout) {\n            self.processTimer = setTimeout(function() {\n              var msg = 'process ran into a timeout (' + self.options.timeout + 's)';\n\n              emitEnd(new Error(msg), stdoutRing.get(), stderrRing.get());\n              ffmpegProc.kill();\n            }, self.options.timeout * 1000);\n          }\n\n\n          if (outputStream) {\n            // Pipe ffmpeg stdout to output stream\n            ffmpegProc.stdout.pipe(outputStream.target, outputStream.pipeopts);\n\n            // Handle output stream events\n            outputStream.target.on('close', function() {\n              self.logger.debug('Output stream closed, scheduling kill for ffmpeg process');\n\n              // Don't kill process yet, to give a chance to ffmpeg to\n              // terminate successfully first  This is necessary because\n              // under load, the process 'exit' event sometimes happens\n              // after the output stream 'close' event.\n              setTimeout(function() {\n                emitEnd(new Error('Output stream closed'));\n                ffmpegProc.kill();\n              }, 20);\n            });\n\n            outputStream.target.on('error', function(err) {\n              self.logger.debug('Output stream error, killing ffmpeg process');\n              var reportingErr = new Error('Output stream error: ' + err.message);\n              reportingErr.outputStreamError = err;\n              emitEnd(reportingErr, stdoutRing.get(), stderrRing.get());\n              ffmpegProc.kill('SIGKILL');\n            });\n          }\n\n          // Setup stderr handling\n          if (stderrRing) {\n\n            // 'stderr' event\n            if (self.listeners('stderr').length) {\n              stderrRing.callback(function(line) {\n                self.emit('stderr', line);\n              });\n            }\n\n            // 'codecData' event\n            if (self.listeners('codecData').length) {\n              var codecDataSent = false;\n              var codecObject = {};\n\n              stderrRing.callback(function(line) {\n                if (!codecDataSent)\n                  codecDataSent = utils.extractCodecData(self, line, codecObject);\n              });\n            }\n\n            // 'progress' event\n            if (self.listeners('progress').length) {\n              stderrRing.callback(function(line) {\n                utils.extractProgress(self, line);\n              });\n            }\n          }\n        },\n\n        function endCB(err, stdoutRing, stderrRing) {\n          clearTimeout(self.processTimer);\n          delete self.ffmpegProc;\n\n          if (err) {\n            if (err.message.match(/ffmpeg exited with code/)) {\n              // Add ffmpeg error message\n              err.message += ': ' + utils.extractError(stderrRing.get());\n            }\n\n            emitEnd(err, stdoutRing.get(), stderrRing.get());\n          } else {\n            // Find out which outputs need flv metadata\n            var flvmeta = self._outputs.filter(function(output) {\n              return output.flags.flvmeta;\n            });\n\n            if (flvmeta.length) {\n              self._getFlvtoolPath(function(err, flvtool) {\n                if (err) {\n                  return emitEnd(err);\n                }\n\n                async.each(\n                  flvmeta,\n                  function(output, cb) {\n                    spawn(flvtool, ['-U', output.target], {windowsHide: true})\n                      .on('error', function(err) {\n                        cb(new Error('Error running ' + flvtool + ' on ' + output.target + ': ' + err.message));\n                      })\n                      .on('exit', function(code, signal) {\n                        if (code !== 0 || signal) {\n                          cb(\n                            new Error(flvtool + ' ' +\n                              (signal ? 'received signal ' + signal\n                                      : 'exited with code ' + code)) +\n                              ' when running on ' + output.target\n                          );\n                        } else {\n                          cb();\n                        }\n                      });\n                  },\n                  function(err) {\n                    if (err) {\n                      emitEnd(err);\n                    } else {\n                      emitEnd(null, stdoutRing.get(), stderrRing.get());\n                    }\n                  }\n                );\n              });\n            } else {\n              emitEnd(null, stdoutRing.get(), stderrRing.get());\n            }\n          }\n        }\n      );\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Renice current and/or future ffmpeg processes\n   *\n   * Ignored on Windows platforms.\n   *\n   * @method FfmpegCommand#renice\n   * @category Processing\n   *\n   * @param {Number} [niceness=0] niceness value between -20 (highest priority) and 20 (lowest priority)\n   * @return FfmpegCommand\n   */\n  proto.renice = function(niceness) {\n    if (!utils.isWindows) {\n      niceness = niceness || 0;\n\n      if (niceness < -20 || niceness > 20) {\n        this.logger.warn('Invalid niceness value: ' + niceness + ', must be between -20 and 20');\n      }\n\n      niceness = Math.min(20, Math.max(-20, niceness));\n      this.options.niceness = niceness;\n\n      if (this.ffmpegProc) {\n        var logger = this.logger;\n        var pid = this.ffmpegProc.pid;\n        var renice = spawn('renice', [niceness, '-p', pid], {windowsHide: true});\n\n        renice.on('error', function(err) {\n          logger.warn('could not renice process ' + pid + ': ' + err.message);\n        });\n\n        renice.on('exit', function(code, signal) {\n          if (signal) {\n            logger.warn('could not renice process ' + pid + ': renice was killed by signal ' + signal);\n          } else if (code) {\n            logger.warn('could not renice process ' + pid + ': renice exited with ' + code);\n          } else {\n            logger.info('successfully reniced process ' + pid + ' to ' + niceness + ' niceness');\n          }\n        });\n      }\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Kill current ffmpeg process, if any\n   *\n   * @method FfmpegCommand#kill\n   * @category Processing\n   *\n   * @param {String} [signal=SIGKILL] signal name\n   * @return FfmpegCommand\n   */\n  proto.kill = function(signal) {\n    if (!this.ffmpegProc) {\n      this.logger.warn('No running ffmpeg process, cannot send signal');\n    } else {\n      this.ffmpegProc.kill(signal || 'SIGKILL');\n    }\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/processor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/recipes.js":
/*!***************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/recipes.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/lib/async.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\");\n\n\n/*\n * Useful recipes for commands\n */\n\nmodule.exports = function recipes(proto) {\n  /**\n   * Execute ffmpeg command and save output to a file\n   *\n   * @method FfmpegCommand#save\n   * @category Processing\n   * @aliases saveToFile\n   *\n   * @param {String} output file path\n   * @return FfmpegCommand\n   */\n  proto.saveToFile =\n  proto.save = function(output) {\n    this.output(output).run();\n    return this;\n  };\n\n\n  /**\n   * Execute ffmpeg command and save output to a stream\n   *\n   * If 'stream' is not specified, a PassThrough stream is created and returned.\n   * 'options' will be used when piping ffmpeg output to the output stream\n   * (@see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options)\n   *\n   * @method FfmpegCommand#pipe\n   * @category Processing\n   * @aliases stream,writeToStream\n   *\n   * @param {stream.Writable} [stream] output stream\n   * @param {Object} [options={}] pipe options\n   * @return Output stream\n   */\n  proto.writeToStream =\n  proto.pipe =\n  proto.stream = function(stream, options) {\n    if (stream && !('writable' in stream)) {\n      options = stream;\n      stream = undefined;\n    }\n\n    if (!stream) {\n      if (process.version.match(/v0\\.8\\./)) {\n        throw new Error('PassThrough stream is not supported on node v0.8');\n      }\n\n      stream = new PassThrough();\n    }\n\n    this.output(stream, options).run();\n    return stream;\n  };\n\n\n  /**\n   * Generate images from a video\n   *\n   * Note: this method makes the command emit a 'filenames' event with an array of\n   * the generated image filenames.\n   *\n   * @method FfmpegCommand#screenshots\n   * @category Processing\n   * @aliases takeScreenshots,thumbnail,thumbnails,screenshot\n   *\n   * @param {Number|Object} [config=1] screenshot count or configuration object with\n   *   the following keys:\n   * @param {Number} [config.count] number of screenshots to take; using this option\n   *   takes screenshots at regular intervals (eg. count=4 would take screens at 20%, 40%,\n   *   60% and 80% of the video length).\n   * @param {String} [config.folder='.'] output folder\n   * @param {String} [config.filename='tn.png'] output filename pattern, may contain the following\n   *   tokens:\n   *   - '%s': offset in seconds\n   *   - '%w': screenshot width\n   *   - '%h': screenshot height\n   *   - '%r': screenshot resolution (same as '%wx%h')\n   *   - '%f': input filename\n   *   - '%b': input basename (filename w/o extension)\n   *   - '%i': index of screenshot in timemark array (can be zero-padded by using it like `%000i`)\n   * @param {Number[]|String[]} [config.timemarks] array of timemarks to take screenshots\n   *   at; each timemark may be a number of seconds, a '[[hh:]mm:]ss[.xxx]' string or a\n   *   'XX%' string.  Overrides 'count' if present.\n   * @param {Number[]|String[]} [config.timestamps] alias for 'timemarks'\n   * @param {Boolean} [config.fastSeek] use fast seek (less accurate)\n   * @param {String} [config.size] screenshot size, with the same syntax as {@link FfmpegCommand#size}\n   * @param {String} [folder] output folder (legacy alias for 'config.folder')\n   * @return FfmpegCommand\n   */\n  proto.takeScreenshots =\n  proto.thumbnail =\n  proto.thumbnails =\n  proto.screenshot =\n  proto.screenshots = function(config, folder) {\n    var self = this;\n    var source = this._currentInput.source;\n    config = config || { count: 1 };\n\n    // Accept a number of screenshots instead of a config object\n    if (typeof config === 'number') {\n      config = {\n        count: config\n      };\n    }\n\n    // Accept a second 'folder' parameter instead of config.folder\n    if (!('folder' in config)) {\n      config.folder = folder || '.';\n    }\n\n    // Accept 'timestamps' instead of 'timemarks'\n    if ('timestamps' in config) {\n      config.timemarks = config.timestamps;\n    }\n\n    // Compute timemarks from count if not present\n    if (!('timemarks' in config)) {\n      if (!config.count) {\n        throw new Error('Cannot take screenshots: neither a count nor a timemark list are specified');\n      }\n\n      var interval = 100 / (1 + config.count);\n      config.timemarks = [];\n      for (var i = 0; i < config.count; i++) {\n        config.timemarks.push((interval * (i + 1)) + '%');\n      }\n    }\n\n    // Parse size option\n    if ('size' in config) {\n      var fixedSize = config.size.match(/^(\\d+)x(\\d+)$/);\n      var fixedWidth = config.size.match(/^(\\d+)x\\?$/);\n      var fixedHeight = config.size.match(/^\\?x(\\d+)$/);\n      var percentSize = config.size.match(/^(\\d+)%$/);\n\n      if (!fixedSize && !fixedWidth && !fixedHeight && !percentSize) {\n        throw new Error('Invalid size parameter: ' + config.size);\n      }\n    }\n\n    // Metadata helper\n    var metadata;\n    function getMetadata(cb) {\n      if (metadata) {\n        cb(null, metadata);\n      } else {\n        self.ffprobe(function(err, meta) {\n          metadata = meta;\n          cb(err, meta);\n        });\n      }\n    }\n\n    async.waterfall([\n      // Compute percent timemarks if any\n      function computeTimemarks(next) {\n        if (config.timemarks.some(function(t) { return ('' + t).match(/^[\\d.]+%$/); })) {\n          if (typeof source !== 'string') {\n            return next(new Error('Cannot compute screenshot timemarks with an input stream, please specify fixed timemarks'));\n          }\n\n          getMetadata(function(err, meta) {\n            if (err) {\n              next(err);\n            } else {\n              // Select video stream with the highest resolution\n              var vstream = meta.streams.reduce(function(biggest, stream) {\n                if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {\n                  return stream;\n                } else {\n                  return biggest;\n                }\n              }, { width: 0, height: 0 });\n\n              if (vstream.width === 0) {\n                return next(new Error('No video stream in input, cannot take screenshots'));\n              }\n\n              var duration = Number(vstream.duration);\n              if (isNaN(duration)) {\n                duration = Number(meta.format.duration);\n              }\n\n              if (isNaN(duration)) {\n                return next(new Error('Could not get input duration, please specify fixed timemarks'));\n              }\n\n              config.timemarks = config.timemarks.map(function(mark) {\n                if (('' + mark).match(/^([\\d.]+)%$/)) {\n                  return duration * parseFloat(mark) / 100;\n                } else {\n                  return mark;\n                }\n              });\n\n              next();\n            }\n          });\n        } else {\n          next();\n        }\n      },\n\n      // Turn all timemarks into numbers and sort them\n      function normalizeTimemarks(next) {\n        config.timemarks = config.timemarks.map(function(mark) {\n          return utils.timemarkToSeconds(mark);\n        }).sort(function(a, b) { return a - b; });\n\n        next();\n      },\n\n      // Add '_%i' to pattern when requesting multiple screenshots and no variable token is present\n      function fixPattern(next) {\n        var pattern = config.filename || 'tn.png';\n\n        if (pattern.indexOf('.') === -1) {\n          pattern += '.png';\n        }\n\n        if (config.timemarks.length > 1 && !pattern.match(/%(s|0*i)/)) {\n          var ext = path.extname(pattern);\n          pattern = path.join(path.dirname(pattern), path.basename(pattern, ext) + '_%i' + ext);\n        }\n\n        next(null, pattern);\n      },\n\n      // Replace filename tokens (%f, %b) in pattern\n      function replaceFilenameTokens(pattern, next) {\n        if (pattern.match(/%[bf]/)) {\n          if (typeof source !== 'string') {\n            return next(new Error('Cannot replace %f or %b when using an input stream'));\n          }\n\n          pattern = pattern\n            .replace(/%f/g, path.basename(source))\n            .replace(/%b/g, path.basename(source, path.extname(source)));\n        }\n\n        next(null, pattern);\n      },\n\n      // Compute size if needed\n      function getSize(pattern, next) {\n        if (pattern.match(/%[whr]/)) {\n          if (fixedSize) {\n            return next(null, pattern, fixedSize[1], fixedSize[2]);\n          }\n\n          getMetadata(function(err, meta) {\n            if (err) {\n              return next(new Error('Could not determine video resolution to replace %w, %h or %r'));\n            }\n\n            var vstream = meta.streams.reduce(function(biggest, stream) {\n              if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {\n                return stream;\n              } else {\n                return biggest;\n              }\n            }, { width: 0, height: 0 });\n\n            if (vstream.width === 0) {\n              return next(new Error('No video stream in input, cannot replace %w, %h or %r'));\n            }\n\n            var width = vstream.width;\n            var height = vstream.height;\n\n            if (fixedWidth) {\n              height = height * Number(fixedWidth[1]) / width;\n              width = Number(fixedWidth[1]);\n            } else if (fixedHeight) {\n              width = width * Number(fixedHeight[1]) / height;\n              height = Number(fixedHeight[1]);\n            } else if (percentSize) {\n              width = width * Number(percentSize[1]) / 100;\n              height = height * Number(percentSize[1]) / 100;\n            }\n\n            next(null, pattern, Math.round(width / 2) * 2, Math.round(height / 2) * 2);\n          });\n        } else {\n          next(null, pattern, -1, -1);\n        }\n      },\n\n      // Replace size tokens (%w, %h, %r) in pattern\n      function replaceSizeTokens(pattern, width, height, next) {\n        pattern = pattern\n          .replace(/%r/g, '%wx%h')\n          .replace(/%w/g, width)\n          .replace(/%h/g, height);\n\n        next(null, pattern);\n      },\n\n      // Replace variable tokens in pattern (%s, %i) and generate filename list\n      function replaceVariableTokens(pattern, next) {\n        var filenames = config.timemarks.map(function(t, i) {\n          return pattern\n            .replace(/%s/g, utils.timemarkToSeconds(t))\n            .replace(/%(0*)i/g, function(match, padding) {\n              var idx = '' + (i + 1);\n              return padding.substr(0, Math.max(0, padding.length + 1 - idx.length)) + idx;\n            });\n        });\n\n        self.emit('filenames', filenames);\n        next(null, filenames);\n      },\n\n      // Create output directory\n      function createDirectory(filenames, next) {\n        fs.exists(config.folder, function(exists) {\n          if (!exists) {\n            fs.mkdir(config.folder, function(err) {\n              if (err) {\n                next(err);\n              } else {\n                next(null, filenames);\n              }\n            });\n          } else {\n            next(null, filenames);\n          }\n        });\n      }\n    ], function runCommand(err, filenames) {\n      if (err) {\n        return self.emit('error', err);\n      }\n\n      var count = config.timemarks.length;\n      var split;\n      var filters = [split = {\n        filter: 'split',\n        options: count,\n        outputs: []\n      }];\n\n      if ('size' in config) {\n        // Set size to generate size filters\n        self.size(config.size);\n\n        // Get size filters and chain them with 'sizeN' stream names\n        var sizeFilters =  self._currentOutput.sizeFilters.get().map(function(f, i) {\n          if (i > 0) {\n            f.inputs = 'size' + (i - 1);\n          }\n\n          f.outputs = 'size' + i;\n\n          return f;\n        });\n\n        // Input last size filter output into split filter\n        split.inputs = 'size' + (sizeFilters.length - 1);\n\n        // Add size filters in front of split filter\n        filters = sizeFilters.concat(filters);\n\n        // Remove size filters\n        self._currentOutput.sizeFilters.clear();\n      }\n\n      var first = 0;\n      for (var i = 0; i < count; i++) {\n        var stream = 'screen' + i;\n        split.outputs.push(stream);\n\n        if (i === 0) {\n          first = config.timemarks[i];\n          self.seekInput(first);\n        }\n\n        self.output(path.join(config.folder, filenames[i]))\n          .frames(1)\n          .map(stream);\n\n        if (i > 0) {\n          self.seek(config.timemarks[i] - first);\n        }\n      }\n\n      self.complexFilter(filters);\n      self.run();\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Merge (concatenate) inputs to a single file\n   *\n   * @method FfmpegCommand#concat\n   * @category Processing\n   * @aliases concatenate,mergeToFile\n   *\n   * @param {String|Writable} target output file or writable stream\n   * @param {Object} [options] pipe options (only used when outputting to a writable stream)\n   * @return FfmpegCommand\n   */\n  proto.mergeToFile =\n  proto.concatenate =\n  proto.concat = function(target, options) {\n    // Find out which streams are present in the first non-stream input\n    var fileInput = this._inputs.filter(function(input) {\n      return !input.isStream;\n    })[0];\n\n    var self = this;\n    this.ffprobe(this._inputs.indexOf(fileInput), function(err, data) {\n      if (err) {\n        return self.emit('error', err);\n      }\n\n      var hasAudioStreams = data.streams.some(function(stream) {\n        return stream.codec_type === 'audio';\n      });\n\n      var hasVideoStreams = data.streams.some(function(stream) {\n        return stream.codec_type === 'video';\n      });\n\n      // Setup concat filter and start processing\n      self.output(target, options)\n        .complexFilter({\n          filter: 'concat',\n          options: {\n            n: self._inputs.length,\n            v: hasVideoStreams ? 1 : 0,\n            a: hasAudioStreams ? 1 : 0\n          }\n        })\n        .run();\n    });\n\n    return this;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/recipes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/lib/utils.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*jshint node:true*/\n\n\nvar exec = (__webpack_require__(/*! child_process */ \"child_process\").exec);\nvar isWindows = (__webpack_require__(/*! os */ \"os\").platform)().match(/win(32|64)/);\nvar which = __webpack_require__(/*! which */ \"(rsc)/./node_modules/fluent-ffmpeg/node_modules/which/which.js\");\n\nvar nlRegexp = /\\r\\n|\\r|\\n/g;\nvar streamRegexp = /^\\[?(.*?)\\]?$/;\nvar filterEscapeRegexp = /[,]/;\nvar whichCache = {};\n\n/**\n * Parse progress line from ffmpeg stderr\n *\n * @param {String} line progress line\n * @return progress object\n * @private\n */\nfunction parseProgressLine(line) {\n  var progress = {};\n\n  // Remove all spaces after = and trim\n  line  = line.replace(/=\\s+/g, '=').trim();\n  var progressParts = line.split(' ');\n\n  // Split every progress part by \"=\" to get key and value\n  for(var i = 0; i < progressParts.length; i++) {\n    var progressSplit = progressParts[i].split('=', 2);\n    var key = progressSplit[0];\n    var value = progressSplit[1];\n\n    // This is not a progress line\n    if(typeof value === 'undefined')\n      return null;\n\n    progress[key] = value;\n  }\n\n  return progress;\n}\n\n\nvar utils = module.exports = {\n  isWindows: isWindows,\n  streamRegexp: streamRegexp,\n\n\n  /**\n   * Copy an object keys into another one\n   *\n   * @param {Object} source source object\n   * @param {Object} dest destination object\n   * @private\n   */\n  copy: function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n      dest[key] = source[key];\n    });\n  },\n\n\n  /**\n   * Create an argument list\n   *\n   * Returns a function that adds new arguments to the list.\n   * It also has the following methods:\n   * - clear() empties the argument list\n   * - get() returns the argument list\n   * - find(arg, count) finds 'arg' in the list and return the following 'count' items, or undefined if not found\n   * - remove(arg, count) remove 'arg' in the list as well as the following 'count' items\n   *\n   * @private\n   */\n  args: function() {\n    var list = [];\n\n    // Append argument(s) to the list\n    var argfunc = function() {\n      if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        list = list.concat(arguments[0]);\n      } else {\n        list = list.concat([].slice.call(arguments));\n      }\n    };\n\n    // Clear argument list\n    argfunc.clear = function() {\n      list = [];\n    };\n\n    // Return argument list\n    argfunc.get = function() {\n      return list;\n    };\n\n    // Find argument 'arg' in list, and if found, return an array of the 'count' items that follow it\n    argfunc.find = function(arg, count) {\n      var index = list.indexOf(arg);\n      if (index !== -1) {\n        return list.slice(index + 1, index + 1 + (count || 0));\n      }\n    };\n\n    // Find argument 'arg' in list, and if found, remove it as well as the 'count' items that follow it\n    argfunc.remove = function(arg, count) {\n      var index = list.indexOf(arg);\n      if (index !== -1) {\n        list.splice(index, (count || 0) + 1);\n      }\n    };\n\n    // Clone argument list\n    argfunc.clone = function() {\n      var cloned = utils.args();\n      cloned(list);\n      return cloned;\n    };\n\n    return argfunc;\n  },\n\n\n  /**\n   * Generate filter strings\n   *\n   * @param {String[]|Object[]} filters filter specifications. When using objects,\n   *   each must have the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|Array} [filters.inputs] (array of) input stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically choosing the first unused matching streams\n   * @param {String|Array} [filters.outputs] (array of) output stream specifier(s) for the filter,\n   *   defaults to ffmpeg automatically assigning the output to the output file\n   * @param {Object|String|Array} [filters.options] filter options, can be omitted to not set any options\n   * @return String[]\n   * @private\n   */\n  makeFilterStrings: function(filters) {\n    return filters.map(function(filterSpec) {\n      if (typeof filterSpec === 'string') {\n        return filterSpec;\n      }\n\n      var filterString = '';\n\n      // Filter string format is:\n      // [input1][input2]...filter[output1][output2]...\n      // The 'filter' part can optionaly have arguments:\n      //   filter=arg1:arg2:arg3\n      //   filter=arg1=v1:arg2=v2:arg3=v3\n\n      // Add inputs\n      if (Array.isArray(filterSpec.inputs)) {\n        filterString += filterSpec.inputs.map(function(streamSpec) {\n          return streamSpec.replace(streamRegexp, '[$1]');\n        }).join('');\n      } else if (typeof filterSpec.inputs === 'string') {\n        filterString += filterSpec.inputs.replace(streamRegexp, '[$1]');\n      }\n\n      // Add filter\n      filterString += filterSpec.filter;\n\n      // Add options\n      if (filterSpec.options) {\n        if (typeof filterSpec.options === 'string' || typeof filterSpec.options === 'number') {\n          // Option string\n          filterString += '=' + filterSpec.options;\n        } else if (Array.isArray(filterSpec.options)) {\n          // Option array (unnamed options)\n          filterString += '=' + filterSpec.options.map(function(option) {\n            if (typeof option === 'string' && option.match(filterEscapeRegexp)) {\n              return '\\'' + option + '\\'';\n            } else {\n              return option;\n            }\n          }).join(':');\n        } else if (Object.keys(filterSpec.options).length) {\n          // Option object (named options)\n          filterString += '=' + Object.keys(filterSpec.options).map(function(option) {\n            var value = filterSpec.options[option];\n\n            if (typeof value === 'string' && value.match(filterEscapeRegexp)) {\n              value = '\\'' + value + '\\'';\n            }\n\n            return option + '=' + value;\n          }).join(':');\n        }\n      }\n\n      // Add outputs\n      if (Array.isArray(filterSpec.outputs)) {\n        filterString += filterSpec.outputs.map(function(streamSpec) {\n          return streamSpec.replace(streamRegexp, '[$1]');\n        }).join('');\n      } else if (typeof filterSpec.outputs === 'string') {\n        filterString += filterSpec.outputs.replace(streamRegexp, '[$1]');\n      }\n\n      return filterString;\n    });\n  },\n\n\n  /**\n   * Search for an executable\n   *\n   * Uses 'which' or 'where' depending on platform\n   *\n   * @param {String} name executable name\n   * @param {Function} callback callback with signature (err, path)\n   * @private\n   */\n  which: function(name, callback) {\n    if (name in whichCache) {\n      return callback(null, whichCache[name]);\n    }\n\n    which(name, function(err, result){\n      if (err) {\n        // Treat errors as not found\n        return callback(null, whichCache[name] = '');\n      }\n      callback(null, whichCache[name] = result);\n    });\n  },\n\n\n  /**\n   * Convert a [[hh:]mm:]ss[.xxx] timemark into seconds\n   *\n   * @param {String} timemark timemark string\n   * @return Number\n   * @private\n   */\n  timemarkToSeconds: function(timemark) {\n    if (typeof timemark === 'number') {\n      return timemark;\n    }\n\n    if (timemark.indexOf(':') === -1 && timemark.indexOf('.') >= 0) {\n      return Number(timemark);\n    }\n\n    var parts = timemark.split(':');\n\n    // add seconds\n    var secs = Number(parts.pop());\n\n    if (parts.length) {\n      // add minutes\n      secs += Number(parts.pop()) * 60;\n    }\n\n    if (parts.length) {\n      // add hours\n      secs += Number(parts.pop()) * 3600;\n    }\n\n    return secs;\n  },\n\n\n  /**\n   * Extract codec data from ffmpeg stderr and emit 'codecData' event if appropriate\n   * Call it with an initially empty codec object once with each line of stderr output until it returns true\n   *\n   * @param {FfmpegCommand} command event emitter\n   * @param {String} stderrLine ffmpeg stderr output line\n   * @param {Object} codecObject object used to accumulate codec data between calls\n   * @return {Boolean} true if codec data is complete (and event was emitted), false otherwise\n   * @private\n   */\n  extractCodecData: function(command, stderrLine, codecsObject) {\n    var inputPattern = /Input #[0-9]+, ([^ ]+),/;\n    var durPattern = /Duration\\: ([^,]+)/;\n    var audioPattern = /Audio\\: (.*)/;\n    var videoPattern = /Video\\: (.*)/;\n\n    if (!('inputStack' in codecsObject)) {\n      codecsObject.inputStack = [];\n      codecsObject.inputIndex = -1;\n      codecsObject.inInput = false;\n    }\n\n    var inputStack = codecsObject.inputStack;\n    var inputIndex = codecsObject.inputIndex;\n    var inInput = codecsObject.inInput;\n\n    var format, dur, audio, video;\n\n    if (format = stderrLine.match(inputPattern)) {\n      inInput = codecsObject.inInput = true;\n      inputIndex = codecsObject.inputIndex = codecsObject.inputIndex + 1;\n\n      inputStack[inputIndex] = { format: format[1], audio: '', video: '', duration: '' };\n    } else if (inInput && (dur = stderrLine.match(durPattern))) {\n      inputStack[inputIndex].duration = dur[1];\n    } else if (inInput && (audio = stderrLine.match(audioPattern))) {\n      audio = audio[1].split(', ');\n      inputStack[inputIndex].audio = audio[0];\n      inputStack[inputIndex].audio_details = audio;\n    } else if (inInput && (video = stderrLine.match(videoPattern))) {\n      video = video[1].split(', ');\n      inputStack[inputIndex].video = video[0];\n      inputStack[inputIndex].video_details = video;\n    } else if (/Output #\\d+/.test(stderrLine)) {\n      inInput = codecsObject.inInput = false;\n    } else if (/Stream mapping:|Press (\\[q\\]|ctrl-c) to stop/.test(stderrLine)) {\n      command.emit.apply(command, ['codecData'].concat(inputStack));\n      return true;\n    }\n\n    return false;\n  },\n\n\n  /**\n   * Extract progress data from ffmpeg stderr and emit 'progress' event if appropriate\n   *\n   * @param {FfmpegCommand} command event emitter\n   * @param {String} stderrLine ffmpeg stderr data\n   * @private\n   */\n  extractProgress: function(command, stderrLine) {\n    var progress = parseProgressLine(stderrLine);\n\n    if (progress) {\n      // build progress report object\n      var ret = {\n        frames: parseInt(progress.frame, 10),\n        currentFps: parseInt(progress.fps, 10),\n        currentKbps: progress.bitrate ? parseFloat(progress.bitrate.replace('kbits/s', '')) : 0,\n        targetSize: parseInt(progress.size || progress.Lsize, 10),\n        timemark: progress.time\n      };\n\n      // calculate percent progress using duration\n      if (command._ffprobeData && command._ffprobeData.format && command._ffprobeData.format.duration) {\n        var duration = Number(command._ffprobeData.format.duration);\n        if (!isNaN(duration))\n          ret.percent = (utils.timemarkToSeconds(ret.timemark) / duration) * 100;\n      }\n      command.emit('progress', ret);\n    }\n  },\n\n\n  /**\n   * Extract error message(s) from ffmpeg stderr\n   *\n   * @param {String} stderr ffmpeg stderr data\n   * @return {String}\n   * @private\n   */\n  extractError: function(stderr) {\n    // Only return the last stderr lines that don't start with a space or a square bracket\n    return stderr.split(nlRegexp).reduce(function(messages, message) {\n      if (message.charAt(0) === ' ' || message.charAt(0) === '[') {\n        return [];\n      } else {\n        messages.push(message);\n        return messages;\n      }\n    }, []).join('\\n');\n  },\n\n\n  /**\n   * Creates a line ring buffer object with the following methods:\n   * - append(str) : appends a string or buffer\n   * - get() : returns the whole string\n   * - close() : prevents further append() calls and does a last call to callbacks\n   * - callback(cb) : calls cb for each line (incl. those already in the ring)\n   *\n   * @param {Number} maxLines maximum number of lines to store (<= 0 for unlimited)\n   */\n  linesRing: function(maxLines) {\n    var cbs = [];\n    var lines = [];\n    var current = null;\n    var closed = false\n    var max = maxLines - 1;\n\n    function emit(line) {\n      cbs.forEach(function(cb) { cb(line); });\n    }\n\n    return {\n      callback: function(cb) {\n        lines.forEach(function(l) { cb(l); });\n        cbs.push(cb);\n      },\n\n      append: function(str) {\n        if (closed) return;\n        if (str instanceof Buffer) str = '' + str;\n        if (!str || str.length === 0) return;\n\n        var newLines = str.split(nlRegexp);\n\n        if (newLines.length === 1) {\n          if (current !== null) {\n            current = current + newLines.shift();\n          } else {\n            current = newLines.shift();\n          }\n        } else {\n          if (current !== null) {\n            current = current + newLines.shift();\n            emit(current);\n            lines.push(current);\n          }\n\n          current = newLines.pop();\n\n          newLines.forEach(function(l) {\n            emit(l);\n            lines.push(l);\n          });\n\n          if (max > -1 && lines.length > max) {\n            lines.splice(0, lines.length - max);\n          }\n        }\n      },\n\n      get: function() {\n        if (current !== null) {\n          return lines.concat([current]).join('\\n');\n        } else {\n          return lines.join('\\n');\n        }\n      },\n\n      close: function() {\n        if (closed) return;\n\n        if (current !== null) {\n          emit(current);\n          lines.push(current);\n\n          if (max > -1 && lines.length > max) {\n            lines.shift();\n          }\n\n          current = null;\n        }\n\n        closed = true;\n      }\n    };\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fluent-ffmpeg/node_modules/which/which.js":
/*!****************************************************************!*\
  !*** ./node_modules/fluent-ffmpeg/node_modules/which/which.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = __webpack_require__(/*! path */ \"path\")\nvar COLON = isWindows ? ';' : ':'\nvar isexe = __webpack_require__(/*! isexe */ \"(rsc)/./node_modules/isexe/index.js\")\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmx1ZW50LWZmbXBlZy9ub2RlX21vZHVsZXMvd2hpY2gvd2hpY2guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLDBCQUEwQjtBQUMxQixZQUFZLG1CQUFPLENBQUMsa0RBQU87O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxLQUFLLEtBQUs7QUFDeEU7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsT0FBTztBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsUUFBUTtBQUNqRDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscUJBQXFCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR1c2NyaWJlLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1mZm1wZWcvbm9kZV9tb2R1bGVzL3doaWNoL3doaWNoLmpzP2U2NWUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB3aGljaFxud2hpY2guc3luYyA9IHdoaWNoU3luY1xuXG52YXIgaXNXaW5kb3dzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyB8fFxuICAgIHByb2Nlc3MuZW52Lk9TVFlQRSA9PT0gJ2N5Z3dpbicgfHxcbiAgICBwcm9jZXNzLmVudi5PU1RZUEUgPT09ICdtc3lzJ1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIENPTE9OID0gaXNXaW5kb3dzID8gJzsnIDogJzonXG52YXIgaXNleGUgPSByZXF1aXJlKCdpc2V4ZScpXG5cbmZ1bmN0aW9uIGdldE5vdEZvdW5kRXJyb3IgKGNtZCkge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ25vdCBmb3VuZDogJyArIGNtZClcbiAgZXIuY29kZSA9ICdFTk9FTlQnXG5cbiAgcmV0dXJuIGVyXG59XG5cbmZ1bmN0aW9uIGdldFBhdGhJbmZvIChjbWQsIG9wdCkge1xuICB2YXIgY29sb24gPSBvcHQuY29sb24gfHwgQ09MT05cbiAgdmFyIHBhdGhFbnYgPSBvcHQucGF0aCB8fCBwcm9jZXNzLmVudi5QQVRIIHx8ICcnXG4gIHZhciBwYXRoRXh0ID0gWycnXVxuXG4gIHBhdGhFbnYgPSBwYXRoRW52LnNwbGl0KGNvbG9uKVxuXG4gIHZhciBwYXRoRXh0RXhlID0gJydcbiAgaWYgKGlzV2luZG93cykge1xuICAgIHBhdGhFbnYudW5zaGlmdChwcm9jZXNzLmN3ZCgpKVxuICAgIHBhdGhFeHRFeGUgPSAob3B0LnBhdGhFeHQgfHwgcHJvY2Vzcy5lbnYuUEFUSEVYVCB8fCAnLkVYRTsuQ01EOy5CQVQ7LkNPTScpXG4gICAgcGF0aEV4dCA9IHBhdGhFeHRFeGUuc3BsaXQoY29sb24pXG5cblxuICAgIC8vIEFsd2F5cyB0ZXN0IHRoZSBjbWQgaXRzZWxmIGZpcnN0LiAgaXNleGUgd2lsbCBjaGVjayB0byBtYWtlIHN1cmVcbiAgICAvLyBpdCdzIGZvdW5kIGluIHRoZSBwYXRoRXh0IHNldC5cbiAgICBpZiAoY21kLmluZGV4T2YoJy4nKSAhPT0gLTEgJiYgcGF0aEV4dFswXSAhPT0gJycpXG4gICAgICBwYXRoRXh0LnVuc2hpZnQoJycpXG4gIH1cblxuICAvLyBJZiBpdCBoYXMgYSBzbGFzaCwgdGhlbiB3ZSBkb24ndCBib3RoZXIgc2VhcmNoaW5nIHRoZSBwYXRoZW52LlxuICAvLyBqdXN0IGNoZWNrIHRoZSBmaWxlIGl0c2VsZiwgYW5kIHRoYXQncyBpdC5cbiAgaWYgKGNtZC5tYXRjaCgvXFwvLykgfHwgaXNXaW5kb3dzICYmIGNtZC5tYXRjaCgvXFxcXC8pKVxuICAgIHBhdGhFbnYgPSBbJyddXG5cbiAgcmV0dXJuIHtcbiAgICBlbnY6IHBhdGhFbnYsXG4gICAgZXh0OiBwYXRoRXh0LFxuICAgIGV4dEV4ZTogcGF0aEV4dEV4ZVxuICB9XG59XG5cbmZ1bmN0aW9uIHdoaWNoIChjbWQsIG9wdCwgY2IpIHtcbiAgaWYgKHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdFxuICAgIG9wdCA9IHt9XG4gIH1cblxuICB2YXIgaW5mbyA9IGdldFBhdGhJbmZvKGNtZCwgb3B0KVxuICB2YXIgcGF0aEVudiA9IGluZm8uZW52XG4gIHZhciBwYXRoRXh0ID0gaW5mby5leHRcbiAgdmFyIHBhdGhFeHRFeGUgPSBpbmZvLmV4dEV4ZVxuICB2YXIgZm91bmQgPSBbXVxuXG4gIDsoZnVuY3Rpb24gRiAoaSwgbCkge1xuICAgIGlmIChpID09PSBsKSB7XG4gICAgICBpZiAob3B0LmFsbCAmJiBmb3VuZC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBjYihudWxsLCBmb3VuZClcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGNiKGdldE5vdEZvdW5kRXJyb3IoY21kKSlcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcnQgPSBwYXRoRW52W2ldXG4gICAgaWYgKHBhdGhQYXJ0LmNoYXJBdCgwKSA9PT0gJ1wiJyAmJiBwYXRoUGFydC5zbGljZSgtMSkgPT09ICdcIicpXG4gICAgICBwYXRoUGFydCA9IHBhdGhQYXJ0LnNsaWNlKDEsIC0xKVxuXG4gICAgdmFyIHAgPSBwYXRoLmpvaW4ocGF0aFBhcnQsIGNtZClcbiAgICBpZiAoIXBhdGhQYXJ0ICYmICgvXlxcLltcXFxcXFwvXS8pLnRlc3QoY21kKSkge1xuICAgICAgcCA9IGNtZC5zbGljZSgwLCAyKSArIHBcbiAgICB9XG4gICAgOyhmdW5jdGlvbiBFIChpaSwgbGwpIHtcbiAgICAgIGlmIChpaSA9PT0gbGwpIHJldHVybiBGKGkgKyAxLCBsKVxuICAgICAgdmFyIGV4dCA9IHBhdGhFeHRbaWldXG4gICAgICBpc2V4ZShwICsgZXh0LCB7IHBhdGhFeHQ6IHBhdGhFeHRFeGUgfSwgZnVuY3Rpb24gKGVyLCBpcykge1xuICAgICAgICBpZiAoIWVyICYmIGlzKSB7XG4gICAgICAgICAgaWYgKG9wdC5hbGwpXG4gICAgICAgICAgICBmb3VuZC5wdXNoKHAgKyBleHQpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHAgKyBleHQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEUoaWkgKyAxLCBsbClcbiAgICAgIH0pXG4gICAgfSkoMCwgcGF0aEV4dC5sZW5ndGgpXG4gIH0pKDAsIHBhdGhFbnYubGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB3aGljaFN5bmMgKGNtZCwgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fVxuXG4gIHZhciBpbmZvID0gZ2V0UGF0aEluZm8oY21kLCBvcHQpXG4gIHZhciBwYXRoRW52ID0gaW5mby5lbnZcbiAgdmFyIHBhdGhFeHQgPSBpbmZvLmV4dFxuICB2YXIgcGF0aEV4dEV4ZSA9IGluZm8uZXh0RXhlXG4gIHZhciBmb3VuZCA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoRW52Lmxlbmd0aDsgaSA8IGw7IGkgKyspIHtcbiAgICB2YXIgcGF0aFBhcnQgPSBwYXRoRW52W2ldXG4gICAgaWYgKHBhdGhQYXJ0LmNoYXJBdCgwKSA9PT0gJ1wiJyAmJiBwYXRoUGFydC5zbGljZSgtMSkgPT09ICdcIicpXG4gICAgICBwYXRoUGFydCA9IHBhdGhQYXJ0LnNsaWNlKDEsIC0xKVxuXG4gICAgdmFyIHAgPSBwYXRoLmpvaW4ocGF0aFBhcnQsIGNtZClcbiAgICBpZiAoIXBhdGhQYXJ0ICYmIC9eXFwuW1xcXFxcXC9dLy50ZXN0KGNtZCkpIHtcbiAgICAgIHAgPSBjbWQuc2xpY2UoMCwgMikgKyBwXG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwLCBsbCA9IHBhdGhFeHQubGVuZ3RoOyBqIDwgbGw7IGogKyspIHtcbiAgICAgIHZhciBjdXIgPSBwICsgcGF0aEV4dFtqXVxuICAgICAgdmFyIGlzXG4gICAgICB0cnkge1xuICAgICAgICBpcyA9IGlzZXhlLnN5bmMoY3VyLCB7IHBhdGhFeHQ6IHBhdGhFeHRFeGUgfSlcbiAgICAgICAgaWYgKGlzKSB7XG4gICAgICAgICAgaWYgKG9wdC5hbGwpXG4gICAgICAgICAgICBmb3VuZC5wdXNoKGN1cilcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gY3VyXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHQuYWxsICYmIGZvdW5kLmxlbmd0aClcbiAgICByZXR1cm4gZm91bmRcblxuICBpZiAob3B0Lm5vdGhyb3cpXG4gICAgcmV0dXJuIG51bGxcblxuICB0aHJvdyBnZXROb3RGb3VuZEVycm9yKGNtZClcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fluent-ffmpeg/node_modules/which/which.js\n");

/***/ })

};
;